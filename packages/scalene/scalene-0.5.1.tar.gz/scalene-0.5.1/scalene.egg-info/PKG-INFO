Metadata-Version: 2.1
Name: scalene
Version: 0.5.1
Summary: Scalene: A high-resolution, low-overhead CPU and memory profiler for Python
Home-page: https://github.com/emeryberger/scalene
Author: Emery Berger
Author-email: emery@cs.umass.edu
License: Apache License 2.0
Description: ![scalene](https://github.com/emeryberger/scalene/raw/master/docs/scalene-image.png)
        
        # scalene: a high-performance CPU and memory profiler for Python
        
        by [Emery Berger](https://emeryberger.com)
        
        ------------
        
        ## About Scalene
        
        Scalene is a high-performance CPU *and* memory profiler for Python that does a few things that other Python profilers do not and cannot do.
        
        1. Scalene is _fast_. It uses sampling instead of instrumentation or relying on Python's tracing facilities.
        1. Scalene is _precise_. Unlike most other Python profilers, Scalene performs CPU profiling _at the line level_, pointing to the specific lines of code that are responsible for the execution time in your program. This level of detail can be much more useful information than the function-level profiles returned by most profilers.
        1. Scalene _profiles memory usage_. In addition to tracking CPU usage, Scalene also points to the specific lines of code responsible for memory growth. It accomplishes this via an included specialized memory allocator.
        
        ## Installation
        
        Scalene is distributed as a pip package. You can install it as follows:
        ```
          % pip install scalene
        ```
        
        _NOTE_: Currently, installing Scalene in this way does not install its memory profiling library, so you will only be able to use it to perform CPU profiling. To take advantage of its memory profiling capability, you will need to download this repository.
        
        ## Usage
        
        The following command will run Scalene to only perform line-level CPU profiling on a provided example program.
        
        ```
          % python -m scalene test/testme.py
        ```
        
        To perform both line-level CPU and memory profiling, you first need to build the specialized memory allocator by running `make`:
        
        ```
          % make
        ```
        
        Profiling on a Mac OS X system:
        ```
          % DYLD_INSERT_LIBRARIES=$PWD/libscalene.dylib PYTHONMALLOC=malloc python -m scalene test/testme.py
        ``` 
        
        Profiling on a Linux system:
        ```
          % LD_PRELOAD=$PWD/libscalene.so PYTHONMALLOC=malloc python -m scalene test/testme.py
        ``` 
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
