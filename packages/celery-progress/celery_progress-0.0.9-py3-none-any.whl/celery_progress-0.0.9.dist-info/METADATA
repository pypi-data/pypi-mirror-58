Metadata-Version: 2.1
Name: celery-progress
Version: 0.0.9
Summary: Drop in, configurable, dependency-free progress bars for your Django/Celery applications.
Home-page: https://github.com/czue/celery-progress
Author: Cory Zue
Author-email: cory@coryzue.com
License: MIT License
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 1.11
Classifier: Framework :: Django :: 2.0
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Provides-Extra: rabbitmq
Requires-Dist: channels-rabbitmq ; extra == 'rabbitmq'
Provides-Extra: redis
Requires-Dist: channels-redis ; extra == 'redis'
Provides-Extra: websockets
Requires-Dist: channels ; extra == 'websockets'

Celery Progress Bars for Django
===============================

Drop in, dependency-free progress bars for your Django/Celery
applications.

Super simple setup. Lots of customization available.

Demo
----

`Celery Progress Bar demo on Build With
Django <https://buildwithdjango.com/projects/celery-progress/>`__

Installation
------------

.. code:: bash

    pip install celery-progress

Usage
-----

Prerequisites
~~~~~~~~~~~~~

First add ``celery_progress`` to your ``INSTALLED_APPS`` in
``settings.py``.

Then add the following url config to your main ``urls.py``:

.. code:: python

    from django.urls import re_path
    re_path(r'^celery-progress/', include('celery_progress.urls')),  # the endpoint is configurable

Recording Progress
~~~~~~~~~~~~~~~~~~

In your task you should add something like this:

.. code:: python

    from celery import shared_task
    from celery_progress.backend import ProgressRecorder
    import time

    @shared_task(bind=True)
    def my_task(self, seconds):
        progress_recorder = ProgressRecorder(self)
        result = 0
        for i in range(seconds):
            time.sleep(1)
            result += i
            progress_recorder.set_progress(i + 1, seconds)
        return result

Displaying progress
~~~~~~~~~~~~~~~~~~~

In the view where you call the task you need to get the task ID like so:

**views.py**

.. code:: python

    def progress_view(request):
        result = my_task.delay(10)
        return render(request, 'display_progress.html', context={'task_id': result.task_id})

Then in the page you want to show the progress bar you just do the
following.

Add the following HTML wherever you want your progress bar to appear:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**display\_progress.html**

.. code:: html

    <div class='progress-wrapper'>
      <div id='progress-bar' class='progress-bar' style="background-color: #68a9ef; width: 0%;">&nbsp;</div>
    </div>
    <div id="progress-bar-message">Waiting for progress to start...</div>

Import the javascript file.
^^^^^^^^^^^^^^^^^^^^^^^^^^^

**display\_progress.html**

.. code:: html

    <script src="{% static 'celery_progress/celery_progress.js' %}"></script>

Initialize the progress bar:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: javascript

    // vanilla JS version
    document.addEventListener("DOMContentLoaded", function () {
      var progressUrl = "{% url 'celery_progress:task_status' task_id %}";
      CeleryProgressBar.initProgressBar(progressUrl);
    });

or

.. code:: javascript

    // JQuery
    $(function () {
      var progressUrl = "{% url 'celery_progress:task_status' task_id %}";
      CeleryProgressBar.initProgressBar(progressUrl)
    });

Displaying the result of a task
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you'd like you can also display the result of your task on the front
end.

To do that follow the steps below. Result handling can also be
customized.

Initialize the result block:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This is all that's needed to render the result on the page.

**display\_progress.html**

.. code:: html

    <div id="celery-result"></div>

But more likely you will want to customize how the result looks, which
can be done as below:

.. code:: javascript

    // JQuery
    var progressUrl = "{% url 'celery_progress:task_status' task_id %}";

    function customResult(resultElement, result) {
      $( resultElement ).append(
        $('<p>').text('Sum of all seconds is ' + result)
      );
    }

    $(function () {
      CeleryProgressBar.initProgressBar(progressUrl, {
        onResult: customResult,
      })
    });

Customization
-------------

The ``initProgressBar`` function takes an optional object of options.
The following options are supported:

+-----------+-----------------+------------------+
| Option    | What it does    | Default Value    |
+===========+=================+==================+
| pollInter | How frequently  | 500              |
| val       | to poll for     |                  |
|           | progress (in    |                  |
|           | milliseconds)   |                  |
+-----------+-----------------+------------------+
| progressB | Override the ID | 'progress-bar'   |
| arId      | used for the    |                  |
|           | progress bar    |                  |
+-----------+-----------------+------------------+
| progressB | Override the ID | 'progress-bar-me |
| arMessage | used for the    | ssage'           |
| Id        | progress bar    |                  |
|           | message         |                  |
+-----------+-----------------+------------------+
| progressB | Override the    | document.getElem |
| arElement | *element* used  | entById(progress |
|           | for the         | BarId)           |
|           | progress bar.   |                  |
|           | If specified,   |                  |
|           | progressBarId   |                  |
|           | will be         |                  |
|           | ignored.        |                  |
+-----------+-----------------+------------------+
| progressB | Override the    | document.getElem |
| arMessage | *element* used  | entById(progress |
| Element   | for the         | BarMessageId)    |
|           | progress bar    |                  |
|           | message. If     |                  |
|           | specified,      |                  |
|           | progressBarMess |                  |
|           | ageId           |                  |
|           | will be         |                  |
|           | ignored.        |                  |
+-----------+-----------------+------------------+
| resultEle | Override the ID | 'celery-result'  |
| mentId    | used for the    |                  |
|           | result          |                  |
+-----------+-----------------+------------------+
| resultEle | Override the    | document.getElem |
| ment      | *element* used  | entById(resultEl |
|           | for the result. | ementId)         |
|           | If specified,   |                  |
|           | resultElementId |                  |
|           | will be         |                  |
|           | ignored.        |                  |
+-----------+-----------------+------------------+
| onProgres | function to     | CeleryProgressBa |
| s         | call when       | r.onProgressDefa |
|           | progress is     | ult              |
|           | updated         |                  |
+-----------+-----------------+------------------+
| onSuccess | function to     | CeleryProgressBa |
|           | call when       | r.onSuccessDefau |
|           | progress        | lt               |
|           | successfully    |                  |
|           | completes       |                  |
+-----------+-----------------+------------------+
| onError   | function to     | CeleryProgressBa |
|           | call when       | r.onErrorDefault |
|           | progress        |                  |
|           | completes with  |                  |
|           | an error        |                  |
+-----------+-----------------+------------------+
| onResult  | function to     | CeleryProgressBa |
|           | call when       | r.onResultDefaul |
|           | returned non    | t                |
|           | empty result    |                  |
+-----------+-----------------+------------------+

WebSocket Support
=================

This library has experimental WebSocket support using `Django
Channels <https://channels.readthedocs.io/en/latest/>`__ courtesy of
[@EJH2](https://github.com/EJH2/).

A working example project leveraging WebSockets is `available
here <https://github.com/EJH2/cp_ws-example>`__.

To use WebSockets, install with
``pip install celery-progress[websockets,redis]`` or
``pip install celery-progress[websockets,rabbitmq]`` (depending on
broker dependencies).

See ``WebSocketProgressRecorder`` and ``websockets.js`` for details.


