from keeper_cnab240.segment_section import SegmentSection


class SegmentJ52(SegmentSection):
    def __init__(self, data=None):
        super().__init__('SegmentJ52', data, {
            'bank_code': {
                'type': 'int',
                'length': 3,
                'default': 341,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': True,
                'start': 0,
                'end': 3,
                'value': None,
            },
            'lot_code': {
                'type': 'int',
                'length': 4,
                'default': 0000,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': False,
                'start': 3,
                'end': 7,
                'value': None,
            },
            'register_type': {
                'type': 'int',
                'length': 1,
                'default': 3,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': False,
                'start': 7,
                'end': 8,
                'value': None,
            },
            'register_number': {
                'type': 'int',
                'length': 5,
                'default': 0,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': True,
                'start': 8,
                'end': 13,
                'value': None,
            },
            'segment': {
                'type': 'string',
                'length': 1,
                'default': 'J',
                'pad_content': ' ',
                'pad_direction': 'left',
                'required': False,
                'start': 13,
                'end': 14,
                'value': None,
            },
            'move_type': {
                'type': 'int',
                'length': 3,
                'default': 0,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': True,
                'start': 14,
                'end': 17,
                'value': None,
            },
            'register_code': {
                'type': 'int',
                'length': 2,
                'default': 52,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': False,
                'start': 17,
                'end': 19,
                'value': None,
            },
            'payer_document_type': {
                'type': 'int',
                'length': 1,
                'default': 2,  # 1 = CPF / 2 = CNPJ
                'pad_content': 0,
                'pad_direction': 'left',
                'required': False,
                'start': 19,
                'end': 20,
                'value': None,
            },
            'payer_document_number': {
                'type': 'int',
                'length': 15,
                'default': 0,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': False,
                'start': 20,
                'end': 35,
                'value': None,
            },
            'payer_name': {
                'type': 'string',
                'length': 40,
                'default': '',
                'pad_content': ' ',
                'pad_direction': 'left',
                'required': False,
                'start': 35,
                'end': 75,
                'value': None,
            },
            'recipient_document_type': {
                'type': 'int',
                'length': 1,
                'default': 2,  # 1 = CPF / 2 = CNPJ
                'pad_content': 0,
                'pad_direction': 'left',
                'required': True,
                'start': 75,
                'end': 76,
                'value': None,
            },
            'recipient_document_number': {
                'type': 'int',
                'length': 15,
                'default': '',
                'pad_content': 0,
                'pad_direction': 'left',
                'required': True,
                'start': 76,
                'end': 91,
                'value': None,
            },
            'recipient_name': {
                'type': 'string',
                'length': 40,
                'default': '',
                'pad_content': ' ',
                'pad_direction': 'left',
                'required': True,
                'start': 91,
                'end': 131,
                'value': None,
            },
            'payee_document_type': {
                'type': 'int',
                'length': 1,
                'default': 2,  # 1 = CPF / 2 = CNPJ
                'pad_content': 0,
                'pad_direction': 'left',
                'required': False,
                'start': 131,
                'end': 132,
                'value': None,
            },
            'payee_document_number': {
                'type': 'int',
                'length': 15,
                'default': 0,
                'pad_content': 0,
                'pad_direction': 'left',
                'required': False,
                'start': 132,
                'end': 147,
                'value': None,
            },
            'payee_name': {
                'type': 'string',
                'length': 40,
                'default': '',
                'pad_content': ' ',
                'pad_direction': 'left',
                'required': False,
                'start': 147,
                'end': 187,
                'value': None,
            },
            'whites': {
                'type': 'whites',
                'length': 53,
                'default': '',
                'pad_content': ' ',
                'pad_direction': 'right',
                'required': False,
                'start': 187,
                'end': 240,
                'value': None,
            },
        }, None, None)
