# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from iconrpcserver.protos import loopchain_pb2 as iconrpcserver_dot_protos_dot_loopchain__pb2


class PeerServiceStub(object):
  """Peer Outer Service for Outer Client or other Peer
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetStatus = channel.unary_unary(
        '/PeerService/GetStatus',
        request_serializer=iconrpcserver_dot_protos_dot_loopchain__pb2.StatusRequest.SerializeToString,
        response_deserializer=iconrpcserver_dot_protos_dot_loopchain__pb2.StatusReply.FromString,
        )


class PeerServiceServicer(object):
  """Peer Outer Service for Outer Client or other Peer
  """

  def GetStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PeerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetStatus,
          request_deserializer=iconrpcserver_dot_protos_dot_loopchain__pb2.StatusRequest.FromString,
          response_serializer=iconrpcserver_dot_protos_dot_loopchain__pb2.StatusReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PeerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
