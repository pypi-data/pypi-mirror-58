#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01-demo2.ipynb (unless otherwise specified).

__all__ = ['conversion_rate', 'lift', 'lift_sig', 'ab_test']

#Cell
'''Calculate conversion rates and related metrics.'''

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def conversion_rate(dataframe, column_names, converted = 'converted', id_name = 'user_id'):
    '''Calculate conversion rate.
    Cite https://www.datacamp.com/courses/analyzing-marketing-campaigns-with-pandas

    Parmaters
    ---------
    dataframe: pandas.DataFrame
    column_names: str
        The conlumn(s) chosen to partition groups to
        calculate conversion rate.
    converted: str
        The column with True and False to determine
        whether users are converted.
    id_name: str
        The column saved user_id.


    Returns
    -------
    conversion_rate: conversion rate'''
    # Total number of converted users
    column_conv = dataframe[dataframe[converted] == True] \
        .groupby(column_names)[id_name] \
        .nunique()

    # Total number users
    column_total = dataframe \
        .groupby(column_names)[id_name] \
        .nunique()

    # Conversion rate
    conversion_rate = column_conv/column_total

    # Fill missing values with 0
    conversion_rate = conversion_rate.fillna(0)

    return conversion_rate

#Cell
def lift(a,b, sig = 2):
    '''Calculate lift statistic for an AB test.
    Cite https://www.datacamp.com/courses/analyzing-marketing-campaigns-with-pandas

    Parmaters
    ---------
    a: float.
        control group.
    b: float.
        test group.
    sig: integer.
        default 2.

    Returns
    -------
    lift: lift statistic'''
    # Calcuate the mean of a and b
    a_mean = np.mean(a)
    b_mean = np.mean(b)

    # Calculate the lift using a_mean and b_mean
    lift = b_mean/a_mean - 1

    return str(round(lift*100, sig)) + '%'

#Cell
from scipy import stats

def lift_sig(a,b):
    '''Calculate lift statistical significance for an AB test.
    Cite https://www.datacamp.com/courses/analyzing-marketing-campaigns-with-pandas

    Parmaters
    ---------
    a: float.
        control group.
    b: float.
        test group.
    sig: integer.
        default 2.

    Returns
    -------
    lift: lift statistic'''

    output = stats.ttest_ind(a,b)
    t_value, p_value = output.statistic,output.pvalue
    print('The t value of  the two variables is %.3f  with p value %.3f' % (t_value, p_value))

    return (t_value, p_value)

#Cell
def ab_test(df, segment, id_name = 'user_id', test_column = 'variant', converted = 'converted'):
    '''Calculate lift statistic by segmentation.
    Cite https://www.datacamp.com/courses/analyzing-marketing-campaigns-with-pandas

    Parmaters
    ---------
    df: pandas.DataFrame.

    segment: str.
        group column.

    id_name: user_id

    test_column: str
        The column indentify test or ctrl groups.

    converted: logical.
        Whether converted or not.

    Returns
    -------
    lift: lift statistic'''
    # Build a for loop for each segment in marketing
    for subsegment in np.unique(marketing[segment].values):
        print('Group - %s: ' % subsegment)

        df1 = df[df[segment] == subsegment]

        df2 = df1.groupby([id_name, test_column])[converted].max()
        df2 = pd.DataFrame(df2.unstack(level=1))
        ctrl = df2.iloc[:,0].dropna()
        test = df2.iloc[:,1].dropna()

        # information
        print('lift:', lift(ctrl, test))
        lift_sig(ctrl, test)