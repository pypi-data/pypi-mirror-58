# L'image que nous allons utiliser
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
#variables:
#  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
#cache:
#  paths:
#    - .cache/pip
#    - venv/
#    - dist/

# TODO TODO TODO
# [ok] test avec tox
# [ok] artifacts only sur un tag
# [  ] tag + release
# [ko] pypri
# [  ] pypi
# [  ] variables : https://docs.gitlab.com/ee/ci/variables/

stages:
  - build
  - test
  - build_release
  - deploy_on_pypi
  
before_script:
  - python -V  # Print out python version for debugging
  - pip3 install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip3 install tox


build:
  stage: build
  script:
    - PKG_VERSION=$(python setup.py --version) # on récupère la version du package pour la mettre dans le nom des artefacts
    - echo $PKG_VERSION
    - python setup.py sdist bdist_wheel # ici on ne produit que le tar.gz
    - ls dist/*
    - cp README.md dist/
    #- mv dist/GLMF*tar.gz dist/GLMFPackage-$PKG_VERSION.tar.gz # il sera accessible via l'url https://gitlab.com/fritz-smh/glmf_library/-/jobs/artifacts/<branche ou tag>/raw/dist/GLMFPackage-<branche ou tag>.tar.gz?job=build
    # installation et test de la version
    - pip install dist/GLMFPackage-$PKG_VERSION.tar.gz    
    - glmfpackage-version  # juste pour tester la version
  artifacts:
    paths:
      - dist/*

test:
  stage: test
  script:
    - tox
    
# oui, on rebuild... pour la beauté du geste :). Mais uniquement pour les tags
release:
  stage: build_release
  only:
    - tags
  script: 
    - PKG_VERSION=$(python setup.py --version) # on récupère la version du package pour la mettre dans le nom des artefacts
    - echo $PKG_VERSION
    - python setup.py sdist bdist_wheel     # sdist : .tgz : source, bdist_wheel : binary en whl
    - ls dist/*
  artifacts:
    #name: "python-packages-$CI_COMMIT_TAG"
    paths:
      - dist/*
    expire_in: 10 yrs    # default : 30 days on gitlab.com
# download archive of artifacts from tag 0.0.2: https://gitlab.com/fritz-smh/glmf_library/-/jobs/artifacts/0.0.2/download?job=release
# download an artifact : https://gitlab.com/fritz-smh/glmf_library/-/jobs/artifacts/0.0.2/raw/dist/GLMFPackage-0.1-py3-none-any.whl?job=release

# Déploiement sur PyPi
# On utilise twine pour les raisons expliquées ici : https://pypi.org/project/twine/
pypi:
  stage: deploy_on_pypi
  only:
    - tags
  variables:
    TWINE_USERNAME: $PYPI_USERNAME
    TWINE_PASSWORD: $PYPI_PASSWORD
  script:
    - ls dist/*
    - env | grep TWINE
    - pip3 install twine
    - twine upload dist/*    

#run:
#  stage: build_release
#  script:
#    - python setup.py bdist_wheel
#    # an alternative approach is to install and run:
#    - pip install dist/*
#    # run the command here
#  artifacts:
#    paths:
#      - dist/*.whl
