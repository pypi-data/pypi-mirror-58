#!/usr/bin/env python

"""Tests for `coinaddress` package."""
import pytest

from click.testing import CliRunner

from coinaddress.networks.base import (
    BaseNetwork,
)

from coinaddress import cli
from typing import List, Optional

from coinaddress.networks import (
    Bitcoin,
    BitcoinCash,
    Ethereum,
    Litecoin,
    Ripple,
)


def test_command_line_interface():
    """Test the CLI."""
    runner = CliRunner()
    result = runner.invoke(
        cli.main,
        args='bitcoin --xpub xpub6DS28deyJ4Ytx1MNsLY9ehvNo7XPRA8keE11XQJ7dJqNfE'
             '8zLcbyMq1CVL4iq2aDPMPzZqr35JkQYKHHUvzKSPSBsqrBAXP28DwyePz7dh8 0/0'
    )
    assert result.exit_code == 0
    assert result.output == '13V8eaCtzrrkSeJRDgKL5MC1cLSTvfFryg\n'


class SampleAddress:
    network: BaseNetwork
    xpub: str
    addresses: List[str]
    parent: Optional[int] = None

    def __init__(self, network: BaseNetwork, xpub: str, addresses: List[str],
                 parent: Optional[int] = None):
        self.network = network
        self.xpub = xpub
        self.addresses = addresses
        self.parent = parent


@pytest.mark.parametrize("sample", [
    SampleAddress(
        Bitcoin(),
        'xpub6DS28deyJ4Ytx1MNsLY9ehvNo7XPRA8keE11XQJ7dJqNfE8zLcbyMq1CVL4iq2aDP'
        'MPzZqr35JkQYKHHUvzKSPSBsqrBAXP28DwyePz7dh8',
        [
            "13V8eaCtzrrkSeJRDgKL5MC1cLSTvfFryg",
            "196abnx7BmQaFTdehipiMBUD9JMjacF5ES",
            "13CCYbDjnhF5r7HcZbhtc1fg3UEkfs2DLW",
        ],
        0
    ),
    SampleAddress(
        BitcoinCash(),
        'xpub6D58nasWP9w2HtXY9Ln93GxuuJ943mPaJ6NoFgdsnGgrL9kt2ai8jgqfiAvn9ZLvQi'
        'h8ogAskCHQP4cagBrS3AFMAgT91Dp3pQ9NFRSiwhD',
        [
            "bitcoincash:qzgs5gl6z7xxy39ccaz5kfrd8uwt7mzuhgku2maenm",
            "bitcoincash:qq3m4qn0tyhwqk5a3x5sxmxepnd72tjl7u336cp5ml",
            "bitcoincash:qpsq50xx7pu85s4xq6jy8uu7rg0l2m3dzuv2r583d9",
        ],
        0
    ),
    SampleAddress(
        Ethereum(),
        'xpub6CZwSymBudZBR5GbJBcTVEv8KnsK15xLRj5akGVGFWyP8nDcEpkaJJBLNdKTE4WTe8'
        'aSNjYhKv9CKufsHy1FjKuoyaRfRPR8YJ7LRGWLNm3',
        [
            "0x97aEC6A7bA912E9A4139F08a282c2e38F68F88e5",
            "0xD68543Fd0B6ACDef1aF6C86256D61F6Db9168561",
            "0xd284Eb1d5246f38E0aCedf5a47e8D98F80bdcCb5",
        ],
        0
    ),
    SampleAddress(
        Litecoin(),
        'Ltub2ZurGSSA4Yomc6uuuRjJfrR9Bb6YLGmCUgji6qbwgisBgTCkaT9rknHZR8ipso8XSe'
        'xB6F6ugQF6at1wmeqyFiAATtgMH2Z1GbLQaSFixBL',
        [
            "LTqXoPy3Bc5ErEUtFm5XodQPYr3e38kHWx",
            "LL6nvA8Q4oRno8VHBpW919WxijrmpvmA9V",
            "LPv4xPiYZxPu4yK6GcpGdyaGTEoxJvAwMw",
        ],
        0
    ),
    SampleAddress(
        Ripple(),
        'xpub6CG8aavYBrteq1p7ckBC4shuHJBCCbJLATbtMJFZn3wKRYNwQfabgVFh8D8efR6tVG'
        'giA2Wg5iApXreyotrwDoYcW4vChWzD8aNjfj6i6FS',
        [
            "r185nYoiaMiGPQgvdyWAzS9patKMQV7s5",
            "rakrahnojYuX5Sv1f3dcC8ezhRqG5A8XNn",
            "rBVTeeT3BPsg3AgTKxZEonmpno1ztUmMf5",
        ],
        0
    )
])
def test_generate_address(sample):
    for i, sample_address in enumerate(sample.addresses):
        path = f'{i}'
        if sample.parent is not None:
            path = f'{sample.parent}/{path}'
        address = sample.network.get_address(
            sample.xpub, path=path
        )
        assert address == sample_address, \
            "Address %s generated by %s didn't match sample %s " \
            "(%s child, %s parent)" % (
                address, sample.network, sample_address, i, sample.parent
            )
