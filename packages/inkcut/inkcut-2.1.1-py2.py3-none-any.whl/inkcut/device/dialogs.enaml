"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Jul 14, 2015

@author: jrm
"""
from enaml.core.api import Conditional, Include, Looper
from enaml.layout.api import align, hbox, spacer
from enaml.stdlib.mapped_view import MappedView
from enaml.stdlib.task_dialog import (
    TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet
)
from enaml.widgets.api import (
    CheckBox, Container, Dialog, Field, Label, PushButton, Form, Notebook,
    Page, ObjectCombo
)
from .plugin import Device, DeviceConfig
from .view import ConfigView, DeviceConfigView
from inkcut.core.api import Model
from inkcut.core.utils import tr


enamldef DeviceDialog(Dialog): dialog:
    title = 'Device Setup'
    initial_size = (640, 320)
    attr plugin
    attr device: Device << plugin.device
    attr driver << device.declaration
    attr connection << device.connection
    attr protocol << connection.protocol
    Conditional:
        # Only use this if not using the system theme
        condition << not (plugin.workbench.get_plugin('inkcut.ui').dock_style == 'system')
        TaskDialogStyleSheet:
                pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = tr("device", "Configure device")
        TaskDialogContentArea:
            Notebook: notebook:
                tab_style = 'document'
                Page:
                    title = tr("device", "General")
                    closable = False
                    Container:
                        padding = 0
                        Form:
                            Label:
                                text = tr("device", "Driver")
                            ObjectCombo:
                                items << plugin.drivers
                                attr selected_driver << [d for d in plugin.drivers if d.id==driver.id]
                                to_string = lambda d: d.id
                                selected << selected_driver[0] if selected_driver else None
                                selected ::
                                    dialog.device = plugin.get_device_from_driver(change['value'])
                            Label:
                                text = tr("device", "Manufacturer")
                            Field:
                                enabled << cb.checked
                                text := driver.manufacturer
                            Label:
                                text = tr("device", "Model")
                            Field:
                                enabled << cb.checked
                                text := driver.model
                            Label:
                                text = tr("device", "Width")
                            Field:
                                enabled << cb.checked
                                text := driver.width
                            Label:
                                text = tr("device", "Length")
                            Field:
                                enabled << cb.checked
                                text := driver.length
                            CheckBox: cb:
                                text = tr("device", "Customize")

                    #Include:
                    #    objects << device.config
                Page:
                    title = tr("device", "Device")
                    closable = False
                    MappedView:
                        model << device.config if device else Model()
                        typemap << {
                            type(device.config): device.declaration.config_view(),
                            Model: ConfigView
                        } if device else {Model:ConfigView}
                Page:
                    title = tr("device", "Connection")
                    closable = False
                    Container:
                        padding = 0
                        Form:
                            Label:
                                text = tr("device", "Type")
                            ObjectCombo:
                                items << sorted(
                                    device.transports if device and device.transports else plugin.transports,
                                    key=lambda t: t.name)
                                to_string = lambda t: t.name
                                #selected << (connection.declaration
                                #             if connection  else None)
                                selected << [t for t in plugin.transports
                                             if t.id==connection.declaration.id][0] if connection else None
                                selected ::
                                    declaration = change['value']
                                    if declaration is not None:
                                        protocol = None
                                        if device.connection and device.connection.protocol:
                                            # Copy from old connection
                                            protocol = device.connection.protocol
                                        device.connection = declaration.factory(driver, declaration, protocol)
                            # Label:
                            #     text = ""
                            # PushButton:
                            #     text = "Test"
                            #     clicked :: device.test()

                        #MappedView:
                        #    model << device.connection.config
                        MappedView:
                            model << connection.config if connection else Model()
                            typemap << {
                                type(connection.config): connection.declaration.config_view(),
                                Model: ConfigView
                            } if connection else {Model: ConfigView}

                Page:
                    title = tr("device", "Protocol")
                    closable = False
                    Container:
                        padding = 0
                        Form:
                            Label:
                                text = tr("device", "Language")
                            ObjectCombo:
                                items << [p for p in plugin.protocols
                                            if p.id in device.declaration.protocols
                                          ] if device and device.declaration.protocols else plugin.protocols
                                to_string = lambda t: t.name
                                #selected << (protocol.declaration
                                #             if protocol else None)
                                selected << [p for p in plugin.protocols
                                             if p.id==protocol.declaration.id][0] if protocol else None
                                selected ::
                                    declaration = change['value']
                                    if declaration is not None:
                                        device.connection.protocol = declaration.factory(driver, declaration)
                        #MappedView:
                        #    model << device.connection.config
                        MappedView:
                            model << protocol.config if protocol else Model()
                            typemap << {
                                type(protocol.config): protocol.declaration.config_view(),
                                Model: ConfigView
                            } if protocol else {Model: ConfigView}
                Page:
                    title = tr("device", "Filters")
                    closable = False
                    Container:
                        padding = 0
                        Notebook:
                            tab_style = 'document'
                            tab_position = 'left'
                            Looper:
                                iterable << plugin.filters
                                Page:
                                    title = loop_item.name
                                    closable = False
                                    attr matching_filters << [f for f in device.filters if f.declaration and f.declaration.id == loop_item.id]
                                    attr current_filter << matching_filters[0] if matching_filters else None
                                    Container:
                                        padding = 0
                                        Form:
                                            CheckBox:
                                                text = 'Enabled'
                                                checked << bool(matching_filters)
                                                checked ::
                                                    if change['value']:
                                                        filters = device.filters[:]
                                                        f = loop_item.factory()
                                                        f.declaration = loop_item
                                                        filters.append(f)
                                                        device.filters = filters
                                                    else:
                                                        device.filters = [f for f in device.filters if f.declaration.id != loop_item.id]
                                        Conditional:
                                            condition << bool(current_filter and current_filter.config)
                                            MappedView:
                                                model << current_filter.config
                                                typemap << {type(current_filter.config): loop_item.config_view()}

        TaskDialogCommandArea:
            constraints = [
                hbox(spacer, btn_yes, btn_no),
                align('v_center', btn_yes, btn_no),
            ]
            PushButton: btn_no:
                text = tr("device", "Cancel")
                clicked :: dialog.close()
            PushButton: btn_yes:
                text = tr("device", "OK")
                clicked ::
                    dev = dialog.device or plugin.device
                    if not dev.connection:
                        dev.connection = dev._default_connection()
                    if not dev.connection.protocol:
                        dev.connection.protocol = dev._default_protocol()
                    plugin.device = dev
                    plugin.save()

                    #: Hackk...
                    job_plugin = plugin.workbench.get_plugin('inkcut.job')
                    job_plugin.refresh_preview()

                    dialog.close()
