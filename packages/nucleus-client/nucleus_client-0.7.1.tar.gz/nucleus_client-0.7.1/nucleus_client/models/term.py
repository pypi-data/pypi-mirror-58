# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Term(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'aliases': 'str',
        'client_id': 'str',
        'definition': 'str',
        'dt_u': 'datetime',
        'term': 'str'
    }

    attribute_map = {
        'id': '_id',
        'aliases': 'aliases',
        'client_id': 'client_id',
        'definition': 'definition',
        'dt_u': 'dt_u',
        'term': 'term'
    }

    def __init__(self, id=None, aliases=None, client_id=None, definition=None, dt_u=None, term=None):  # noqa: E501
        """Term - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._aliases = None
        self._client_id = None
        self._definition = None
        self._dt_u = None
        self._term = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if aliases is not None:
            self.aliases = aliases
        if client_id is not None:
            self.client_id = client_id
        self.definition = definition
        if dt_u is not None:
            self.dt_u = dt_u
        self.term = term

    @property
    def id(self):
        """Gets the id of this Term.  # noqa: E501


        :return: The id of this Term.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Term.


        :param id: The id of this Term.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def aliases(self):
        """Gets the aliases of this Term.  # noqa: E501


        :return: The aliases of this Term.  # noqa: E501
        :rtype: str
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Term.


        :param aliases: The aliases of this Term.  # noqa: E501
        :type: str
        """

        self._aliases = aliases

    @property
    def client_id(self):
        """Gets the client_id of this Term.  # noqa: E501


        :return: The client_id of this Term.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Term.


        :param client_id: The client_id of this Term.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def definition(self):
        """Gets the definition of this Term.  # noqa: E501


        :return: The definition of this Term.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this Term.


        :param definition: The definition of this Term.  # noqa: E501
        :type: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def dt_u(self):
        """Gets the dt_u of this Term.  # noqa: E501


        :return: The dt_u of this Term.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Term.


        :param dt_u: The dt_u of this Term.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def term(self):
        """Gets the term of this Term.  # noqa: E501


        :return: The term of this Term.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Term.


        :param term: The term of this Term.  # noqa: E501
        :type: str
        """
        if term is None:
            raise ValueError("Invalid value for `term`, must not be `None`")  # noqa: E501

        self._term = term

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Term):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
