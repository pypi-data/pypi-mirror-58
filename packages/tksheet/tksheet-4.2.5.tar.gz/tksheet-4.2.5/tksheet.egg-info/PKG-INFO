Metadata-Version: 2.1
Name: tksheet
Version: 4.2.5
Summary: Tkinter table / sheet widget
Home-page: https://github.com/ragardner/tksheet
Author: ragardner
Author-email: ragardner@protonmail.com
License: MIT
Download-URL: https://github.com/ragardner/tksheet/archive/4.2.5.tar.gz
Description: # tksheet [![PyPI version shields.io](https://img.shields.io/pypi/v/tksheet.svg)](https://pypi.python.org/pypi/tksheet/) [![License: MIT](https://img.shields.io/badge/License-MIT%20-blue.svg)](https://github.com/ragardner/tksheet/blob/master/LICENSE.txt) [![GitHub Release Date](https://img.shields.io/github/release-date-pre/ragardner/tksheet.svg)](https://github.com/ragardner/tksheet/releases)
        
        Python 3.6+ tkinter table widget for displaying tabular data
        
        ```
        pip install tksheet
        ```
        
        ### Features
         - Display and modify tabular data
         - Stores its display data as a Python list of lists, sublists being rows
         - Runs smoothly even with millions of rows/columns
         - Edit cells directly
         - Drag and drop columns and rows
         - Multiple line headers and rows
         - Expand row heights and column widths
         - Change fonts and font size
         - Change any colors in the sheet
         - Left or Centre text alignment
         - Copes with cell elements not being strings
         
        ### [Version release notes](https://github.com/ragardner/tksheet/blob/master/RELEASE_NOTES.md)
        
        Work on this repository is ongoing, improvements in usability, functionality and finally documentation
        
        Planned future changes:
         - Ctrl + click selection
         - Editing row index/header
         - Display subset of rows
         - More builtin functionality on right click
         - Better functions to access and manipulate table data
        
        ### Basic Demo:
        
        ```python
        from tksheet import Sheet
        import tkinter as tk
        
        
        class demo(tk.Tk):
            def __init__(self):
                tk.Tk.__init__(self)
                self.grid_columnconfigure(0, weight = 1)
                self.grid_rowconfigure(0, weight = 1)
                self.sheet_demo = Sheet(self,
                                        show_selected_cells_border = True,
                                        width = 1000,
                                        height = 700,
                                        align = "w",
                                        header_align = "center",
                                        row_index_align = "center",
                                        row_index_width = 50,
                                        total_rows = 200,
                                        total_columns = 30)
                self.sheet_demo.enable_bindings(("single",
                                                 "drag_select",
                                                 "column_drag_and_drop",
                                                 "row_drag_and_drop",
                                                 "column_select",
                                                 "row_select",
                                                 "column_width_resize",
                                                 "double_click_column_resize",
                                                 "row_width_resize",
                                                 "column_height_resize",
                                                 "arrowkeys",
                                                 "row_height_resize",
                                                 "double_click_row_resize",
                                                 "copy",
                                                 "cut",
                                                 "paste",
                                                 "delete",
                                                 "undo",
                                                 "edit_cell",
                                                 "rc_insert_column",
                                                 "rc_delete_column",
                                                 "rc_insert_row",
                                                 "rc_delete_row"))
                self.sheet_demo.grid(row = 0, column = 0, sticky = "nswe")
                
        
                """_________________________ EXAMPLES _________________________ """
                """_____________________________________________________________"""
        
                # __________ CHANGING THEME __________
        
                #self.sheet_demo.change_theme("dark")
        
                # __________ HIGHLIGHT / DEHIGHLIGHT CELLS __________
        
                self.sheet_demo.highlight_cells(row = 5, column = 0, bg = "#ed4337", fg = "white")
                self.sheet_demo.highlight_cells(row = 5, column = 5, bg = "#ed4337", fg = "white")
                self.sheet_demo.highlight_cells(row = 5, column = 1, bg = "#ed4337", fg = "white")
                self.sheet_demo.highlight_cells(row = 5, bg = "#ed4337", fg = "white", canvas = "row_index")
                self.sheet_demo.highlight_cells(column = 0, bg = "#ed4337", fg = "white", canvas = "header")
        
                # __________ SETTING OR RESETTING TABLE DATA __________
                
                self.data = [[f"Row {r} Column {c}" for c in range(30)] for r in range(200)]
                self.sheet_demo.data_reference(self.data)
        
                # __________ DISPLAY SUBSET OF COLUMNS __________
        
                #self.sheet_demo.display_subset_of_columns(indexes = [3, 7, 9, 0], enable = True)
        
                # __________ SETTING HEADERS __________
        
                #self.headers = [f"Header {c}" for c in range(30)]
                #self.sheet_demo.headers(self.headers)
        
                # __________ INSERTING A ROW __________
        
                #self.sheet_demo.insert_row(row = (f"my new row here {c}" for c in range(100)), idx = 0) # a filled row at the start
                #self.sheet_demo.insert_row() # an empty row at the end
        
                # __________ INSERTING A COLUMN __________
        
                #self.sheet_demo.insert_column(column = (f"my new col here {r}" for r in range(5000)), idx = 0) # a filled column at the start
                #self.sheet_demo.insert_column() # an empty column at the end
        
                # __________ SETTING A COLUMNS DATA __________
        
                # any iterable works
                #self.sheet_demo.set_column_data(0, values = (0 for i in range(220)))
        
                # __________ SETTING A ROWS DATA __________
        
                # any iterable works
                #self.sheet_demo.set_row_data(0, values = (0 for i in range(35)))
        
                # __________ SETTING A CELLS DATA __________
        
                #self.sheet_demo.set_cell_data(1, 2, "NEW VALUE")
        
                # __________ HIDING THE ROW INDEX AND HEADERS __________
        
                #self.sheet_demo.hide("row_index")
                #self.sheet_demo.hide("top_left")
                #self.sheet_demo.hide("header")
        
                # __________ BINDING A FUNCTION TO USER SELECTS CELL __________
        
                self.sheet_demo.extra_bindings([
                                                ("cell_select", self.cell_select),
                                                ("shift_cell_select", self.shift_select_cells),
                                                ("drag_select_cells", self.drag_select_cells),
                                                ("ctrl_a", self.ctrl_a),
                                                ("row_select", self.row_select),
                                                ("shift_row_select", self.shift_select_rows),
                                                ("drag_select_rows", self.drag_select_rows),
                                                ("column_select", self.column_select),
                                                ("shift_column_select", self.shift_select_columns),
                                                ("drag_select_columns", self.drag_select_columns),
                                                ]
                                               )
                
            def cell_select(self, response):
                print (response)
        
            def shift_select_cells(self, response):
                print (response)
        
            def drag_select_cells(self, response):
                pass
                #print (response)
        
            def ctrl_a(self, response):
                print (response)
        
            def row_select(self, response):
                print (response)
        
            def shift_select_rows(self, response):
                print (response)
        
            def drag_select_rows(self, response):
                pass
                #print (response)
                
            def column_select(self, response):
                print (response)
        
            def shift_select_columns(self, response):
                print (response)
        
            def drag_select_columns(self, response):
                pass
                #print (response)
                
        app = demo()
        app.mainloop()
        
        ```
        
        ----
        
        ### Light Theme
        
        ![alt text](https://i.imgur.com/yoa6K6T.jpg)
        
        
        ### Dark Theme
        
        ![alt text](https://i.imgur.com/JrZD5Lf.jpg)
        
        ----
        
        
Keywords: tkinter,table,widget
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Description-Content-Type: text/markdown
