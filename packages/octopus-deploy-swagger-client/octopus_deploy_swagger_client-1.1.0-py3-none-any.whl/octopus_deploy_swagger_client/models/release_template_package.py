# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReleaseTemplatePackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_name': 'str',
        'action_name': 'str',
        'nu_get_package_id': 'str',
        'package_id': 'str',
        'package_reference_name': 'str',
        'nu_get_feed_id': 'str',
        'feed_id': 'str',
        'nu_get_feed_name': 'str',
        'feed_name': 'str',
        'version_selected_last_release': 'str',
        'project_name': 'str',
        'is_resolvable': 'bool'
    }

    attribute_map = {
        'step_name': 'StepName',
        'action_name': 'ActionName',
        'nu_get_package_id': 'NuGetPackageId',
        'package_id': 'PackageId',
        'package_reference_name': 'PackageReferenceName',
        'nu_get_feed_id': 'NuGetFeedId',
        'feed_id': 'FeedId',
        'nu_get_feed_name': 'NuGetFeedName',
        'feed_name': 'FeedName',
        'version_selected_last_release': 'VersionSelectedLastRelease',
        'project_name': 'ProjectName',
        'is_resolvable': 'IsResolvable'
    }

    def __init__(self, step_name=None, action_name=None, nu_get_package_id=None, package_id=None, package_reference_name=None, nu_get_feed_id=None, feed_id=None, nu_get_feed_name=None, feed_name=None, version_selected_last_release=None, project_name=None, is_resolvable=None):  # noqa: E501
        """ReleaseTemplatePackage - a model defined in Swagger"""  # noqa: E501

        self._step_name = None
        self._action_name = None
        self._nu_get_package_id = None
        self._package_id = None
        self._package_reference_name = None
        self._nu_get_feed_id = None
        self._feed_id = None
        self._nu_get_feed_name = None
        self._feed_name = None
        self._version_selected_last_release = None
        self._project_name = None
        self._is_resolvable = None
        self.discriminator = None

        if step_name is not None:
            self.step_name = step_name
        if action_name is not None:
            self.action_name = action_name
        if nu_get_package_id is not None:
            self.nu_get_package_id = nu_get_package_id
        if package_id is not None:
            self.package_id = package_id
        if package_reference_name is not None:
            self.package_reference_name = package_reference_name
        if nu_get_feed_id is not None:
            self.nu_get_feed_id = nu_get_feed_id
        if feed_id is not None:
            self.feed_id = feed_id
        if nu_get_feed_name is not None:
            self.nu_get_feed_name = nu_get_feed_name
        if feed_name is not None:
            self.feed_name = feed_name
        if version_selected_last_release is not None:
            self.version_selected_last_release = version_selected_last_release
        if project_name is not None:
            self.project_name = project_name
        if is_resolvable is not None:
            self.is_resolvable = is_resolvable

    @property
    def step_name(self):
        """Gets the step_name of this ReleaseTemplatePackage.  # noqa: E501


        :return: The step_name of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this ReleaseTemplatePackage.


        :param step_name: The step_name of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._step_name = step_name

    @property
    def action_name(self):
        """Gets the action_name of this ReleaseTemplatePackage.  # noqa: E501


        :return: The action_name of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this ReleaseTemplatePackage.


        :param action_name: The action_name of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._action_name = action_name

    @property
    def nu_get_package_id(self):
        """Gets the nu_get_package_id of this ReleaseTemplatePackage.  # noqa: E501


        :return: The nu_get_package_id of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._nu_get_package_id

    @nu_get_package_id.setter
    def nu_get_package_id(self, nu_get_package_id):
        """Sets the nu_get_package_id of this ReleaseTemplatePackage.


        :param nu_get_package_id: The nu_get_package_id of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._nu_get_package_id = nu_get_package_id

    @property
    def package_id(self):
        """Gets the package_id of this ReleaseTemplatePackage.  # noqa: E501


        :return: The package_id of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this ReleaseTemplatePackage.


        :param package_id: The package_id of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._package_id = package_id

    @property
    def package_reference_name(self):
        """Gets the package_reference_name of this ReleaseTemplatePackage.  # noqa: E501


        :return: The package_reference_name of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._package_reference_name

    @package_reference_name.setter
    def package_reference_name(self, package_reference_name):
        """Sets the package_reference_name of this ReleaseTemplatePackage.


        :param package_reference_name: The package_reference_name of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._package_reference_name = package_reference_name

    @property
    def nu_get_feed_id(self):
        """Gets the nu_get_feed_id of this ReleaseTemplatePackage.  # noqa: E501


        :return: The nu_get_feed_id of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._nu_get_feed_id

    @nu_get_feed_id.setter
    def nu_get_feed_id(self, nu_get_feed_id):
        """Sets the nu_get_feed_id of this ReleaseTemplatePackage.


        :param nu_get_feed_id: The nu_get_feed_id of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._nu_get_feed_id = nu_get_feed_id

    @property
    def feed_id(self):
        """Gets the feed_id of this ReleaseTemplatePackage.  # noqa: E501


        :return: The feed_id of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this ReleaseTemplatePackage.


        :param feed_id: The feed_id of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._feed_id = feed_id

    @property
    def nu_get_feed_name(self):
        """Gets the nu_get_feed_name of this ReleaseTemplatePackage.  # noqa: E501


        :return: The nu_get_feed_name of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._nu_get_feed_name

    @nu_get_feed_name.setter
    def nu_get_feed_name(self, nu_get_feed_name):
        """Sets the nu_get_feed_name of this ReleaseTemplatePackage.


        :param nu_get_feed_name: The nu_get_feed_name of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._nu_get_feed_name = nu_get_feed_name

    @property
    def feed_name(self):
        """Gets the feed_name of this ReleaseTemplatePackage.  # noqa: E501


        :return: The feed_name of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._feed_name

    @feed_name.setter
    def feed_name(self, feed_name):
        """Sets the feed_name of this ReleaseTemplatePackage.


        :param feed_name: The feed_name of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._feed_name = feed_name

    @property
    def version_selected_last_release(self):
        """Gets the version_selected_last_release of this ReleaseTemplatePackage.  # noqa: E501


        :return: The version_selected_last_release of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._version_selected_last_release

    @version_selected_last_release.setter
    def version_selected_last_release(self, version_selected_last_release):
        """Sets the version_selected_last_release of this ReleaseTemplatePackage.


        :param version_selected_last_release: The version_selected_last_release of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._version_selected_last_release = version_selected_last_release

    @property
    def project_name(self):
        """Gets the project_name of this ReleaseTemplatePackage.  # noqa: E501


        :return: The project_name of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ReleaseTemplatePackage.


        :param project_name: The project_name of this ReleaseTemplatePackage.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def is_resolvable(self):
        """Gets the is_resolvable of this ReleaseTemplatePackage.  # noqa: E501


        :return: The is_resolvable of this ReleaseTemplatePackage.  # noqa: E501
        :rtype: bool
        """
        return self._is_resolvable

    @is_resolvable.setter
    def is_resolvable(self, is_resolvable):
        """Sets the is_resolvable of this ReleaseTemplatePackage.


        :param is_resolvable: The is_resolvable of this ReleaseTemplatePackage.  # noqa: E501
        :type: bool
        """

        self._is_resolvable = is_resolvable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseTemplatePackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseTemplatePackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
