# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'environment_ids': 'list[str]',
        'tenanted_deployment_participation': 'str',
        'tenant_ids': 'list[str]',
        'tenant_tags': 'list[str]',
        'account_type': 'str',
        'space_id': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'environment_ids': 'EnvironmentIds',
        'tenanted_deployment_participation': 'TenantedDeploymentParticipation',
        'tenant_ids': 'TenantIds',
        'tenant_tags': 'TenantTags',
        'account_type': 'AccountType',
        'space_id': 'SpaceId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, name=None, description=None, environment_ids=None, tenanted_deployment_participation=None, tenant_ids=None, tenant_tags=None, account_type=None, space_id=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """AccountResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._environment_ids = None
        self._tenanted_deployment_participation = None
        self._tenant_ids = None
        self._tenant_tags = None
        self._account_type = None
        self._space_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if environment_ids is not None:
            self.environment_ids = environment_ids
        if tenanted_deployment_participation is not None:
            self.tenanted_deployment_participation = tenanted_deployment_participation
        if tenant_ids is not None:
            self.tenant_ids = tenant_ids
        if tenant_tags is not None:
            self.tenant_tags = tenant_tags
        if account_type is not None:
            self.account_type = account_type
        if space_id is not None:
            self.space_id = space_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this AccountResource.  # noqa: E501


        :return: The id of this AccountResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountResource.


        :param id: The id of this AccountResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountResource.  # noqa: E501


        :return: The name of this AccountResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountResource.


        :param name: The name of this AccountResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AccountResource.  # noqa: E501


        :return: The description of this AccountResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountResource.


        :param description: The description of this AccountResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def environment_ids(self):
        """Gets the environment_ids of this AccountResource.  # noqa: E501


        :return: The environment_ids of this AccountResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment_ids

    @environment_ids.setter
    def environment_ids(self, environment_ids):
        """Sets the environment_ids of this AccountResource.


        :param environment_ids: The environment_ids of this AccountResource.  # noqa: E501
        :type: list[str]
        """

        self._environment_ids = environment_ids

    @property
    def tenanted_deployment_participation(self):
        """Gets the tenanted_deployment_participation of this AccountResource.  # noqa: E501


        :return: The tenanted_deployment_participation of this AccountResource.  # noqa: E501
        :rtype: str
        """
        return self._tenanted_deployment_participation

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, tenanted_deployment_participation):
        """Sets the tenanted_deployment_participation of this AccountResource.


        :param tenanted_deployment_participation: The tenanted_deployment_participation of this AccountResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["Untenanted", "TenantedOrUntenanted", "Tenanted"]  # noqa: E501
        if tenanted_deployment_participation not in allowed_values:
            raise ValueError(
                "Invalid value for `tenanted_deployment_participation` ({0}), must be one of {1}"  # noqa: E501
                .format(tenanted_deployment_participation, allowed_values)
            )

        self._tenanted_deployment_participation = tenanted_deployment_participation

    @property
    def tenant_ids(self):
        """Gets the tenant_ids of this AccountResource.  # noqa: E501


        :return: The tenant_ids of this AccountResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenant_ids

    @tenant_ids.setter
    def tenant_ids(self, tenant_ids):
        """Sets the tenant_ids of this AccountResource.


        :param tenant_ids: The tenant_ids of this AccountResource.  # noqa: E501
        :type: list[str]
        """

        self._tenant_ids = tenant_ids

    @property
    def tenant_tags(self):
        """Gets the tenant_tags of this AccountResource.  # noqa: E501


        :return: The tenant_tags of this AccountResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenant_tags

    @tenant_tags.setter
    def tenant_tags(self, tenant_tags):
        """Sets the tenant_tags of this AccountResource.


        :param tenant_tags: The tenant_tags of this AccountResource.  # noqa: E501
        :type: list[str]
        """

        self._tenant_tags = tenant_tags

    @property
    def account_type(self):
        """Gets the account_type of this AccountResource.  # noqa: E501


        :return: The account_type of this AccountResource.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AccountResource.


        :param account_type: The account_type of this AccountResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "UsernamePassword", "SshKeyPair", "Token", "AzureSubscription", "AzureServicePrincipal", "AmazonWebServicesAccount", "AmazonWebServicesRoleAccount"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def space_id(self):
        """Gets the space_id of this AccountResource.  # noqa: E501


        :return: The space_id of this AccountResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this AccountResource.


        :param space_id: The space_id of this AccountResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this AccountResource.  # noqa: E501


        :return: The last_modified_on of this AccountResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this AccountResource.


        :param last_modified_on: The last_modified_on of this AccountResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this AccountResource.  # noqa: E501


        :return: The last_modified_by of this AccountResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this AccountResource.


        :param last_modified_by: The last_modified_by of this AccountResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this AccountResource.  # noqa: E501


        :return: The links of this AccountResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountResource.


        :param links: The links of this AccountResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
