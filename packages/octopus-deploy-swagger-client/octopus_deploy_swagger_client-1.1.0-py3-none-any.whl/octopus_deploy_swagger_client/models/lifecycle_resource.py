# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from octopus_deploy_swagger_client.models.phase_resource import PhaseResource  # noqa: F401,E501
from octopus_deploy_swagger_client.models.retention_period import RetentionPeriod  # noqa: F401,E501


class LifecycleResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'space_id': 'str',
        'phases': 'list[PhaseResource]',
        'name': 'str',
        'release_retention_policy': 'RetentionPeriod',
        'tentacle_retention_policy': 'RetentionPeriod',
        'description': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'space_id': 'SpaceId',
        'phases': 'Phases',
        'name': 'Name',
        'release_retention_policy': 'ReleaseRetentionPolicy',
        'tentacle_retention_policy': 'TentacleRetentionPolicy',
        'description': 'Description',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, space_id=None, phases=None, name=None, release_retention_policy=None, tentacle_retention_policy=None, description=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """LifecycleResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._space_id = None
        self._phases = None
        self._name = None
        self._release_retention_policy = None
        self._tentacle_retention_policy = None
        self._description = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if space_id is not None:
            self.space_id = space_id
        if phases is not None:
            self.phases = phases
        if name is not None:
            self.name = name
        if release_retention_policy is not None:
            self.release_retention_policy = release_retention_policy
        if tentacle_retention_policy is not None:
            self.tentacle_retention_policy = tentacle_retention_policy
        if description is not None:
            self.description = description
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this LifecycleResource.  # noqa: E501


        :return: The id of this LifecycleResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LifecycleResource.


        :param id: The id of this LifecycleResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def space_id(self):
        """Gets the space_id of this LifecycleResource.  # noqa: E501


        :return: The space_id of this LifecycleResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this LifecycleResource.


        :param space_id: The space_id of this LifecycleResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def phases(self):
        """Gets the phases of this LifecycleResource.  # noqa: E501


        :return: The phases of this LifecycleResource.  # noqa: E501
        :rtype: list[PhaseResource]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this LifecycleResource.


        :param phases: The phases of this LifecycleResource.  # noqa: E501
        :type: list[PhaseResource]
        """

        self._phases = phases

    @property
    def name(self):
        """Gets the name of this LifecycleResource.  # noqa: E501


        :return: The name of this LifecycleResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LifecycleResource.


        :param name: The name of this LifecycleResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def release_retention_policy(self):
        """Gets the release_retention_policy of this LifecycleResource.  # noqa: E501


        :return: The release_retention_policy of this LifecycleResource.  # noqa: E501
        :rtype: RetentionPeriod
        """
        return self._release_retention_policy

    @release_retention_policy.setter
    def release_retention_policy(self, release_retention_policy):
        """Sets the release_retention_policy of this LifecycleResource.


        :param release_retention_policy: The release_retention_policy of this LifecycleResource.  # noqa: E501
        :type: RetentionPeriod
        """

        self._release_retention_policy = release_retention_policy

    @property
    def tentacle_retention_policy(self):
        """Gets the tentacle_retention_policy of this LifecycleResource.  # noqa: E501


        :return: The tentacle_retention_policy of this LifecycleResource.  # noqa: E501
        :rtype: RetentionPeriod
        """
        return self._tentacle_retention_policy

    @tentacle_retention_policy.setter
    def tentacle_retention_policy(self, tentacle_retention_policy):
        """Sets the tentacle_retention_policy of this LifecycleResource.


        :param tentacle_retention_policy: The tentacle_retention_policy of this LifecycleResource.  # noqa: E501
        :type: RetentionPeriod
        """

        self._tentacle_retention_policy = tentacle_retention_policy

    @property
    def description(self):
        """Gets the description of this LifecycleResource.  # noqa: E501


        :return: The description of this LifecycleResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LifecycleResource.


        :param description: The description of this LifecycleResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this LifecycleResource.  # noqa: E501


        :return: The last_modified_on of this LifecycleResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this LifecycleResource.


        :param last_modified_on: The last_modified_on of this LifecycleResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this LifecycleResource.  # noqa: E501


        :return: The last_modified_by of this LifecycleResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this LifecycleResource.


        :param last_modified_by: The last_modified_by of this LifecycleResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this LifecycleResource.  # noqa: E501


        :return: The links of this LifecycleResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LifecycleResource.


        :param links: The links of this LifecycleResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LifecycleResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LifecycleResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
