# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActionTemplateSearchResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'description': 'str',
        'keywords': 'str',
        'author': 'str',
        'website': 'str',
        'is_installed': 'bool',
        'is_built_in': 'bool',
        'category': 'str',
        'categories': 'list[str]',
        'community_action_template_id': 'str',
        'has_update': 'bool',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'type': 'Type',
        'name': 'Name',
        'description': 'Description',
        'keywords': 'Keywords',
        'author': 'Author',
        'website': 'Website',
        'is_installed': 'IsInstalled',
        'is_built_in': 'IsBuiltIn',
        'category': 'Category',
        'categories': 'Categories',
        'community_action_template_id': 'CommunityActionTemplateId',
        'has_update': 'HasUpdate',
        'links': 'Links'
    }

    def __init__(self, id=None, type=None, name=None, description=None, keywords=None, author=None, website=None, is_installed=None, is_built_in=None, category=None, categories=None, community_action_template_id=None, has_update=None, links=None):  # noqa: E501
        """ActionTemplateSearchResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._name = None
        self._description = None
        self._keywords = None
        self._author = None
        self._website = None
        self._is_installed = None
        self._is_built_in = None
        self._category = None
        self._categories = None
        self._community_action_template_id = None
        self._has_update = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if keywords is not None:
            self.keywords = keywords
        if author is not None:
            self.author = author
        if website is not None:
            self.website = website
        if is_installed is not None:
            self.is_installed = is_installed
        if is_built_in is not None:
            self.is_built_in = is_built_in
        if category is not None:
            self.category = category
        if categories is not None:
            self.categories = categories
        if community_action_template_id is not None:
            self.community_action_template_id = community_action_template_id
        if has_update is not None:
            self.has_update = has_update
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this ActionTemplateSearchResource.  # noqa: E501


        :return: The id of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionTemplateSearchResource.


        :param id: The id of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ActionTemplateSearchResource.  # noqa: E501


        :return: The type of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActionTemplateSearchResource.


        :param type: The type of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this ActionTemplateSearchResource.  # noqa: E501


        :return: The name of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionTemplateSearchResource.


        :param name: The name of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ActionTemplateSearchResource.  # noqa: E501


        :return: The description of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionTemplateSearchResource.


        :param description: The description of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def keywords(self):
        """Gets the keywords of this ActionTemplateSearchResource.  # noqa: E501


        :return: The keywords of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ActionTemplateSearchResource.


        :param keywords: The keywords of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def author(self):
        """Gets the author of this ActionTemplateSearchResource.  # noqa: E501


        :return: The author of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ActionTemplateSearchResource.


        :param author: The author of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def website(self):
        """Gets the website of this ActionTemplateSearchResource.  # noqa: E501


        :return: The website of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ActionTemplateSearchResource.


        :param website: The website of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def is_installed(self):
        """Gets the is_installed of this ActionTemplateSearchResource.  # noqa: E501


        :return: The is_installed of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_installed

    @is_installed.setter
    def is_installed(self, is_installed):
        """Sets the is_installed of this ActionTemplateSearchResource.


        :param is_installed: The is_installed of this ActionTemplateSearchResource.  # noqa: E501
        :type: bool
        """

        self._is_installed = is_installed

    @property
    def is_built_in(self):
        """Gets the is_built_in of this ActionTemplateSearchResource.  # noqa: E501


        :return: The is_built_in of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_built_in

    @is_built_in.setter
    def is_built_in(self, is_built_in):
        """Sets the is_built_in of this ActionTemplateSearchResource.


        :param is_built_in: The is_built_in of this ActionTemplateSearchResource.  # noqa: E501
        :type: bool
        """

        self._is_built_in = is_built_in

    @property
    def category(self):
        """Gets the category of this ActionTemplateSearchResource.  # noqa: E501


        :return: The category of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ActionTemplateSearchResource.


        :param category: The category of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def categories(self):
        """Gets the categories of this ActionTemplateSearchResource.  # noqa: E501


        :return: The categories of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ActionTemplateSearchResource.


        :param categories: The categories of this ActionTemplateSearchResource.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def community_action_template_id(self):
        """Gets the community_action_template_id of this ActionTemplateSearchResource.  # noqa: E501


        :return: The community_action_template_id of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: str
        """
        return self._community_action_template_id

    @community_action_template_id.setter
    def community_action_template_id(self, community_action_template_id):
        """Sets the community_action_template_id of this ActionTemplateSearchResource.


        :param community_action_template_id: The community_action_template_id of this ActionTemplateSearchResource.  # noqa: E501
        :type: str
        """

        self._community_action_template_id = community_action_template_id

    @property
    def has_update(self):
        """Gets the has_update of this ActionTemplateSearchResource.  # noqa: E501


        :return: The has_update of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: bool
        """
        return self._has_update

    @has_update.setter
    def has_update(self, has_update):
        """Sets the has_update of this ActionTemplateSearchResource.


        :param has_update: The has_update of this ActionTemplateSearchResource.  # noqa: E501
        :type: bool
        """

        self._has_update = has_update

    @property
    def links(self):
        """Gets the links of this ActionTemplateSearchResource.  # noqa: E501


        :return: The links of this ActionTemplateSearchResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ActionTemplateSearchResource.


        :param links: The links of this ActionTemplateSearchResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionTemplateSearchResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionTemplateSearchResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
