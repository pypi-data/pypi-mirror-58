# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from octopus_deploy_swagger_client.models.action_update_removed_package_usage import ActionUpdateRemovedPackageUsage  # noqa: F401,E501


class ActionUpdateResultResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'outcome': 'str',
        'manual_merge_required_reasons_by_property_name': 'dict(str, list[str])',
        'names_of_new_parameters_missing_default_value': 'list[str]',
        'removed_package_usages': 'list[ActionUpdateRemovedPackageUsage]',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'outcome': 'Outcome',
        'manual_merge_required_reasons_by_property_name': 'ManualMergeRequiredReasonsByPropertyName',
        'names_of_new_parameters_missing_default_value': 'NamesOfNewParametersMissingDefaultValue',
        'removed_package_usages': 'RemovedPackageUsages',
        'links': 'Links'
    }

    def __init__(self, id=None, outcome=None, manual_merge_required_reasons_by_property_name=None, names_of_new_parameters_missing_default_value=None, removed_package_usages=None, links=None):  # noqa: E501
        """ActionUpdateResultResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._outcome = None
        self._manual_merge_required_reasons_by_property_name = None
        self._names_of_new_parameters_missing_default_value = None
        self._removed_package_usages = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if outcome is not None:
            self.outcome = outcome
        if manual_merge_required_reasons_by_property_name is not None:
            self.manual_merge_required_reasons_by_property_name = manual_merge_required_reasons_by_property_name
        if names_of_new_parameters_missing_default_value is not None:
            self.names_of_new_parameters_missing_default_value = names_of_new_parameters_missing_default_value
        if removed_package_usages is not None:
            self.removed_package_usages = removed_package_usages
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this ActionUpdateResultResource.  # noqa: E501


        :return: The id of this ActionUpdateResultResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionUpdateResultResource.


        :param id: The id of this ActionUpdateResultResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def outcome(self):
        """Gets the outcome of this ActionUpdateResultResource.  # noqa: E501


        :return: The outcome of this ActionUpdateResultResource.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this ActionUpdateResultResource.


        :param outcome: The outcome of this ActionUpdateResultResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["Success", "ManualMergeRequired", "DefaultParamterValueMissing", "RemovedPackageInUse"]  # noqa: E501
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"  # noqa: E501
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def manual_merge_required_reasons_by_property_name(self):
        """Gets the manual_merge_required_reasons_by_property_name of this ActionUpdateResultResource.  # noqa: E501


        :return: The manual_merge_required_reasons_by_property_name of this ActionUpdateResultResource.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._manual_merge_required_reasons_by_property_name

    @manual_merge_required_reasons_by_property_name.setter
    def manual_merge_required_reasons_by_property_name(self, manual_merge_required_reasons_by_property_name):
        """Sets the manual_merge_required_reasons_by_property_name of this ActionUpdateResultResource.


        :param manual_merge_required_reasons_by_property_name: The manual_merge_required_reasons_by_property_name of this ActionUpdateResultResource.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._manual_merge_required_reasons_by_property_name = manual_merge_required_reasons_by_property_name

    @property
    def names_of_new_parameters_missing_default_value(self):
        """Gets the names_of_new_parameters_missing_default_value of this ActionUpdateResultResource.  # noqa: E501


        :return: The names_of_new_parameters_missing_default_value of this ActionUpdateResultResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._names_of_new_parameters_missing_default_value

    @names_of_new_parameters_missing_default_value.setter
    def names_of_new_parameters_missing_default_value(self, names_of_new_parameters_missing_default_value):
        """Sets the names_of_new_parameters_missing_default_value of this ActionUpdateResultResource.


        :param names_of_new_parameters_missing_default_value: The names_of_new_parameters_missing_default_value of this ActionUpdateResultResource.  # noqa: E501
        :type: list[str]
        """

        self._names_of_new_parameters_missing_default_value = names_of_new_parameters_missing_default_value

    @property
    def removed_package_usages(self):
        """Gets the removed_package_usages of this ActionUpdateResultResource.  # noqa: E501


        :return: The removed_package_usages of this ActionUpdateResultResource.  # noqa: E501
        :rtype: list[ActionUpdateRemovedPackageUsage]
        """
        return self._removed_package_usages

    @removed_package_usages.setter
    def removed_package_usages(self, removed_package_usages):
        """Sets the removed_package_usages of this ActionUpdateResultResource.


        :param removed_package_usages: The removed_package_usages of this ActionUpdateResultResource.  # noqa: E501
        :type: list[ActionUpdateRemovedPackageUsage]
        """

        self._removed_package_usages = removed_package_usages

    @property
    def links(self):
        """Gets the links of this ActionUpdateResultResource.  # noqa: E501


        :return: The links of this ActionUpdateResultResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ActionUpdateResultResource.


        :param links: The links of this ActionUpdateResultResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionUpdateResultResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionUpdateResultResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
