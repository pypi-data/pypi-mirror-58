# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvitationResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'add_to_team_ids': 'list[str]',
        'invitation_code': 'str',
        'expires': 'datetime',
        'space_id': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'add_to_team_ids': 'AddToTeamIds',
        'invitation_code': 'InvitationCode',
        'expires': 'Expires',
        'space_id': 'SpaceId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, add_to_team_ids=None, invitation_code=None, expires=None, space_id=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """InvitationResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._add_to_team_ids = None
        self._invitation_code = None
        self._expires = None
        self._space_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.add_to_team_ids = add_to_team_ids
        if invitation_code is not None:
            self.invitation_code = invitation_code
        if expires is not None:
            self.expires = expires
        if space_id is not None:
            self.space_id = space_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this InvitationResource.  # noqa: E501


        :return: The id of this InvitationResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvitationResource.


        :param id: The id of this InvitationResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def add_to_team_ids(self):
        """Gets the add_to_team_ids of this InvitationResource.  # noqa: E501


        :return: The add_to_team_ids of this InvitationResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_to_team_ids

    @add_to_team_ids.setter
    def add_to_team_ids(self, add_to_team_ids):
        """Sets the add_to_team_ids of this InvitationResource.


        :param add_to_team_ids: The add_to_team_ids of this InvitationResource.  # noqa: E501
        :type: list[str]
        """
        if add_to_team_ids is None:
            raise ValueError("Invalid value for `add_to_team_ids`, must not be `None`")  # noqa: E501

        self._add_to_team_ids = add_to_team_ids

    @property
    def invitation_code(self):
        """Gets the invitation_code of this InvitationResource.  # noqa: E501


        :return: The invitation_code of this InvitationResource.  # noqa: E501
        :rtype: str
        """
        return self._invitation_code

    @invitation_code.setter
    def invitation_code(self, invitation_code):
        """Sets the invitation_code of this InvitationResource.


        :param invitation_code: The invitation_code of this InvitationResource.  # noqa: E501
        :type: str
        """

        self._invitation_code = invitation_code

    @property
    def expires(self):
        """Gets the expires of this InvitationResource.  # noqa: E501


        :return: The expires of this InvitationResource.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this InvitationResource.


        :param expires: The expires of this InvitationResource.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def space_id(self):
        """Gets the space_id of this InvitationResource.  # noqa: E501


        :return: The space_id of this InvitationResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this InvitationResource.


        :param space_id: The space_id of this InvitationResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this InvitationResource.  # noqa: E501


        :return: The last_modified_on of this InvitationResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this InvitationResource.


        :param last_modified_on: The last_modified_on of this InvitationResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this InvitationResource.  # noqa: E501


        :return: The last_modified_by of this InvitationResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this InvitationResource.


        :param last_modified_by: The last_modified_by of this InvitationResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this InvitationResource.  # noqa: E501


        :return: The links of this InvitationResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InvitationResource.


        :param links: The links of this InvitationResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
