# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from octopus_deploy_swagger_client.models.action_template_parameter_resource import ActionTemplateParameterResource  # noqa: F401,E501
from octopus_deploy_swagger_client.models.auto_deploy_release_override_resource import AutoDeployReleaseOverrideResource  # noqa: F401,E501
from octopus_deploy_swagger_client.models.extension_settings_values import ExtensionSettingsValues  # noqa: F401,E501
from octopus_deploy_swagger_client.models.project_connectivity_policy import ProjectConnectivityPolicy  # noqa: F401,E501
from octopus_deploy_swagger_client.models.release_creation_strategy_resource import ReleaseCreationStrategyResource  # noqa: F401,E501
from octopus_deploy_swagger_client.models.versioning_strategy_resource import VersioningStrategyResource  # noqa: F401,E501


class ProjectResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'variable_set_id': 'str',
        'deployment_process_id': 'str',
        'cloned_from_project_id': 'str',
        'discrete_channel_release': 'bool',
        'included_library_variable_set_ids': 'list[str]',
        'default_to_skip_if_already_installed': 'bool',
        'tenanted_deployment_mode': 'str',
        'default_guided_failure_mode': 'str',
        'versioning_strategy': 'VersioningStrategyResource',
        'release_creation_strategy': 'ReleaseCreationStrategyResource',
        'templates': 'list[ActionTemplateParameterResource]',
        'auto_deploy_release_overrides': 'list[AutoDeployReleaseOverrideResource]',
        'release_notes_template': 'str',
        'space_id': 'str',
        'extension_settings': 'list[ExtensionSettingsValues]',
        'name': 'str',
        'slug': 'str',
        'description': 'str',
        'is_disabled': 'bool',
        'project_group_id': 'str',
        'lifecycle_id': 'str',
        'auto_create_release': 'bool',
        'project_connectivity_policy': 'ProjectConnectivityPolicy',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'variable_set_id': 'VariableSetId',
        'deployment_process_id': 'DeploymentProcessId',
        'cloned_from_project_id': 'ClonedFromProjectId',
        'discrete_channel_release': 'DiscreteChannelRelease',
        'included_library_variable_set_ids': 'IncludedLibraryVariableSetIds',
        'default_to_skip_if_already_installed': 'DefaultToSkipIfAlreadyInstalled',
        'tenanted_deployment_mode': 'TenantedDeploymentMode',
        'default_guided_failure_mode': 'DefaultGuidedFailureMode',
        'versioning_strategy': 'VersioningStrategy',
        'release_creation_strategy': 'ReleaseCreationStrategy',
        'templates': 'Templates',
        'auto_deploy_release_overrides': 'AutoDeployReleaseOverrides',
        'release_notes_template': 'ReleaseNotesTemplate',
        'space_id': 'SpaceId',
        'extension_settings': 'ExtensionSettings',
        'name': 'Name',
        'slug': 'Slug',
        'description': 'Description',
        'is_disabled': 'IsDisabled',
        'project_group_id': 'ProjectGroupId',
        'lifecycle_id': 'LifecycleId',
        'auto_create_release': 'AutoCreateRelease',
        'project_connectivity_policy': 'ProjectConnectivityPolicy',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, variable_set_id=None, deployment_process_id=None, cloned_from_project_id=None, discrete_channel_release=None, included_library_variable_set_ids=None, default_to_skip_if_already_installed=None, tenanted_deployment_mode=None, default_guided_failure_mode=None, versioning_strategy=None, release_creation_strategy=None, templates=None, auto_deploy_release_overrides=None, release_notes_template=None, space_id=None, extension_settings=None, name=None, slug=None, description=None, is_disabled=None, project_group_id=None, lifecycle_id=None, auto_create_release=None, project_connectivity_policy=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """ProjectResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._variable_set_id = None
        self._deployment_process_id = None
        self._cloned_from_project_id = None
        self._discrete_channel_release = None
        self._included_library_variable_set_ids = None
        self._default_to_skip_if_already_installed = None
        self._tenanted_deployment_mode = None
        self._default_guided_failure_mode = None
        self._versioning_strategy = None
        self._release_creation_strategy = None
        self._templates = None
        self._auto_deploy_release_overrides = None
        self._release_notes_template = None
        self._space_id = None
        self._extension_settings = None
        self._name = None
        self._slug = None
        self._description = None
        self._is_disabled = None
        self._project_group_id = None
        self._lifecycle_id = None
        self._auto_create_release = None
        self._project_connectivity_policy = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if variable_set_id is not None:
            self.variable_set_id = variable_set_id
        if deployment_process_id is not None:
            self.deployment_process_id = deployment_process_id
        if cloned_from_project_id is not None:
            self.cloned_from_project_id = cloned_from_project_id
        if discrete_channel_release is not None:
            self.discrete_channel_release = discrete_channel_release
        if included_library_variable_set_ids is not None:
            self.included_library_variable_set_ids = included_library_variable_set_ids
        if default_to_skip_if_already_installed is not None:
            self.default_to_skip_if_already_installed = default_to_skip_if_already_installed
        if tenanted_deployment_mode is not None:
            self.tenanted_deployment_mode = tenanted_deployment_mode
        if default_guided_failure_mode is not None:
            self.default_guided_failure_mode = default_guided_failure_mode
        if versioning_strategy is not None:
            self.versioning_strategy = versioning_strategy
        if release_creation_strategy is not None:
            self.release_creation_strategy = release_creation_strategy
        if templates is not None:
            self.templates = templates
        if auto_deploy_release_overrides is not None:
            self.auto_deploy_release_overrides = auto_deploy_release_overrides
        if release_notes_template is not None:
            self.release_notes_template = release_notes_template
        if space_id is not None:
            self.space_id = space_id
        if extension_settings is not None:
            self.extension_settings = extension_settings
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if description is not None:
            self.description = description
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if project_group_id is not None:
            self.project_group_id = project_group_id
        if lifecycle_id is not None:
            self.lifecycle_id = lifecycle_id
        if auto_create_release is not None:
            self.auto_create_release = auto_create_release
        if project_connectivity_policy is not None:
            self.project_connectivity_policy = project_connectivity_policy
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this ProjectResource.  # noqa: E501


        :return: The id of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectResource.


        :param id: The id of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def variable_set_id(self):
        """Gets the variable_set_id of this ProjectResource.  # noqa: E501


        :return: The variable_set_id of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._variable_set_id

    @variable_set_id.setter
    def variable_set_id(self, variable_set_id):
        """Sets the variable_set_id of this ProjectResource.


        :param variable_set_id: The variable_set_id of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._variable_set_id = variable_set_id

    @property
    def deployment_process_id(self):
        """Gets the deployment_process_id of this ProjectResource.  # noqa: E501


        :return: The deployment_process_id of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._deployment_process_id

    @deployment_process_id.setter
    def deployment_process_id(self, deployment_process_id):
        """Sets the deployment_process_id of this ProjectResource.


        :param deployment_process_id: The deployment_process_id of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._deployment_process_id = deployment_process_id

    @property
    def cloned_from_project_id(self):
        """Gets the cloned_from_project_id of this ProjectResource.  # noqa: E501


        :return: The cloned_from_project_id of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._cloned_from_project_id

    @cloned_from_project_id.setter
    def cloned_from_project_id(self, cloned_from_project_id):
        """Sets the cloned_from_project_id of this ProjectResource.


        :param cloned_from_project_id: The cloned_from_project_id of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._cloned_from_project_id = cloned_from_project_id

    @property
    def discrete_channel_release(self):
        """Gets the discrete_channel_release of this ProjectResource.  # noqa: E501


        :return: The discrete_channel_release of this ProjectResource.  # noqa: E501
        :rtype: bool
        """
        return self._discrete_channel_release

    @discrete_channel_release.setter
    def discrete_channel_release(self, discrete_channel_release):
        """Sets the discrete_channel_release of this ProjectResource.


        :param discrete_channel_release: The discrete_channel_release of this ProjectResource.  # noqa: E501
        :type: bool
        """

        self._discrete_channel_release = discrete_channel_release

    @property
    def included_library_variable_set_ids(self):
        """Gets the included_library_variable_set_ids of this ProjectResource.  # noqa: E501


        :return: The included_library_variable_set_ids of this ProjectResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._included_library_variable_set_ids

    @included_library_variable_set_ids.setter
    def included_library_variable_set_ids(self, included_library_variable_set_ids):
        """Sets the included_library_variable_set_ids of this ProjectResource.


        :param included_library_variable_set_ids: The included_library_variable_set_ids of this ProjectResource.  # noqa: E501
        :type: list[str]
        """

        self._included_library_variable_set_ids = included_library_variable_set_ids

    @property
    def default_to_skip_if_already_installed(self):
        """Gets the default_to_skip_if_already_installed of this ProjectResource.  # noqa: E501


        :return: The default_to_skip_if_already_installed of this ProjectResource.  # noqa: E501
        :rtype: bool
        """
        return self._default_to_skip_if_already_installed

    @default_to_skip_if_already_installed.setter
    def default_to_skip_if_already_installed(self, default_to_skip_if_already_installed):
        """Sets the default_to_skip_if_already_installed of this ProjectResource.


        :param default_to_skip_if_already_installed: The default_to_skip_if_already_installed of this ProjectResource.  # noqa: E501
        :type: bool
        """

        self._default_to_skip_if_already_installed = default_to_skip_if_already_installed

    @property
    def tenanted_deployment_mode(self):
        """Gets the tenanted_deployment_mode of this ProjectResource.  # noqa: E501


        :return: The tenanted_deployment_mode of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._tenanted_deployment_mode

    @tenanted_deployment_mode.setter
    def tenanted_deployment_mode(self, tenanted_deployment_mode):
        """Sets the tenanted_deployment_mode of this ProjectResource.


        :param tenanted_deployment_mode: The tenanted_deployment_mode of this ProjectResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["Untenanted", "TenantedOrUntenanted", "Tenanted"]  # noqa: E501
        if tenanted_deployment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `tenanted_deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(tenanted_deployment_mode, allowed_values)
            )

        self._tenanted_deployment_mode = tenanted_deployment_mode

    @property
    def default_guided_failure_mode(self):
        """Gets the default_guided_failure_mode of this ProjectResource.  # noqa: E501


        :return: The default_guided_failure_mode of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._default_guided_failure_mode

    @default_guided_failure_mode.setter
    def default_guided_failure_mode(self, default_guided_failure_mode):
        """Sets the default_guided_failure_mode of this ProjectResource.


        :param default_guided_failure_mode: The default_guided_failure_mode of this ProjectResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["EnvironmentDefault", "Off", "On"]  # noqa: E501
        if default_guided_failure_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `default_guided_failure_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(default_guided_failure_mode, allowed_values)
            )

        self._default_guided_failure_mode = default_guided_failure_mode

    @property
    def versioning_strategy(self):
        """Gets the versioning_strategy of this ProjectResource.  # noqa: E501


        :return: The versioning_strategy of this ProjectResource.  # noqa: E501
        :rtype: VersioningStrategyResource
        """
        return self._versioning_strategy

    @versioning_strategy.setter
    def versioning_strategy(self, versioning_strategy):
        """Sets the versioning_strategy of this ProjectResource.


        :param versioning_strategy: The versioning_strategy of this ProjectResource.  # noqa: E501
        :type: VersioningStrategyResource
        """

        self._versioning_strategy = versioning_strategy

    @property
    def release_creation_strategy(self):
        """Gets the release_creation_strategy of this ProjectResource.  # noqa: E501


        :return: The release_creation_strategy of this ProjectResource.  # noqa: E501
        :rtype: ReleaseCreationStrategyResource
        """
        return self._release_creation_strategy

    @release_creation_strategy.setter
    def release_creation_strategy(self, release_creation_strategy):
        """Sets the release_creation_strategy of this ProjectResource.


        :param release_creation_strategy: The release_creation_strategy of this ProjectResource.  # noqa: E501
        :type: ReleaseCreationStrategyResource
        """

        self._release_creation_strategy = release_creation_strategy

    @property
    def templates(self):
        """Gets the templates of this ProjectResource.  # noqa: E501


        :return: The templates of this ProjectResource.  # noqa: E501
        :rtype: list[ActionTemplateParameterResource]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this ProjectResource.


        :param templates: The templates of this ProjectResource.  # noqa: E501
        :type: list[ActionTemplateParameterResource]
        """

        self._templates = templates

    @property
    def auto_deploy_release_overrides(self):
        """Gets the auto_deploy_release_overrides of this ProjectResource.  # noqa: E501


        :return: The auto_deploy_release_overrides of this ProjectResource.  # noqa: E501
        :rtype: list[AutoDeployReleaseOverrideResource]
        """
        return self._auto_deploy_release_overrides

    @auto_deploy_release_overrides.setter
    def auto_deploy_release_overrides(self, auto_deploy_release_overrides):
        """Sets the auto_deploy_release_overrides of this ProjectResource.


        :param auto_deploy_release_overrides: The auto_deploy_release_overrides of this ProjectResource.  # noqa: E501
        :type: list[AutoDeployReleaseOverrideResource]
        """

        self._auto_deploy_release_overrides = auto_deploy_release_overrides

    @property
    def release_notes_template(self):
        """Gets the release_notes_template of this ProjectResource.  # noqa: E501


        :return: The release_notes_template of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._release_notes_template

    @release_notes_template.setter
    def release_notes_template(self, release_notes_template):
        """Sets the release_notes_template of this ProjectResource.


        :param release_notes_template: The release_notes_template of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._release_notes_template = release_notes_template

    @property
    def space_id(self):
        """Gets the space_id of this ProjectResource.  # noqa: E501


        :return: The space_id of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this ProjectResource.


        :param space_id: The space_id of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def extension_settings(self):
        """Gets the extension_settings of this ProjectResource.  # noqa: E501


        :return: The extension_settings of this ProjectResource.  # noqa: E501
        :rtype: list[ExtensionSettingsValues]
        """
        return self._extension_settings

    @extension_settings.setter
    def extension_settings(self, extension_settings):
        """Sets the extension_settings of this ProjectResource.


        :param extension_settings: The extension_settings of this ProjectResource.  # noqa: E501
        :type: list[ExtensionSettingsValues]
        """

        self._extension_settings = extension_settings

    @property
    def name(self):
        """Gets the name of this ProjectResource.  # noqa: E501


        :return: The name of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectResource.


        :param name: The name of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this ProjectResource.  # noqa: E501


        :return: The slug of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ProjectResource.


        :param slug: The slug of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def description(self):
        """Gets the description of this ProjectResource.  # noqa: E501


        :return: The description of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectResource.


        :param description: The description of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_disabled(self):
        """Gets the is_disabled of this ProjectResource.  # noqa: E501


        :return: The is_disabled of this ProjectResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this ProjectResource.


        :param is_disabled: The is_disabled of this ProjectResource.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    @property
    def project_group_id(self):
        """Gets the project_group_id of this ProjectResource.  # noqa: E501


        :return: The project_group_id of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._project_group_id

    @project_group_id.setter
    def project_group_id(self, project_group_id):
        """Sets the project_group_id of this ProjectResource.


        :param project_group_id: The project_group_id of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._project_group_id = project_group_id

    @property
    def lifecycle_id(self):
        """Gets the lifecycle_id of this ProjectResource.  # noqa: E501


        :return: The lifecycle_id of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle_id

    @lifecycle_id.setter
    def lifecycle_id(self, lifecycle_id):
        """Sets the lifecycle_id of this ProjectResource.


        :param lifecycle_id: The lifecycle_id of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._lifecycle_id = lifecycle_id

    @property
    def auto_create_release(self):
        """Gets the auto_create_release of this ProjectResource.  # noqa: E501


        :return: The auto_create_release of this ProjectResource.  # noqa: E501
        :rtype: bool
        """
        return self._auto_create_release

    @auto_create_release.setter
    def auto_create_release(self, auto_create_release):
        """Sets the auto_create_release of this ProjectResource.


        :param auto_create_release: The auto_create_release of this ProjectResource.  # noqa: E501
        :type: bool
        """

        self._auto_create_release = auto_create_release

    @property
    def project_connectivity_policy(self):
        """Gets the project_connectivity_policy of this ProjectResource.  # noqa: E501


        :return: The project_connectivity_policy of this ProjectResource.  # noqa: E501
        :rtype: ProjectConnectivityPolicy
        """
        return self._project_connectivity_policy

    @project_connectivity_policy.setter
    def project_connectivity_policy(self, project_connectivity_policy):
        """Sets the project_connectivity_policy of this ProjectResource.


        :param project_connectivity_policy: The project_connectivity_policy of this ProjectResource.  # noqa: E501
        :type: ProjectConnectivityPolicy
        """

        self._project_connectivity_policy = project_connectivity_policy

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this ProjectResource.  # noqa: E501


        :return: The last_modified_on of this ProjectResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this ProjectResource.


        :param last_modified_on: The last_modified_on of this ProjectResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this ProjectResource.  # noqa: E501


        :return: The last_modified_by of this ProjectResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this ProjectResource.


        :param last_modified_by: The last_modified_by of this ProjectResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this ProjectResource.  # noqa: E501


        :return: The links of this ProjectResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ProjectResource.


        :param links: The links of this ProjectResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
