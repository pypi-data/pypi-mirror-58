# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AzureWebSiteSlotResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'site': 'str',
        'resource_group_name': 'str',
        'region': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'site': 'Site',
        'resource_group_name': 'ResourceGroupName',
        'region': 'Region'
    }

    def __init__(self, name=None, site=None, resource_group_name=None, region=None):  # noqa: E501
        """AzureWebSiteSlotResource - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._site = None
        self._resource_group_name = None
        self._region = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if site is not None:
            self.site = site
        if resource_group_name is not None:
            self.resource_group_name = resource_group_name
        if region is not None:
            self.region = region

    @property
    def name(self):
        """Gets the name of this AzureWebSiteSlotResource.  # noqa: E501


        :return: The name of this AzureWebSiteSlotResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AzureWebSiteSlotResource.


        :param name: The name of this AzureWebSiteSlotResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site(self):
        """Gets the site of this AzureWebSiteSlotResource.  # noqa: E501


        :return: The site of this AzureWebSiteSlotResource.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this AzureWebSiteSlotResource.


        :param site: The site of this AzureWebSiteSlotResource.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this AzureWebSiteSlotResource.  # noqa: E501


        :return: The resource_group_name of this AzureWebSiteSlotResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this AzureWebSiteSlotResource.


        :param resource_group_name: The resource_group_name of this AzureWebSiteSlotResource.  # noqa: E501
        :type: str
        """

        self._resource_group_name = resource_group_name

    @property
    def region(self):
        """Gets the region of this AzureWebSiteSlotResource.  # noqa: E501


        :return: The region of this AzureWebSiteSlotResource.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AzureWebSiteSlotResource.


        :param region: The region of this AzureWebSiteSlotResource.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AzureWebSiteSlotResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureWebSiteSlotResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
