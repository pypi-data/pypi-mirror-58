# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserRoleResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'supported_restrictions': 'list[str]',
        'space_permission_descriptions': 'list[str]',
        'system_permission_descriptions': 'list[str]',
        'granted_space_permissions': 'list[str]',
        'granted_system_permissions': 'list[str]',
        'can_be_deleted': 'bool',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'supported_restrictions': 'SupportedRestrictions',
        'space_permission_descriptions': 'SpacePermissionDescriptions',
        'system_permission_descriptions': 'SystemPermissionDescriptions',
        'granted_space_permissions': 'GrantedSpacePermissions',
        'granted_system_permissions': 'GrantedSystemPermissions',
        'can_be_deleted': 'CanBeDeleted',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, name=None, description=None, supported_restrictions=None, space_permission_descriptions=None, system_permission_descriptions=None, granted_space_permissions=None, granted_system_permissions=None, can_be_deleted=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """UserRoleResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._supported_restrictions = None
        self._space_permission_descriptions = None
        self._system_permission_descriptions = None
        self._granted_space_permissions = None
        self._granted_system_permissions = None
        self._can_be_deleted = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if supported_restrictions is not None:
            self.supported_restrictions = supported_restrictions
        if space_permission_descriptions is not None:
            self.space_permission_descriptions = space_permission_descriptions
        if system_permission_descriptions is not None:
            self.system_permission_descriptions = system_permission_descriptions
        if granted_space_permissions is not None:
            self.granted_space_permissions = granted_space_permissions
        if granted_system_permissions is not None:
            self.granted_system_permissions = granted_system_permissions
        if can_be_deleted is not None:
            self.can_be_deleted = can_be_deleted
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this UserRoleResource.  # noqa: E501


        :return: The id of this UserRoleResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRoleResource.


        :param id: The id of this UserRoleResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserRoleResource.  # noqa: E501


        :return: The name of this UserRoleResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserRoleResource.


        :param name: The name of this UserRoleResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UserRoleResource.  # noqa: E501


        :return: The description of this UserRoleResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserRoleResource.


        :param description: The description of this UserRoleResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def supported_restrictions(self):
        """Gets the supported_restrictions of this UserRoleResource.  # noqa: E501


        :return: The supported_restrictions of this UserRoleResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_restrictions

    @supported_restrictions.setter
    def supported_restrictions(self, supported_restrictions):
        """Sets the supported_restrictions of this UserRoleResource.


        :param supported_restrictions: The supported_restrictions of this UserRoleResource.  # noqa: E501
        :type: list[str]
        """

        self._supported_restrictions = supported_restrictions

    @property
    def space_permission_descriptions(self):
        """Gets the space_permission_descriptions of this UserRoleResource.  # noqa: E501


        :return: The space_permission_descriptions of this UserRoleResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._space_permission_descriptions

    @space_permission_descriptions.setter
    def space_permission_descriptions(self, space_permission_descriptions):
        """Sets the space_permission_descriptions of this UserRoleResource.


        :param space_permission_descriptions: The space_permission_descriptions of this UserRoleResource.  # noqa: E501
        :type: list[str]
        """

        self._space_permission_descriptions = space_permission_descriptions

    @property
    def system_permission_descriptions(self):
        """Gets the system_permission_descriptions of this UserRoleResource.  # noqa: E501


        :return: The system_permission_descriptions of this UserRoleResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._system_permission_descriptions

    @system_permission_descriptions.setter
    def system_permission_descriptions(self, system_permission_descriptions):
        """Sets the system_permission_descriptions of this UserRoleResource.


        :param system_permission_descriptions: The system_permission_descriptions of this UserRoleResource.  # noqa: E501
        :type: list[str]
        """

        self._system_permission_descriptions = system_permission_descriptions

    @property
    def granted_space_permissions(self):
        """Gets the granted_space_permissions of this UserRoleResource.  # noqa: E501


        :return: The granted_space_permissions of this UserRoleResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._granted_space_permissions

    @granted_space_permissions.setter
    def granted_space_permissions(self, granted_space_permissions):
        """Sets the granted_space_permissions of this UserRoleResource.


        :param granted_space_permissions: The granted_space_permissions of this UserRoleResource.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["None", "AdministerSystem", "ProjectEdit", "ProjectView", "ProjectCreate", "ProjectDelete", "ProcessView", "ProcessEdit", "VariableEdit", "VariableEditUnscoped", "VariableView", "VariableViewUnscoped", "ReleaseCreate", "ReleaseView", "ReleaseEdit", "ReleaseDelete", "DefectReport", "DefectResolve", "DeploymentCreate", "DeploymentDelete", "DeploymentView", "EnvironmentView", "EnvironmentCreate", "EnvironmentEdit", "EnvironmentDelete", "MachineCreate", "MachineEdit", "MachineView", "MachineDelete", "ArtifactView", "ArtifactCreate", "ArtifactEdit", "ArtifactDelete", "FeedView", "EventView", "LibraryVariableSetView", "LibraryVariableSetCreate", "LibraryVariableSetEdit", "LibraryVariableSetDelete", "ProjectGroupView", "ProjectGroupCreate", "ProjectGroupEdit", "ProjectGroupDelete", "TeamCreate", "TeamView", "TeamEdit", "TeamDelete", "UserView", "UserInvite", "UserRoleView", "UserRoleEdit", "TaskView", "TaskCreate", "TaskCancel", "TaskEdit", "InterruptionView", "InterruptionSubmit", "InterruptionViewSubmitResponsible", "BuiltInFeedPush", "BuiltInFeedAdminister", "BuiltInFeedDownload", "ActionTemplateView", "ActionTemplateCreate", "ActionTemplateEdit", "ActionTemplateDelete", "LifecycleCreate", "LifecycleView", "LifecycleEdit", "LifecycleDelete", "AccountView", "AccountEdit", "AccountCreate", "AccountDelete", "TenantCreate", "TenantEdit", "TenantView", "TenantDelete", "TagSetCreate", "TagSetEdit", "TagSetDelete", "MachinePolicyCreate", "MachinePolicyView", "MachinePolicyEdit", "MachinePolicyDelete", "ProxyCreate", "ProxyView", "ProxyEdit", "ProxyDelete", "SubscriptionCreate", "SubscriptionView", "SubscriptionEdit", "SubscriptionDelete", "TriggerCreate", "TriggerView", "TriggerEdit", "TriggerDelete", "CertificateView", "CertificateCreate", "CertificateEdit", "CertificateDelete", "CertificateExportPrivateKey", "UserEdit", "ConfigureServer", "FeedEdit", "WorkerView", "WorkerEdit", "RunSystem", "SpaceEdit", "SpaceView", "SpaceDelete", "SpaceCreate", "PackageMetadataPush"]  # noqa: E501
        if not set(granted_space_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `granted_space_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(granted_space_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._granted_space_permissions = granted_space_permissions

    @property
    def granted_system_permissions(self):
        """Gets the granted_system_permissions of this UserRoleResource.  # noqa: E501


        :return: The granted_system_permissions of this UserRoleResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._granted_system_permissions

    @granted_system_permissions.setter
    def granted_system_permissions(self, granted_system_permissions):
        """Sets the granted_system_permissions of this UserRoleResource.


        :param granted_system_permissions: The granted_system_permissions of this UserRoleResource.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["None", "AdministerSystem", "ProjectEdit", "ProjectView", "ProjectCreate", "ProjectDelete", "ProcessView", "ProcessEdit", "VariableEdit", "VariableEditUnscoped", "VariableView", "VariableViewUnscoped", "ReleaseCreate", "ReleaseView", "ReleaseEdit", "ReleaseDelete", "DefectReport", "DefectResolve", "DeploymentCreate", "DeploymentDelete", "DeploymentView", "EnvironmentView", "EnvironmentCreate", "EnvironmentEdit", "EnvironmentDelete", "MachineCreate", "MachineEdit", "MachineView", "MachineDelete", "ArtifactView", "ArtifactCreate", "ArtifactEdit", "ArtifactDelete", "FeedView", "EventView", "LibraryVariableSetView", "LibraryVariableSetCreate", "LibraryVariableSetEdit", "LibraryVariableSetDelete", "ProjectGroupView", "ProjectGroupCreate", "ProjectGroupEdit", "ProjectGroupDelete", "TeamCreate", "TeamView", "TeamEdit", "TeamDelete", "UserView", "UserInvite", "UserRoleView", "UserRoleEdit", "TaskView", "TaskCreate", "TaskCancel", "TaskEdit", "InterruptionView", "InterruptionSubmit", "InterruptionViewSubmitResponsible", "BuiltInFeedPush", "BuiltInFeedAdminister", "BuiltInFeedDownload", "ActionTemplateView", "ActionTemplateCreate", "ActionTemplateEdit", "ActionTemplateDelete", "LifecycleCreate", "LifecycleView", "LifecycleEdit", "LifecycleDelete", "AccountView", "AccountEdit", "AccountCreate", "AccountDelete", "TenantCreate", "TenantEdit", "TenantView", "TenantDelete", "TagSetCreate", "TagSetEdit", "TagSetDelete", "MachinePolicyCreate", "MachinePolicyView", "MachinePolicyEdit", "MachinePolicyDelete", "ProxyCreate", "ProxyView", "ProxyEdit", "ProxyDelete", "SubscriptionCreate", "SubscriptionView", "SubscriptionEdit", "SubscriptionDelete", "TriggerCreate", "TriggerView", "TriggerEdit", "TriggerDelete", "CertificateView", "CertificateCreate", "CertificateEdit", "CertificateDelete", "CertificateExportPrivateKey", "UserEdit", "ConfigureServer", "FeedEdit", "WorkerView", "WorkerEdit", "RunSystem", "SpaceEdit", "SpaceView", "SpaceDelete", "SpaceCreate", "PackageMetadataPush"]  # noqa: E501
        if not set(granted_system_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `granted_system_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(granted_system_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._granted_system_permissions = granted_system_permissions

    @property
    def can_be_deleted(self):
        """Gets the can_be_deleted of this UserRoleResource.  # noqa: E501


        :return: The can_be_deleted of this UserRoleResource.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_deleted

    @can_be_deleted.setter
    def can_be_deleted(self, can_be_deleted):
        """Sets the can_be_deleted of this UserRoleResource.


        :param can_be_deleted: The can_be_deleted of this UserRoleResource.  # noqa: E501
        :type: bool
        """

        self._can_be_deleted = can_be_deleted

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this UserRoleResource.  # noqa: E501


        :return: The last_modified_on of this UserRoleResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this UserRoleResource.


        :param last_modified_on: The last_modified_on of this UserRoleResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this UserRoleResource.  # noqa: E501


        :return: The last_modified_by of this UserRoleResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this UserRoleResource.


        :param last_modified_by: The last_modified_by of this UserRoleResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this UserRoleResource.  # noqa: E501


        :return: The links of this UserRoleResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this UserRoleResource.


        :param links: The links of this UserRoleResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRoleResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRoleResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
