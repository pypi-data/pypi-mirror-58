# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from octopus_deploy_swagger_client.models.reference_data_item import ReferenceDataItem  # noqa: F401,E501


class VariableScopeValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environments': 'list[ReferenceDataItem]',
        'machines': 'list[ReferenceDataItem]',
        'actions': 'list[ReferenceDataItem]',
        'roles': 'list[ReferenceDataItem]',
        'channels': 'list[ReferenceDataItem]',
        'tenant_tags': 'list[ReferenceDataItem]'
    }

    attribute_map = {
        'environments': 'Environments',
        'machines': 'Machines',
        'actions': 'Actions',
        'roles': 'Roles',
        'channels': 'Channels',
        'tenant_tags': 'TenantTags'
    }

    def __init__(self, environments=None, machines=None, actions=None, roles=None, channels=None, tenant_tags=None):  # noqa: E501
        """VariableScopeValues - a model defined in Swagger"""  # noqa: E501

        self._environments = None
        self._machines = None
        self._actions = None
        self._roles = None
        self._channels = None
        self._tenant_tags = None
        self.discriminator = None

        if environments is not None:
            self.environments = environments
        if machines is not None:
            self.machines = machines
        if actions is not None:
            self.actions = actions
        if roles is not None:
            self.roles = roles
        if channels is not None:
            self.channels = channels
        if tenant_tags is not None:
            self.tenant_tags = tenant_tags

    @property
    def environments(self):
        """Gets the environments of this VariableScopeValues.  # noqa: E501


        :return: The environments of this VariableScopeValues.  # noqa: E501
        :rtype: list[ReferenceDataItem]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this VariableScopeValues.


        :param environments: The environments of this VariableScopeValues.  # noqa: E501
        :type: list[ReferenceDataItem]
        """

        self._environments = environments

    @property
    def machines(self):
        """Gets the machines of this VariableScopeValues.  # noqa: E501


        :return: The machines of this VariableScopeValues.  # noqa: E501
        :rtype: list[ReferenceDataItem]
        """
        return self._machines

    @machines.setter
    def machines(self, machines):
        """Sets the machines of this VariableScopeValues.


        :param machines: The machines of this VariableScopeValues.  # noqa: E501
        :type: list[ReferenceDataItem]
        """

        self._machines = machines

    @property
    def actions(self):
        """Gets the actions of this VariableScopeValues.  # noqa: E501


        :return: The actions of this VariableScopeValues.  # noqa: E501
        :rtype: list[ReferenceDataItem]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this VariableScopeValues.


        :param actions: The actions of this VariableScopeValues.  # noqa: E501
        :type: list[ReferenceDataItem]
        """

        self._actions = actions

    @property
    def roles(self):
        """Gets the roles of this VariableScopeValues.  # noqa: E501


        :return: The roles of this VariableScopeValues.  # noqa: E501
        :rtype: list[ReferenceDataItem]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this VariableScopeValues.


        :param roles: The roles of this VariableScopeValues.  # noqa: E501
        :type: list[ReferenceDataItem]
        """

        self._roles = roles

    @property
    def channels(self):
        """Gets the channels of this VariableScopeValues.  # noqa: E501


        :return: The channels of this VariableScopeValues.  # noqa: E501
        :rtype: list[ReferenceDataItem]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this VariableScopeValues.


        :param channels: The channels of this VariableScopeValues.  # noqa: E501
        :type: list[ReferenceDataItem]
        """

        self._channels = channels

    @property
    def tenant_tags(self):
        """Gets the tenant_tags of this VariableScopeValues.  # noqa: E501


        :return: The tenant_tags of this VariableScopeValues.  # noqa: E501
        :rtype: list[ReferenceDataItem]
        """
        return self._tenant_tags

    @tenant_tags.setter
    def tenant_tags(self, tenant_tags):
        """Sets the tenant_tags of this VariableScopeValues.


        :param tenant_tags: The tenant_tags of this VariableScopeValues.  # noqa: E501
        :type: list[ReferenceDataItem]
        """

        self._tenant_tags = tenant_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariableScopeValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableScopeValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
