# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MigrationPartialExportResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'package_id': 'str',
        'space_id': 'str',
        'package_version': 'str',
        'password': 'str',
        'projects': 'list[str]',
        'ignore_certificates': 'bool',
        'ignore_machines': 'bool',
        'ignore_deployments': 'bool',
        'ignore_tenants': 'bool',
        'include_task_logs': 'bool',
        'encrypt_package': 'bool',
        'destination_api_key': 'str',
        'destination_package_feed': 'str',
        'destination_package_feed_space_id': 'str',
        'success_callback_uri': 'str',
        'failure_callback_uri': 'str',
        'task_id': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'package_id': 'PackageId',
        'space_id': 'SpaceId',
        'package_version': 'PackageVersion',
        'password': 'Password',
        'projects': 'Projects',
        'ignore_certificates': 'IgnoreCertificates',
        'ignore_machines': 'IgnoreMachines',
        'ignore_deployments': 'IgnoreDeployments',
        'ignore_tenants': 'IgnoreTenants',
        'include_task_logs': 'IncludeTaskLogs',
        'encrypt_package': 'EncryptPackage',
        'destination_api_key': 'DestinationApiKey',
        'destination_package_feed': 'DestinationPackageFeed',
        'destination_package_feed_space_id': 'DestinationPackageFeedSpaceId',
        'success_callback_uri': 'SuccessCallbackUri',
        'failure_callback_uri': 'FailureCallbackUri',
        'task_id': 'TaskId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, package_id=None, space_id=None, package_version=None, password=None, projects=None, ignore_certificates=None, ignore_machines=None, ignore_deployments=None, ignore_tenants=None, include_task_logs=None, encrypt_package=None, destination_api_key=None, destination_package_feed=None, destination_package_feed_space_id=None, success_callback_uri=None, failure_callback_uri=None, task_id=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """MigrationPartialExportResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._package_id = None
        self._space_id = None
        self._package_version = None
        self._password = None
        self._projects = None
        self._ignore_certificates = None
        self._ignore_machines = None
        self._ignore_deployments = None
        self._ignore_tenants = None
        self._include_task_logs = None
        self._encrypt_package = None
        self._destination_api_key = None
        self._destination_package_feed = None
        self._destination_package_feed_space_id = None
        self._success_callback_uri = None
        self._failure_callback_uri = None
        self._task_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if package_id is not None:
            self.package_id = package_id
        if space_id is not None:
            self.space_id = space_id
        if package_version is not None:
            self.package_version = package_version
        if password is not None:
            self.password = password
        if projects is not None:
            self.projects = projects
        if ignore_certificates is not None:
            self.ignore_certificates = ignore_certificates
        if ignore_machines is not None:
            self.ignore_machines = ignore_machines
        if ignore_deployments is not None:
            self.ignore_deployments = ignore_deployments
        if ignore_tenants is not None:
            self.ignore_tenants = ignore_tenants
        if include_task_logs is not None:
            self.include_task_logs = include_task_logs
        if encrypt_package is not None:
            self.encrypt_package = encrypt_package
        if destination_api_key is not None:
            self.destination_api_key = destination_api_key
        if destination_package_feed is not None:
            self.destination_package_feed = destination_package_feed
        if destination_package_feed_space_id is not None:
            self.destination_package_feed_space_id = destination_package_feed_space_id
        if success_callback_uri is not None:
            self.success_callback_uri = success_callback_uri
        if failure_callback_uri is not None:
            self.failure_callback_uri = failure_callback_uri
        if task_id is not None:
            self.task_id = task_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this MigrationPartialExportResource.  # noqa: E501


        :return: The id of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationPartialExportResource.


        :param id: The id of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def package_id(self):
        """Gets the package_id of this MigrationPartialExportResource.  # noqa: E501


        :return: The package_id of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this MigrationPartialExportResource.


        :param package_id: The package_id of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._package_id = package_id

    @property
    def space_id(self):
        """Gets the space_id of this MigrationPartialExportResource.  # noqa: E501


        :return: The space_id of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this MigrationPartialExportResource.


        :param space_id: The space_id of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def package_version(self):
        """Gets the package_version of this MigrationPartialExportResource.  # noqa: E501


        :return: The package_version of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this MigrationPartialExportResource.


        :param package_version: The package_version of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._package_version = package_version

    @property
    def password(self):
        """Gets the password of this MigrationPartialExportResource.  # noqa: E501


        :return: The password of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MigrationPartialExportResource.


        :param password: The password of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def projects(self):
        """Gets the projects of this MigrationPartialExportResource.  # noqa: E501


        :return: The projects of this MigrationPartialExportResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this MigrationPartialExportResource.


        :param projects: The projects of this MigrationPartialExportResource.  # noqa: E501
        :type: list[str]
        """

        self._projects = projects

    @property
    def ignore_certificates(self):
        """Gets the ignore_certificates of this MigrationPartialExportResource.  # noqa: E501


        :return: The ignore_certificates of this MigrationPartialExportResource.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_certificates

    @ignore_certificates.setter
    def ignore_certificates(self, ignore_certificates):
        """Sets the ignore_certificates of this MigrationPartialExportResource.


        :param ignore_certificates: The ignore_certificates of this MigrationPartialExportResource.  # noqa: E501
        :type: bool
        """

        self._ignore_certificates = ignore_certificates

    @property
    def ignore_machines(self):
        """Gets the ignore_machines of this MigrationPartialExportResource.  # noqa: E501


        :return: The ignore_machines of this MigrationPartialExportResource.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_machines

    @ignore_machines.setter
    def ignore_machines(self, ignore_machines):
        """Sets the ignore_machines of this MigrationPartialExportResource.


        :param ignore_machines: The ignore_machines of this MigrationPartialExportResource.  # noqa: E501
        :type: bool
        """

        self._ignore_machines = ignore_machines

    @property
    def ignore_deployments(self):
        """Gets the ignore_deployments of this MigrationPartialExportResource.  # noqa: E501


        :return: The ignore_deployments of this MigrationPartialExportResource.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_deployments

    @ignore_deployments.setter
    def ignore_deployments(self, ignore_deployments):
        """Sets the ignore_deployments of this MigrationPartialExportResource.


        :param ignore_deployments: The ignore_deployments of this MigrationPartialExportResource.  # noqa: E501
        :type: bool
        """

        self._ignore_deployments = ignore_deployments

    @property
    def ignore_tenants(self):
        """Gets the ignore_tenants of this MigrationPartialExportResource.  # noqa: E501


        :return: The ignore_tenants of this MigrationPartialExportResource.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_tenants

    @ignore_tenants.setter
    def ignore_tenants(self, ignore_tenants):
        """Sets the ignore_tenants of this MigrationPartialExportResource.


        :param ignore_tenants: The ignore_tenants of this MigrationPartialExportResource.  # noqa: E501
        :type: bool
        """

        self._ignore_tenants = ignore_tenants

    @property
    def include_task_logs(self):
        """Gets the include_task_logs of this MigrationPartialExportResource.  # noqa: E501


        :return: The include_task_logs of this MigrationPartialExportResource.  # noqa: E501
        :rtype: bool
        """
        return self._include_task_logs

    @include_task_logs.setter
    def include_task_logs(self, include_task_logs):
        """Sets the include_task_logs of this MigrationPartialExportResource.


        :param include_task_logs: The include_task_logs of this MigrationPartialExportResource.  # noqa: E501
        :type: bool
        """

        self._include_task_logs = include_task_logs

    @property
    def encrypt_package(self):
        """Gets the encrypt_package of this MigrationPartialExportResource.  # noqa: E501


        :return: The encrypt_package of this MigrationPartialExportResource.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_package

    @encrypt_package.setter
    def encrypt_package(self, encrypt_package):
        """Sets the encrypt_package of this MigrationPartialExportResource.


        :param encrypt_package: The encrypt_package of this MigrationPartialExportResource.  # noqa: E501
        :type: bool
        """

        self._encrypt_package = encrypt_package

    @property
    def destination_api_key(self):
        """Gets the destination_api_key of this MigrationPartialExportResource.  # noqa: E501


        :return: The destination_api_key of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._destination_api_key

    @destination_api_key.setter
    def destination_api_key(self, destination_api_key):
        """Sets the destination_api_key of this MigrationPartialExportResource.


        :param destination_api_key: The destination_api_key of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._destination_api_key = destination_api_key

    @property
    def destination_package_feed(self):
        """Gets the destination_package_feed of this MigrationPartialExportResource.  # noqa: E501


        :return: The destination_package_feed of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._destination_package_feed

    @destination_package_feed.setter
    def destination_package_feed(self, destination_package_feed):
        """Sets the destination_package_feed of this MigrationPartialExportResource.


        :param destination_package_feed: The destination_package_feed of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._destination_package_feed = destination_package_feed

    @property
    def destination_package_feed_space_id(self):
        """Gets the destination_package_feed_space_id of this MigrationPartialExportResource.  # noqa: E501


        :return: The destination_package_feed_space_id of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._destination_package_feed_space_id

    @destination_package_feed_space_id.setter
    def destination_package_feed_space_id(self, destination_package_feed_space_id):
        """Sets the destination_package_feed_space_id of this MigrationPartialExportResource.


        :param destination_package_feed_space_id: The destination_package_feed_space_id of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._destination_package_feed_space_id = destination_package_feed_space_id

    @property
    def success_callback_uri(self):
        """Gets the success_callback_uri of this MigrationPartialExportResource.  # noqa: E501


        :return: The success_callback_uri of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._success_callback_uri

    @success_callback_uri.setter
    def success_callback_uri(self, success_callback_uri):
        """Sets the success_callback_uri of this MigrationPartialExportResource.


        :param success_callback_uri: The success_callback_uri of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._success_callback_uri = success_callback_uri

    @property
    def failure_callback_uri(self):
        """Gets the failure_callback_uri of this MigrationPartialExportResource.  # noqa: E501


        :return: The failure_callback_uri of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._failure_callback_uri

    @failure_callback_uri.setter
    def failure_callback_uri(self, failure_callback_uri):
        """Sets the failure_callback_uri of this MigrationPartialExportResource.


        :param failure_callback_uri: The failure_callback_uri of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._failure_callback_uri = failure_callback_uri

    @property
    def task_id(self):
        """Gets the task_id of this MigrationPartialExportResource.  # noqa: E501


        :return: The task_id of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this MigrationPartialExportResource.


        :param task_id: The task_id of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this MigrationPartialExportResource.  # noqa: E501


        :return: The last_modified_on of this MigrationPartialExportResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this MigrationPartialExportResource.


        :param last_modified_on: The last_modified_on of this MigrationPartialExportResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this MigrationPartialExportResource.  # noqa: E501


        :return: The last_modified_by of this MigrationPartialExportResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this MigrationPartialExportResource.


        :param last_modified_by: The last_modified_by of this MigrationPartialExportResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this MigrationPartialExportResource.  # noqa: E501


        :return: The links of this MigrationPartialExportResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MigrationPartialExportResource.


        :param links: The links of this MigrationPartialExportResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationPartialExportResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationPartialExportResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
