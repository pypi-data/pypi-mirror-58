# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from octopus_deploy_swagger_client.models.machine_cleanup_policy import MachineCleanupPolicy  # noqa: F401,E501
from octopus_deploy_swagger_client.models.machine_connectivity_policy import MachineConnectivityPolicy  # noqa: F401,E501
from octopus_deploy_swagger_client.models.machine_health_check_policy import MachineHealthCheckPolicy  # noqa: F401,E501
from octopus_deploy_swagger_client.models.machine_update_policy import MachineUpdatePolicy  # noqa: F401,E501


class MachinePolicyResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'space_id': 'str',
        'name': 'str',
        'description': 'str',
        'is_default': 'bool',
        'machine_health_check_policy': 'MachineHealthCheckPolicy',
        'machine_connectivity_policy': 'MachineConnectivityPolicy',
        'machine_cleanup_policy': 'MachineCleanupPolicy',
        'machine_update_policy': 'MachineUpdatePolicy',
        'polling_request_queue_timeout': 'str',
        'polling_request_maximum_message_processing_timeout': 'str',
        'connection_retry_sleep_interval': 'str',
        'connection_retry_count_limit': 'int',
        'connection_retry_time_limit': 'str',
        'connection_connect_timeout': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'space_id': 'SpaceId',
        'name': 'Name',
        'description': 'Description',
        'is_default': 'IsDefault',
        'machine_health_check_policy': 'MachineHealthCheckPolicy',
        'machine_connectivity_policy': 'MachineConnectivityPolicy',
        'machine_cleanup_policy': 'MachineCleanupPolicy',
        'machine_update_policy': 'MachineUpdatePolicy',
        'polling_request_queue_timeout': 'PollingRequestQueueTimeout',
        'polling_request_maximum_message_processing_timeout': 'PollingRequestMaximumMessageProcessingTimeout',
        'connection_retry_sleep_interval': 'ConnectionRetrySleepInterval',
        'connection_retry_count_limit': 'ConnectionRetryCountLimit',
        'connection_retry_time_limit': 'ConnectionRetryTimeLimit',
        'connection_connect_timeout': 'ConnectionConnectTimeout',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, space_id=None, name=None, description=None, is_default=None, machine_health_check_policy=None, machine_connectivity_policy=None, machine_cleanup_policy=None, machine_update_policy=None, polling_request_queue_timeout=None, polling_request_maximum_message_processing_timeout=None, connection_retry_sleep_interval=None, connection_retry_count_limit=None, connection_retry_time_limit=None, connection_connect_timeout=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """MachinePolicyResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._space_id = None
        self._name = None
        self._description = None
        self._is_default = None
        self._machine_health_check_policy = None
        self._machine_connectivity_policy = None
        self._machine_cleanup_policy = None
        self._machine_update_policy = None
        self._polling_request_queue_timeout = None
        self._polling_request_maximum_message_processing_timeout = None
        self._connection_retry_sleep_interval = None
        self._connection_retry_count_limit = None
        self._connection_retry_time_limit = None
        self._connection_connect_timeout = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if space_id is not None:
            self.space_id = space_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_default is not None:
            self.is_default = is_default
        if machine_health_check_policy is not None:
            self.machine_health_check_policy = machine_health_check_policy
        if machine_connectivity_policy is not None:
            self.machine_connectivity_policy = machine_connectivity_policy
        if machine_cleanup_policy is not None:
            self.machine_cleanup_policy = machine_cleanup_policy
        if machine_update_policy is not None:
            self.machine_update_policy = machine_update_policy
        if polling_request_queue_timeout is not None:
            self.polling_request_queue_timeout = polling_request_queue_timeout
        if polling_request_maximum_message_processing_timeout is not None:
            self.polling_request_maximum_message_processing_timeout = polling_request_maximum_message_processing_timeout
        if connection_retry_sleep_interval is not None:
            self.connection_retry_sleep_interval = connection_retry_sleep_interval
        if connection_retry_count_limit is not None:
            self.connection_retry_count_limit = connection_retry_count_limit
        if connection_retry_time_limit is not None:
            self.connection_retry_time_limit = connection_retry_time_limit
        if connection_connect_timeout is not None:
            self.connection_connect_timeout = connection_connect_timeout
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this MachinePolicyResource.  # noqa: E501


        :return: The id of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MachinePolicyResource.


        :param id: The id of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def space_id(self):
        """Gets the space_id of this MachinePolicyResource.  # noqa: E501


        :return: The space_id of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this MachinePolicyResource.


        :param space_id: The space_id of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def name(self):
        """Gets the name of this MachinePolicyResource.  # noqa: E501


        :return: The name of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MachinePolicyResource.


        :param name: The name of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MachinePolicyResource.  # noqa: E501


        :return: The description of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MachinePolicyResource.


        :param description: The description of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_default(self):
        """Gets the is_default of this MachinePolicyResource.  # noqa: E501


        :return: The is_default of this MachinePolicyResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this MachinePolicyResource.


        :param is_default: The is_default of this MachinePolicyResource.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def machine_health_check_policy(self):
        """Gets the machine_health_check_policy of this MachinePolicyResource.  # noqa: E501


        :return: The machine_health_check_policy of this MachinePolicyResource.  # noqa: E501
        :rtype: MachineHealthCheckPolicy
        """
        return self._machine_health_check_policy

    @machine_health_check_policy.setter
    def machine_health_check_policy(self, machine_health_check_policy):
        """Sets the machine_health_check_policy of this MachinePolicyResource.


        :param machine_health_check_policy: The machine_health_check_policy of this MachinePolicyResource.  # noqa: E501
        :type: MachineHealthCheckPolicy
        """

        self._machine_health_check_policy = machine_health_check_policy

    @property
    def machine_connectivity_policy(self):
        """Gets the machine_connectivity_policy of this MachinePolicyResource.  # noqa: E501


        :return: The machine_connectivity_policy of this MachinePolicyResource.  # noqa: E501
        :rtype: MachineConnectivityPolicy
        """
        return self._machine_connectivity_policy

    @machine_connectivity_policy.setter
    def machine_connectivity_policy(self, machine_connectivity_policy):
        """Sets the machine_connectivity_policy of this MachinePolicyResource.


        :param machine_connectivity_policy: The machine_connectivity_policy of this MachinePolicyResource.  # noqa: E501
        :type: MachineConnectivityPolicy
        """

        self._machine_connectivity_policy = machine_connectivity_policy

    @property
    def machine_cleanup_policy(self):
        """Gets the machine_cleanup_policy of this MachinePolicyResource.  # noqa: E501


        :return: The machine_cleanup_policy of this MachinePolicyResource.  # noqa: E501
        :rtype: MachineCleanupPolicy
        """
        return self._machine_cleanup_policy

    @machine_cleanup_policy.setter
    def machine_cleanup_policy(self, machine_cleanup_policy):
        """Sets the machine_cleanup_policy of this MachinePolicyResource.


        :param machine_cleanup_policy: The machine_cleanup_policy of this MachinePolicyResource.  # noqa: E501
        :type: MachineCleanupPolicy
        """

        self._machine_cleanup_policy = machine_cleanup_policy

    @property
    def machine_update_policy(self):
        """Gets the machine_update_policy of this MachinePolicyResource.  # noqa: E501


        :return: The machine_update_policy of this MachinePolicyResource.  # noqa: E501
        :rtype: MachineUpdatePolicy
        """
        return self._machine_update_policy

    @machine_update_policy.setter
    def machine_update_policy(self, machine_update_policy):
        """Sets the machine_update_policy of this MachinePolicyResource.


        :param machine_update_policy: The machine_update_policy of this MachinePolicyResource.  # noqa: E501
        :type: MachineUpdatePolicy
        """

        self._machine_update_policy = machine_update_policy

    @property
    def polling_request_queue_timeout(self):
        """Gets the polling_request_queue_timeout of this MachinePolicyResource.  # noqa: E501


        :return: The polling_request_queue_timeout of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._polling_request_queue_timeout

    @polling_request_queue_timeout.setter
    def polling_request_queue_timeout(self, polling_request_queue_timeout):
        """Sets the polling_request_queue_timeout of this MachinePolicyResource.


        :param polling_request_queue_timeout: The polling_request_queue_timeout of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._polling_request_queue_timeout = polling_request_queue_timeout

    @property
    def polling_request_maximum_message_processing_timeout(self):
        """Gets the polling_request_maximum_message_processing_timeout of this MachinePolicyResource.  # noqa: E501


        :return: The polling_request_maximum_message_processing_timeout of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._polling_request_maximum_message_processing_timeout

    @polling_request_maximum_message_processing_timeout.setter
    def polling_request_maximum_message_processing_timeout(self, polling_request_maximum_message_processing_timeout):
        """Sets the polling_request_maximum_message_processing_timeout of this MachinePolicyResource.


        :param polling_request_maximum_message_processing_timeout: The polling_request_maximum_message_processing_timeout of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._polling_request_maximum_message_processing_timeout = polling_request_maximum_message_processing_timeout

    @property
    def connection_retry_sleep_interval(self):
        """Gets the connection_retry_sleep_interval of this MachinePolicyResource.  # noqa: E501


        :return: The connection_retry_sleep_interval of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._connection_retry_sleep_interval

    @connection_retry_sleep_interval.setter
    def connection_retry_sleep_interval(self, connection_retry_sleep_interval):
        """Sets the connection_retry_sleep_interval of this MachinePolicyResource.


        :param connection_retry_sleep_interval: The connection_retry_sleep_interval of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._connection_retry_sleep_interval = connection_retry_sleep_interval

    @property
    def connection_retry_count_limit(self):
        """Gets the connection_retry_count_limit of this MachinePolicyResource.  # noqa: E501


        :return: The connection_retry_count_limit of this MachinePolicyResource.  # noqa: E501
        :rtype: int
        """
        return self._connection_retry_count_limit

    @connection_retry_count_limit.setter
    def connection_retry_count_limit(self, connection_retry_count_limit):
        """Sets the connection_retry_count_limit of this MachinePolicyResource.


        :param connection_retry_count_limit: The connection_retry_count_limit of this MachinePolicyResource.  # noqa: E501
        :type: int
        """

        self._connection_retry_count_limit = connection_retry_count_limit

    @property
    def connection_retry_time_limit(self):
        """Gets the connection_retry_time_limit of this MachinePolicyResource.  # noqa: E501


        :return: The connection_retry_time_limit of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._connection_retry_time_limit

    @connection_retry_time_limit.setter
    def connection_retry_time_limit(self, connection_retry_time_limit):
        """Sets the connection_retry_time_limit of this MachinePolicyResource.


        :param connection_retry_time_limit: The connection_retry_time_limit of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._connection_retry_time_limit = connection_retry_time_limit

    @property
    def connection_connect_timeout(self):
        """Gets the connection_connect_timeout of this MachinePolicyResource.  # noqa: E501


        :return: The connection_connect_timeout of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._connection_connect_timeout

    @connection_connect_timeout.setter
    def connection_connect_timeout(self, connection_connect_timeout):
        """Sets the connection_connect_timeout of this MachinePolicyResource.


        :param connection_connect_timeout: The connection_connect_timeout of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._connection_connect_timeout = connection_connect_timeout

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this MachinePolicyResource.  # noqa: E501


        :return: The last_modified_on of this MachinePolicyResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this MachinePolicyResource.


        :param last_modified_on: The last_modified_on of this MachinePolicyResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this MachinePolicyResource.  # noqa: E501


        :return: The last_modified_by of this MachinePolicyResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this MachinePolicyResource.


        :param last_modified_by: The last_modified_by of this MachinePolicyResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this MachinePolicyResource.  # noqa: E501


        :return: The links of this MachinePolicyResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MachinePolicyResource.


        :param links: The links of this MachinePolicyResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachinePolicyResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachinePolicyResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
