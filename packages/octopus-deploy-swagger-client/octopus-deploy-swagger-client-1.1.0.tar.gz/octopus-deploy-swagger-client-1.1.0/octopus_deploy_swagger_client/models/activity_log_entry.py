# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActivityLogEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'occurred_at': 'datetime',
        'category': 'str',
        'message_text': 'str',
        'detail': 'str'
    }

    attribute_map = {
        'occurred_at': 'OccurredAt',
        'category': 'Category',
        'message_text': 'MessageText',
        'detail': 'Detail'
    }

    def __init__(self, occurred_at=None, category=None, message_text=None, detail=None):  # noqa: E501
        """ActivityLogEntry - a model defined in Swagger"""  # noqa: E501

        self._occurred_at = None
        self._category = None
        self._message_text = None
        self._detail = None
        self.discriminator = None

        if occurred_at is not None:
            self.occurred_at = occurred_at
        if category is not None:
            self.category = category
        if message_text is not None:
            self.message_text = message_text
        if detail is not None:
            self.detail = detail

    @property
    def occurred_at(self):
        """Gets the occurred_at of this ActivityLogEntry.  # noqa: E501


        :return: The occurred_at of this ActivityLogEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this ActivityLogEntry.


        :param occurred_at: The occurred_at of this ActivityLogEntry.  # noqa: E501
        :type: datetime
        """

        self._occurred_at = occurred_at

    @property
    def category(self):
        """Gets the category of this ActivityLogEntry.  # noqa: E501


        :return: The category of this ActivityLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ActivityLogEntry.


        :param category: The category of this ActivityLogEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trace", "Verbose", "Info", "Wait", "Highlight", "Gap", "Alert", "Warning", "Error", "Fatal", "Planned", "Updated", "Finished", "Abandoned"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def message_text(self):
        """Gets the message_text of this ActivityLogEntry.  # noqa: E501


        :return: The message_text of this ActivityLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this ActivityLogEntry.


        :param message_text: The message_text of this ActivityLogEntry.  # noqa: E501
        :type: str
        """

        self._message_text = message_text

    @property
    def detail(self):
        """Gets the detail of this ActivityLogEntry.  # noqa: E501


        :return: The detail of this ActivityLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ActivityLogEntry.


        :param detail: The detail of this ActivityLogEntry.  # noqa: E501
        :type: str
        """

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityLogEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityLogEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
