# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MigrationImportResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'package_feed_space_id': 'str',
        'package_id': 'str',
        'package_version': 'str',
        'password': 'str',
        'is_encrypted_package': 'bool',
        'is_dry_run': 'bool',
        'overwrite_existing': 'bool',
        'delete_package_on_completion': 'bool',
        'success_callback_uri': 'str',
        'failure_callback_uri': 'str',
        'task_id': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'package_feed_space_id': 'PackageFeedSpaceId',
        'package_id': 'PackageId',
        'package_version': 'PackageVersion',
        'password': 'Password',
        'is_encrypted_package': 'IsEncryptedPackage',
        'is_dry_run': 'IsDryRun',
        'overwrite_existing': 'OverwriteExisting',
        'delete_package_on_completion': 'DeletePackageOnCompletion',
        'success_callback_uri': 'SuccessCallbackUri',
        'failure_callback_uri': 'FailureCallbackUri',
        'task_id': 'TaskId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, package_feed_space_id=None, package_id=None, package_version=None, password=None, is_encrypted_package=None, is_dry_run=None, overwrite_existing=None, delete_package_on_completion=None, success_callback_uri=None, failure_callback_uri=None, task_id=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """MigrationImportResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._package_feed_space_id = None
        self._package_id = None
        self._package_version = None
        self._password = None
        self._is_encrypted_package = None
        self._is_dry_run = None
        self._overwrite_existing = None
        self._delete_package_on_completion = None
        self._success_callback_uri = None
        self._failure_callback_uri = None
        self._task_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if package_feed_space_id is not None:
            self.package_feed_space_id = package_feed_space_id
        if package_id is not None:
            self.package_id = package_id
        if package_version is not None:
            self.package_version = package_version
        if password is not None:
            self.password = password
        if is_encrypted_package is not None:
            self.is_encrypted_package = is_encrypted_package
        if is_dry_run is not None:
            self.is_dry_run = is_dry_run
        if overwrite_existing is not None:
            self.overwrite_existing = overwrite_existing
        if delete_package_on_completion is not None:
            self.delete_package_on_completion = delete_package_on_completion
        if success_callback_uri is not None:
            self.success_callback_uri = success_callback_uri
        if failure_callback_uri is not None:
            self.failure_callback_uri = failure_callback_uri
        if task_id is not None:
            self.task_id = task_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this MigrationImportResource.  # noqa: E501


        :return: The id of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationImportResource.


        :param id: The id of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def package_feed_space_id(self):
        """Gets the package_feed_space_id of this MigrationImportResource.  # noqa: E501


        :return: The package_feed_space_id of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._package_feed_space_id

    @package_feed_space_id.setter
    def package_feed_space_id(self, package_feed_space_id):
        """Sets the package_feed_space_id of this MigrationImportResource.


        :param package_feed_space_id: The package_feed_space_id of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._package_feed_space_id = package_feed_space_id

    @property
    def package_id(self):
        """Gets the package_id of this MigrationImportResource.  # noqa: E501


        :return: The package_id of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this MigrationImportResource.


        :param package_id: The package_id of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._package_id = package_id

    @property
    def package_version(self):
        """Gets the package_version of this MigrationImportResource.  # noqa: E501


        :return: The package_version of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this MigrationImportResource.


        :param package_version: The package_version of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._package_version = package_version

    @property
    def password(self):
        """Gets the password of this MigrationImportResource.  # noqa: E501


        :return: The password of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MigrationImportResource.


        :param password: The password of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def is_encrypted_package(self):
        """Gets the is_encrypted_package of this MigrationImportResource.  # noqa: E501


        :return: The is_encrypted_package of this MigrationImportResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_encrypted_package

    @is_encrypted_package.setter
    def is_encrypted_package(self, is_encrypted_package):
        """Sets the is_encrypted_package of this MigrationImportResource.


        :param is_encrypted_package: The is_encrypted_package of this MigrationImportResource.  # noqa: E501
        :type: bool
        """

        self._is_encrypted_package = is_encrypted_package

    @property
    def is_dry_run(self):
        """Gets the is_dry_run of this MigrationImportResource.  # noqa: E501


        :return: The is_dry_run of this MigrationImportResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_dry_run

    @is_dry_run.setter
    def is_dry_run(self, is_dry_run):
        """Sets the is_dry_run of this MigrationImportResource.


        :param is_dry_run: The is_dry_run of this MigrationImportResource.  # noqa: E501
        :type: bool
        """

        self._is_dry_run = is_dry_run

    @property
    def overwrite_existing(self):
        """Gets the overwrite_existing of this MigrationImportResource.  # noqa: E501


        :return: The overwrite_existing of this MigrationImportResource.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite_existing

    @overwrite_existing.setter
    def overwrite_existing(self, overwrite_existing):
        """Sets the overwrite_existing of this MigrationImportResource.


        :param overwrite_existing: The overwrite_existing of this MigrationImportResource.  # noqa: E501
        :type: bool
        """

        self._overwrite_existing = overwrite_existing

    @property
    def delete_package_on_completion(self):
        """Gets the delete_package_on_completion of this MigrationImportResource.  # noqa: E501


        :return: The delete_package_on_completion of this MigrationImportResource.  # noqa: E501
        :rtype: bool
        """
        return self._delete_package_on_completion

    @delete_package_on_completion.setter
    def delete_package_on_completion(self, delete_package_on_completion):
        """Sets the delete_package_on_completion of this MigrationImportResource.


        :param delete_package_on_completion: The delete_package_on_completion of this MigrationImportResource.  # noqa: E501
        :type: bool
        """

        self._delete_package_on_completion = delete_package_on_completion

    @property
    def success_callback_uri(self):
        """Gets the success_callback_uri of this MigrationImportResource.  # noqa: E501


        :return: The success_callback_uri of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._success_callback_uri

    @success_callback_uri.setter
    def success_callback_uri(self, success_callback_uri):
        """Sets the success_callback_uri of this MigrationImportResource.


        :param success_callback_uri: The success_callback_uri of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._success_callback_uri = success_callback_uri

    @property
    def failure_callback_uri(self):
        """Gets the failure_callback_uri of this MigrationImportResource.  # noqa: E501


        :return: The failure_callback_uri of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._failure_callback_uri

    @failure_callback_uri.setter
    def failure_callback_uri(self, failure_callback_uri):
        """Sets the failure_callback_uri of this MigrationImportResource.


        :param failure_callback_uri: The failure_callback_uri of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._failure_callback_uri = failure_callback_uri

    @property
    def task_id(self):
        """Gets the task_id of this MigrationImportResource.  # noqa: E501


        :return: The task_id of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this MigrationImportResource.


        :param task_id: The task_id of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this MigrationImportResource.  # noqa: E501


        :return: The last_modified_on of this MigrationImportResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this MigrationImportResource.


        :param last_modified_on: The last_modified_on of this MigrationImportResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this MigrationImportResource.  # noqa: E501


        :return: The last_modified_by of this MigrationImportResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this MigrationImportResource.


        :param last_modified_by: The last_modified_by of this MigrationImportResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this MigrationImportResource.  # noqa: E501


        :return: The links of this MigrationImportResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MigrationImportResource.


        :param links: The links of this MigrationImportResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationImportResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationImportResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
