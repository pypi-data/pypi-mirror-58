# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from octopus_deploy_swagger_client.models.release_package_metadata_resource import ReleasePackageMetadataResource  # noqa: F401,E501
from octopus_deploy_swagger_client.models.selected_package import SelectedPackage  # noqa: F401,E501


class ReleaseResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'assembled': 'datetime',
        'release_notes': 'str',
        'project_id': 'str',
        'channel_id': 'str',
        'project_variable_set_snapshot_id': 'str',
        'library_variable_set_snapshot_ids': 'list[str]',
        'project_deployment_process_snapshot_id': 'str',
        'selected_packages': 'list[SelectedPackage]',
        'package_metadata': 'list[ReleasePackageMetadataResource]',
        'space_id': 'str',
        'ignore_channel_rules': 'bool',
        'version': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'assembled': 'Assembled',
        'release_notes': 'ReleaseNotes',
        'project_id': 'ProjectId',
        'channel_id': 'ChannelId',
        'project_variable_set_snapshot_id': 'ProjectVariableSetSnapshotId',
        'library_variable_set_snapshot_ids': 'LibraryVariableSetSnapshotIds',
        'project_deployment_process_snapshot_id': 'ProjectDeploymentProcessSnapshotId',
        'selected_packages': 'SelectedPackages',
        'package_metadata': 'PackageMetadata',
        'space_id': 'SpaceId',
        'ignore_channel_rules': 'IgnoreChannelRules',
        'version': 'Version',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, assembled=None, release_notes=None, project_id=None, channel_id=None, project_variable_set_snapshot_id=None, library_variable_set_snapshot_ids=None, project_deployment_process_snapshot_id=None, selected_packages=None, package_metadata=None, space_id=None, ignore_channel_rules=None, version=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """ReleaseResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._assembled = None
        self._release_notes = None
        self._project_id = None
        self._channel_id = None
        self._project_variable_set_snapshot_id = None
        self._library_variable_set_snapshot_ids = None
        self._project_deployment_process_snapshot_id = None
        self._selected_packages = None
        self._package_metadata = None
        self._space_id = None
        self._ignore_channel_rules = None
        self._version = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if assembled is not None:
            self.assembled = assembled
        if release_notes is not None:
            self.release_notes = release_notes
        if project_id is not None:
            self.project_id = project_id
        if channel_id is not None:
            self.channel_id = channel_id
        if project_variable_set_snapshot_id is not None:
            self.project_variable_set_snapshot_id = project_variable_set_snapshot_id
        if library_variable_set_snapshot_ids is not None:
            self.library_variable_set_snapshot_ids = library_variable_set_snapshot_ids
        if project_deployment_process_snapshot_id is not None:
            self.project_deployment_process_snapshot_id = project_deployment_process_snapshot_id
        if selected_packages is not None:
            self.selected_packages = selected_packages
        if package_metadata is not None:
            self.package_metadata = package_metadata
        if space_id is not None:
            self.space_id = space_id
        if ignore_channel_rules is not None:
            self.ignore_channel_rules = ignore_channel_rules
        self.version = version
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this ReleaseResource.  # noqa: E501


        :return: The id of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseResource.


        :param id: The id of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def assembled(self):
        """Gets the assembled of this ReleaseResource.  # noqa: E501


        :return: The assembled of this ReleaseResource.  # noqa: E501
        :rtype: datetime
        """
        return self._assembled

    @assembled.setter
    def assembled(self, assembled):
        """Sets the assembled of this ReleaseResource.


        :param assembled: The assembled of this ReleaseResource.  # noqa: E501
        :type: datetime
        """

        self._assembled = assembled

    @property
    def release_notes(self):
        """Gets the release_notes of this ReleaseResource.  # noqa: E501


        :return: The release_notes of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this ReleaseResource.


        :param release_notes: The release_notes of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._release_notes = release_notes

    @property
    def project_id(self):
        """Gets the project_id of this ReleaseResource.  # noqa: E501


        :return: The project_id of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ReleaseResource.


        :param project_id: The project_id of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def channel_id(self):
        """Gets the channel_id of this ReleaseResource.  # noqa: E501


        :return: The channel_id of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ReleaseResource.


        :param channel_id: The channel_id of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._channel_id = channel_id

    @property
    def project_variable_set_snapshot_id(self):
        """Gets the project_variable_set_snapshot_id of this ReleaseResource.  # noqa: E501


        :return: The project_variable_set_snapshot_id of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._project_variable_set_snapshot_id

    @project_variable_set_snapshot_id.setter
    def project_variable_set_snapshot_id(self, project_variable_set_snapshot_id):
        """Sets the project_variable_set_snapshot_id of this ReleaseResource.


        :param project_variable_set_snapshot_id: The project_variable_set_snapshot_id of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._project_variable_set_snapshot_id = project_variable_set_snapshot_id

    @property
    def library_variable_set_snapshot_ids(self):
        """Gets the library_variable_set_snapshot_ids of this ReleaseResource.  # noqa: E501


        :return: The library_variable_set_snapshot_ids of this ReleaseResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._library_variable_set_snapshot_ids

    @library_variable_set_snapshot_ids.setter
    def library_variable_set_snapshot_ids(self, library_variable_set_snapshot_ids):
        """Sets the library_variable_set_snapshot_ids of this ReleaseResource.


        :param library_variable_set_snapshot_ids: The library_variable_set_snapshot_ids of this ReleaseResource.  # noqa: E501
        :type: list[str]
        """

        self._library_variable_set_snapshot_ids = library_variable_set_snapshot_ids

    @property
    def project_deployment_process_snapshot_id(self):
        """Gets the project_deployment_process_snapshot_id of this ReleaseResource.  # noqa: E501


        :return: The project_deployment_process_snapshot_id of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._project_deployment_process_snapshot_id

    @project_deployment_process_snapshot_id.setter
    def project_deployment_process_snapshot_id(self, project_deployment_process_snapshot_id):
        """Sets the project_deployment_process_snapshot_id of this ReleaseResource.


        :param project_deployment_process_snapshot_id: The project_deployment_process_snapshot_id of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._project_deployment_process_snapshot_id = project_deployment_process_snapshot_id

    @property
    def selected_packages(self):
        """Gets the selected_packages of this ReleaseResource.  # noqa: E501


        :return: The selected_packages of this ReleaseResource.  # noqa: E501
        :rtype: list[SelectedPackage]
        """
        return self._selected_packages

    @selected_packages.setter
    def selected_packages(self, selected_packages):
        """Sets the selected_packages of this ReleaseResource.


        :param selected_packages: The selected_packages of this ReleaseResource.  # noqa: E501
        :type: list[SelectedPackage]
        """

        self._selected_packages = selected_packages

    @property
    def package_metadata(self):
        """Gets the package_metadata of this ReleaseResource.  # noqa: E501


        :return: The package_metadata of this ReleaseResource.  # noqa: E501
        :rtype: list[ReleasePackageMetadataResource]
        """
        return self._package_metadata

    @package_metadata.setter
    def package_metadata(self, package_metadata):
        """Sets the package_metadata of this ReleaseResource.


        :param package_metadata: The package_metadata of this ReleaseResource.  # noqa: E501
        :type: list[ReleasePackageMetadataResource]
        """

        self._package_metadata = package_metadata

    @property
    def space_id(self):
        """Gets the space_id of this ReleaseResource.  # noqa: E501


        :return: The space_id of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this ReleaseResource.


        :param space_id: The space_id of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def ignore_channel_rules(self):
        """Gets the ignore_channel_rules of this ReleaseResource.  # noqa: E501


        :return: The ignore_channel_rules of this ReleaseResource.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_channel_rules

    @ignore_channel_rules.setter
    def ignore_channel_rules(self, ignore_channel_rules):
        """Sets the ignore_channel_rules of this ReleaseResource.


        :param ignore_channel_rules: The ignore_channel_rules of this ReleaseResource.  # noqa: E501
        :type: bool
        """

        self._ignore_channel_rules = ignore_channel_rules

    @property
    def version(self):
        """Gets the version of this ReleaseResource.  # noqa: E501


        :return: The version of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseResource.


        :param version: The version of this ReleaseResource.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and len(version) > 349:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `349`")  # noqa: E501
        if version is not None and len(version) < 0:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `0`")  # noqa: E501

        self._version = version

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this ReleaseResource.  # noqa: E501


        :return: The last_modified_on of this ReleaseResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this ReleaseResource.


        :param last_modified_on: The last_modified_on of this ReleaseResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this ReleaseResource.  # noqa: E501


        :return: The last_modified_by of this ReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this ReleaseResource.


        :param last_modified_by: The last_modified_by of this ReleaseResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this ReleaseResource.  # noqa: E501


        :return: The links of this ReleaseResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReleaseResource.


        :param links: The links of this ReleaseResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
