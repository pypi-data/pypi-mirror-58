# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from octopus_deploy_swagger_client.models.event_reference import EventReference  # noqa: F401,E501


class EventResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'related_document_ids': 'list[str]',
        'category': 'str',
        'user_id': 'str',
        'username': 'str',
        'is_service': 'bool',
        'identity_established_with': 'str',
        'user_agent': 'str',
        'occurred': 'datetime',
        'message': 'str',
        'message_html': 'str',
        'message_references': 'list[EventReference]',
        'comments': 'str',
        'details': 'str',
        'space_id': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'related_document_ids': 'RelatedDocumentIds',
        'category': 'Category',
        'user_id': 'UserId',
        'username': 'Username',
        'is_service': 'IsService',
        'identity_established_with': 'IdentityEstablishedWith',
        'user_agent': 'UserAgent',
        'occurred': 'Occurred',
        'message': 'Message',
        'message_html': 'MessageHtml',
        'message_references': 'MessageReferences',
        'comments': 'Comments',
        'details': 'Details',
        'space_id': 'SpaceId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, related_document_ids=None, category=None, user_id=None, username=None, is_service=None, identity_established_with=None, user_agent=None, occurred=None, message=None, message_html=None, message_references=None, comments=None, details=None, space_id=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """EventResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._related_document_ids = None
        self._category = None
        self._user_id = None
        self._username = None
        self._is_service = None
        self._identity_established_with = None
        self._user_agent = None
        self._occurred = None
        self._message = None
        self._message_html = None
        self._message_references = None
        self._comments = None
        self._details = None
        self._space_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if related_document_ids is not None:
            self.related_document_ids = related_document_ids
        if category is not None:
            self.category = category
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if is_service is not None:
            self.is_service = is_service
        if identity_established_with is not None:
            self.identity_established_with = identity_established_with
        if user_agent is not None:
            self.user_agent = user_agent
        if occurred is not None:
            self.occurred = occurred
        if message is not None:
            self.message = message
        if message_html is not None:
            self.message_html = message_html
        if message_references is not None:
            self.message_references = message_references
        if comments is not None:
            self.comments = comments
        if details is not None:
            self.details = details
        if space_id is not None:
            self.space_id = space_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this EventResource.  # noqa: E501


        :return: The id of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventResource.


        :param id: The id of this EventResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def related_document_ids(self):
        """Gets the related_document_ids of this EventResource.  # noqa: E501


        :return: The related_document_ids of this EventResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._related_document_ids

    @related_document_ids.setter
    def related_document_ids(self, related_document_ids):
        """Sets the related_document_ids of this EventResource.


        :param related_document_ids: The related_document_ids of this EventResource.  # noqa: E501
        :type: list[str]
        """

        self._related_document_ids = related_document_ids

    @property
    def category(self):
        """Gets the category of this EventResource.  # noqa: E501


        :return: The category of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventResource.


        :param category: The category of this EventResource.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def user_id(self):
        """Gets the user_id of this EventResource.  # noqa: E501


        :return: The user_id of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EventResource.


        :param user_id: The user_id of this EventResource.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this EventResource.  # noqa: E501


        :return: The username of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EventResource.


        :param username: The username of this EventResource.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def is_service(self):
        """Gets the is_service of this EventResource.  # noqa: E501


        :return: The is_service of this EventResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_service

    @is_service.setter
    def is_service(self, is_service):
        """Sets the is_service of this EventResource.


        :param is_service: The is_service of this EventResource.  # noqa: E501
        :type: bool
        """

        self._is_service = is_service

    @property
    def identity_established_with(self):
        """Gets the identity_established_with of this EventResource.  # noqa: E501


        :return: The identity_established_with of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._identity_established_with

    @identity_established_with.setter
    def identity_established_with(self, identity_established_with):
        """Sets the identity_established_with of this EventResource.


        :param identity_established_with: The identity_established_with of this EventResource.  # noqa: E501
        :type: str
        """

        self._identity_established_with = identity_established_with

    @property
    def user_agent(self):
        """Gets the user_agent of this EventResource.  # noqa: E501


        :return: The user_agent of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this EventResource.


        :param user_agent: The user_agent of this EventResource.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def occurred(self):
        """Gets the occurred of this EventResource.  # noqa: E501


        :return: The occurred of this EventResource.  # noqa: E501
        :rtype: datetime
        """
        return self._occurred

    @occurred.setter
    def occurred(self, occurred):
        """Sets the occurred of this EventResource.


        :param occurred: The occurred of this EventResource.  # noqa: E501
        :type: datetime
        """

        self._occurred = occurred

    @property
    def message(self):
        """Gets the message of this EventResource.  # noqa: E501


        :return: The message of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventResource.


        :param message: The message of this EventResource.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def message_html(self):
        """Gets the message_html of this EventResource.  # noqa: E501


        :return: The message_html of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._message_html

    @message_html.setter
    def message_html(self, message_html):
        """Sets the message_html of this EventResource.


        :param message_html: The message_html of this EventResource.  # noqa: E501
        :type: str
        """

        self._message_html = message_html

    @property
    def message_references(self):
        """Gets the message_references of this EventResource.  # noqa: E501


        :return: The message_references of this EventResource.  # noqa: E501
        :rtype: list[EventReference]
        """
        return self._message_references

    @message_references.setter
    def message_references(self, message_references):
        """Sets the message_references of this EventResource.


        :param message_references: The message_references of this EventResource.  # noqa: E501
        :type: list[EventReference]
        """

        self._message_references = message_references

    @property
    def comments(self):
        """Gets the comments of this EventResource.  # noqa: E501


        :return: The comments of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EventResource.


        :param comments: The comments of this EventResource.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def details(self):
        """Gets the details of this EventResource.  # noqa: E501


        :return: The details of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EventResource.


        :param details: The details of this EventResource.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def space_id(self):
        """Gets the space_id of this EventResource.  # noqa: E501


        :return: The space_id of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this EventResource.


        :param space_id: The space_id of this EventResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this EventResource.  # noqa: E501


        :return: The last_modified_on of this EventResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this EventResource.


        :param last_modified_on: The last_modified_on of this EventResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this EventResource.  # noqa: E501


        :return: The last_modified_by of this EventResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this EventResource.


        :param last_modified_by: The last_modified_by of this EventResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this EventResource.  # noqa: E501


        :return: The links of this EventResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EventResource.


        :param links: The links of this EventResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
