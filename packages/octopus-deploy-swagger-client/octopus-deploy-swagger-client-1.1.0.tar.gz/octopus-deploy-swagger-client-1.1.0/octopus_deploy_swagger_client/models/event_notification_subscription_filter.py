# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventNotificationSubscriptionFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'users': 'list[str]',
        'projects': 'list[str]',
        'project_groups': 'list[str]',
        'environments': 'list[str]',
        'event_groups': 'list[str]',
        'event_categories': 'list[str]',
        'event_agents': 'list[str]',
        'tenants': 'list[str]',
        'tags': 'list[str]',
        'document_types': 'list[str]'
    }

    attribute_map = {
        'users': 'Users',
        'projects': 'Projects',
        'project_groups': 'ProjectGroups',
        'environments': 'Environments',
        'event_groups': 'EventGroups',
        'event_categories': 'EventCategories',
        'event_agents': 'EventAgents',
        'tenants': 'Tenants',
        'tags': 'Tags',
        'document_types': 'DocumentTypes'
    }

    def __init__(self, users=None, projects=None, project_groups=None, environments=None, event_groups=None, event_categories=None, event_agents=None, tenants=None, tags=None, document_types=None):  # noqa: E501
        """EventNotificationSubscriptionFilter - a model defined in Swagger"""  # noqa: E501

        self._users = None
        self._projects = None
        self._project_groups = None
        self._environments = None
        self._event_groups = None
        self._event_categories = None
        self._event_agents = None
        self._tenants = None
        self._tags = None
        self._document_types = None
        self.discriminator = None

        if users is not None:
            self.users = users
        if projects is not None:
            self.projects = projects
        if project_groups is not None:
            self.project_groups = project_groups
        if environments is not None:
            self.environments = environments
        if event_groups is not None:
            self.event_groups = event_groups
        if event_categories is not None:
            self.event_categories = event_categories
        if event_agents is not None:
            self.event_agents = event_agents
        if tenants is not None:
            self.tenants = tenants
        if tags is not None:
            self.tags = tags
        if document_types is not None:
            self.document_types = document_types

    @property
    def users(self):
        """Gets the users of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The users of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this EventNotificationSubscriptionFilter.


        :param users: The users of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def projects(self):
        """Gets the projects of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The projects of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this EventNotificationSubscriptionFilter.


        :param projects: The projects of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._projects = projects

    @property
    def project_groups(self):
        """Gets the project_groups of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The project_groups of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_groups

    @project_groups.setter
    def project_groups(self, project_groups):
        """Sets the project_groups of this EventNotificationSubscriptionFilter.


        :param project_groups: The project_groups of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._project_groups = project_groups

    @property
    def environments(self):
        """Gets the environments of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The environments of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this EventNotificationSubscriptionFilter.


        :param environments: The environments of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._environments = environments

    @property
    def event_groups(self):
        """Gets the event_groups of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The event_groups of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_groups

    @event_groups.setter
    def event_groups(self, event_groups):
        """Sets the event_groups of this EventNotificationSubscriptionFilter.


        :param event_groups: The event_groups of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._event_groups = event_groups

    @property
    def event_categories(self):
        """Gets the event_categories of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The event_categories of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_categories

    @event_categories.setter
    def event_categories(self, event_categories):
        """Sets the event_categories of this EventNotificationSubscriptionFilter.


        :param event_categories: The event_categories of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._event_categories = event_categories

    @property
    def event_agents(self):
        """Gets the event_agents of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The event_agents of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_agents

    @event_agents.setter
    def event_agents(self, event_agents):
        """Sets the event_agents of this EventNotificationSubscriptionFilter.


        :param event_agents: The event_agents of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._event_agents = event_agents

    @property
    def tenants(self):
        """Gets the tenants of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The tenants of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenants

    @tenants.setter
    def tenants(self, tenants):
        """Sets the tenants of this EventNotificationSubscriptionFilter.


        :param tenants: The tenants of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._tenants = tenants

    @property
    def tags(self):
        """Gets the tags of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The tags of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EventNotificationSubscriptionFilter.


        :param tags: The tags of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def document_types(self):
        """Gets the document_types of this EventNotificationSubscriptionFilter.  # noqa: E501


        :return: The document_types of this EventNotificationSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._document_types

    @document_types.setter
    def document_types(self, document_types):
        """Sets the document_types of this EventNotificationSubscriptionFilter.


        :param document_types: The document_types of this EventNotificationSubscriptionFilter.  # noqa: E501
        :type: list[str]
        """

        self._document_types = document_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventNotificationSubscriptionFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventNotificationSubscriptionFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
