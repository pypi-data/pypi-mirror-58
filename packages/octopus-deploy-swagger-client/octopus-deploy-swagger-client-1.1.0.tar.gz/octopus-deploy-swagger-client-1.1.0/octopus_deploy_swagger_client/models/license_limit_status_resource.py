# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.6.7+Branch.tags-2019.6.7.Sha.aa18dc6809953218c66f57eff7d26481d9b23d6a
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LicenseLimitStatusResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'effective_limit': 'int',
        'effective_limit_description': 'str',
        'is_unlimited': 'bool',
        'current_usage': 'int',
        'message': 'str',
        'disposition': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'effective_limit': 'EffectiveLimit',
        'effective_limit_description': 'EffectiveLimitDescription',
        'is_unlimited': 'IsUnlimited',
        'current_usage': 'CurrentUsage',
        'message': 'Message',
        'disposition': 'Disposition'
    }

    def __init__(self, name=None, effective_limit=None, effective_limit_description=None, is_unlimited=None, current_usage=None, message=None, disposition=None):  # noqa: E501
        """LicenseLimitStatusResource - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._effective_limit = None
        self._effective_limit_description = None
        self._is_unlimited = None
        self._current_usage = None
        self._message = None
        self._disposition = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if effective_limit is not None:
            self.effective_limit = effective_limit
        if effective_limit_description is not None:
            self.effective_limit_description = effective_limit_description
        if is_unlimited is not None:
            self.is_unlimited = is_unlimited
        if current_usage is not None:
            self.current_usage = current_usage
        if message is not None:
            self.message = message
        if disposition is not None:
            self.disposition = disposition

    @property
    def name(self):
        """Gets the name of this LicenseLimitStatusResource.  # noqa: E501


        :return: The name of this LicenseLimitStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LicenseLimitStatusResource.


        :param name: The name of this LicenseLimitStatusResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def effective_limit(self):
        """Gets the effective_limit of this LicenseLimitStatusResource.  # noqa: E501


        :return: The effective_limit of this LicenseLimitStatusResource.  # noqa: E501
        :rtype: int
        """
        return self._effective_limit

    @effective_limit.setter
    def effective_limit(self, effective_limit):
        """Sets the effective_limit of this LicenseLimitStatusResource.


        :param effective_limit: The effective_limit of this LicenseLimitStatusResource.  # noqa: E501
        :type: int
        """

        self._effective_limit = effective_limit

    @property
    def effective_limit_description(self):
        """Gets the effective_limit_description of this LicenseLimitStatusResource.  # noqa: E501


        :return: The effective_limit_description of this LicenseLimitStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._effective_limit_description

    @effective_limit_description.setter
    def effective_limit_description(self, effective_limit_description):
        """Sets the effective_limit_description of this LicenseLimitStatusResource.


        :param effective_limit_description: The effective_limit_description of this LicenseLimitStatusResource.  # noqa: E501
        :type: str
        """

        self._effective_limit_description = effective_limit_description

    @property
    def is_unlimited(self):
        """Gets the is_unlimited of this LicenseLimitStatusResource.  # noqa: E501


        :return: The is_unlimited of this LicenseLimitStatusResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_unlimited

    @is_unlimited.setter
    def is_unlimited(self, is_unlimited):
        """Sets the is_unlimited of this LicenseLimitStatusResource.


        :param is_unlimited: The is_unlimited of this LicenseLimitStatusResource.  # noqa: E501
        :type: bool
        """

        self._is_unlimited = is_unlimited

    @property
    def current_usage(self):
        """Gets the current_usage of this LicenseLimitStatusResource.  # noqa: E501


        :return: The current_usage of this LicenseLimitStatusResource.  # noqa: E501
        :rtype: int
        """
        return self._current_usage

    @current_usage.setter
    def current_usage(self, current_usage):
        """Sets the current_usage of this LicenseLimitStatusResource.


        :param current_usage: The current_usage of this LicenseLimitStatusResource.  # noqa: E501
        :type: int
        """

        self._current_usage = current_usage

    @property
    def message(self):
        """Gets the message of this LicenseLimitStatusResource.  # noqa: E501


        :return: The message of this LicenseLimitStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LicenseLimitStatusResource.


        :param message: The message of this LicenseLimitStatusResource.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def disposition(self):
        """Gets the disposition of this LicenseLimitStatusResource.  # noqa: E501


        :return: The disposition of this LicenseLimitStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition):
        """Sets the disposition of this LicenseLimitStatusResource.


        :param disposition: The disposition of this LicenseLimitStatusResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["Information", "Warning", "Error"]  # noqa: E501
        if disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `disposition` ({0}), must be one of {1}"  # noqa: E501
                .format(disposition, allowed_values)
            )

        self._disposition = disposition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseLimitStatusResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseLimitStatusResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
