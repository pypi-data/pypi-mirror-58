# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['returns',
 'returns._generated',
 'returns.contrib',
 'returns.contrib.mypy',
 'returns.primitives']

package_data = \
{'': ['*']}

install_requires = \
['typing-extensions>=3.7,<4.0']

setup_kwargs = {
    'name': 'returns',
    'version': '0.12.0',
    'description': 'Make your functions return something meaningful, typed, and safe!',
    'long_description': '[![Returns logo](https://raw.githubusercontent.com/dry-python/brand/master/logo/returns.png)](https://github.com/dry-python/returns)\n\n-----\n\n[![Build Status](https://travis-ci.com/dry-python/returns.svg?branch=master)](https://travis-ci.com/dry-python/returns)\n[![Coverage Status](https://coveralls.io/repos/github/dry-python/returns/badge.svg?branch=master)](https://coveralls.io/github/dry-python/returns?branch=master)\n[![Documentation Status](https://readthedocs.org/projects/returns/badge/?version=latest)](https://returns.readthedocs.io/en/latest/?badge=latest)\n[![Python Version](https://img.shields.io/pypi/pyversions/returns.svg)](https://pypi.org/project/returns/)\n[![wemake-python-styleguide](https://img.shields.io/badge/style-wemake-000000.svg)](https://github.com/wemake-services/wemake-python-styleguide)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\n-----\n\nMake your functions return something meaningful, typed, and safe!\n\n\n## Features\n\n- Provides a bunch of primitives to write declarative business logic\n- Enforces better architecture\n- Fully typed with annotations and checked with `mypy`, [PEP561 compatible](https://www.python.org/dev/peps/pep-0561/)\n- Has a bunch of helpers for better composition\n- Pythonic and pleasant to write and to read (!)\n- Support functions and coroutines, framework agnostic\n- Easy to start: has lots of docs, tests, and tutorials\n\n\n## Installation\n\n```bash\npip install returns\n```\n\nYou might also want to [configure](https://returns.readthedocs.io/en/latest/pages/container.html#type-safety)\n`mypy` correctly and install our plugin\nto fix [this existing issue](https://github.com/python/mypy/issues/3157):\n\n```ini\n# In setup.cfg or mypy.ini:\n[mypy]\nplugins =\n  returns.contrib.mypy.decorator_plugin\n```\n\nWe also recommend to use the same `mypy` settings [we use](https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/mypy.toml).\n\nMake sure you know how to get started, [check out our docs](https://returns.readthedocs.io/en/latest/)!\n\n\n## Contents\n\n- [Maybe container](#maybe-container) that allows you to write `None`-free code\n- [Result container](#result-container) that let\'s you to get rid of exceptions\n- [IO marker](#io-marker) that marks all impure operations and structures them\n\n\n## Maybe container\n\n`None` is called the [worst mistake in the history of Computer Science](https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/).\n\nSo, what can we do to check for `None` in our programs?\nYou can use `Optional` and write a lot of `if some is not None:` conditions.\nBut, having them here and there makes your code unreadable.\n\nOr you can use\n[Maybe](https://returns.readthedocs.io/en/latest/pages/maybe.html) container!\nIt consists of `Some` and `Nothing` types,\nrepresenting existing state and empty (instead of `None`) state respectively.\n\n```python\nfrom typing import Optional\nfrom returns.maybe import Maybe, maybe\n\n@maybe  # decorator to convert existing Optional[int] to Maybe[int]\ndef bad_function() -> Optional[int]:\n    ...\n\nmaybe_result: Maybe[float] = bad_function().map(\n    lambda number: number / 2,\n)\n# => Maybe will return Some[float] only if there\'s a non-None value\n#    Otherwise, will return Nothing\n```\n\nYou can be sure that `.map()` method won\'t be called for `Nothing`.\nForget about `None`-related errors forever!\n\n\n## Result container\n\nPlease, make sure that you are also aware of\n[Railway Oriented Programming](https://fsharpforfunandprofit.com/rop/).\n\n### Straight-forward approach\n\nConsider this code that you can find in **any** `python` project.\n\n```python\nimport requests\n\ndef fetch_user_profile(user_id: int) -> \'UserProfile\':\n    """Fetches UserProfile dict from foreign API."""\n    response = requests.get(\'/api/users/{0}\'.format(user_id))\n    response.raise_for_status()\n    return response.json()\n```\n\nSeems legit, does not it?\nIt also seems like a pretty straight forward code to test.\nAll you need is to mock `requests.get` to return the structure you need.\n\nBut, there are hidden problems in this tiny code sample\nthat are almost impossible to spot at the first glance.\n\n### Hidden problems\n\nLet\'s have a look at the exact same code,\nbut with the all hidden problems explained.\n\n```python\nimport requests\n\ndef fetch_user_profile(user_id: int) -> \'UserProfile\':\n    """Fetches UserProfile dict from foreign API."""\n    response = requests.get(\'/api/users/{0}\'.format(user_id))\n\n    # What if we try to find user that does not exist?\n    # Or network will go down? Or the server will return 500?\n    # In this case the next line will fail with an exception.\n    # We need to handle all possible errors in this function\n    # and do not return corrupt data to consumers.\n    response.raise_for_status()\n\n    # What if we have received invalid JSON?\n    # Next line will raise an exception!\n    return response.json()\n```\n\nNow, all (probably all?) problems are clear.\nHow can we be sure that this function will be safe\nto use inside our complex business logic?\n\nWe really can not be sure!\nWe will have to create **lots** of `try` and `except` cases\njust to catch the expected exceptions.\n\nOur code will become complex and unreadable with all this mess!\n\n### Pipe example\n\n```python\nimport requests\nfrom returns.result import Result, safe\nfrom returns.pipeline import pipe\nfrom returns.functions import box\n\ndef fetch_user_profile(user_id: int) -> Result[\'UserProfile\', Exception]:\n    """Fetches `UserProfile` TypedDict from foreign API."""\n    return pipe(\n        _make_request,\n        box(_parse_json),\n    )(user_id)\n\n@safe\ndef _make_request(user_id: int) -> requests.Response:\n    response = requests.get(\'/api/users/{0}\'.format(user_id))\n    response.raise_for_status()\n    return response\n\n@safe\ndef _parse_json(response: requests.Response) -> \'UserProfile\':\n    return response.json()\n```\n\nNow we have a clean and a safe and declarative way\nto express our business need.\nWe start from making a request, that might fail at any moment.\nThen parsing the response if the request was successful.\nAnd then return the result.\nIt all happens smoothly due to [pipe](https://returns.readthedocs.io/en/latest/pages/pipeline.html#pipe) function.\n\nWe also use [box](https://returns.readthedocs.io/en/latest/pages/functions.html#box) for handy composition.\n\nNow, instead of returning a regular value\nit returns a wrapped value inside a special container\nthanks to the\n[@safe](https://returns.readthedocs.io/en/latest/pages/result.html#safe)\ndecorator.\n\nIt will return [Success[Response] or Failure[Exception]](https://returns.readthedocs.io/en/latest/pages/result.html).\nAnd will never throw this exception at us.\n\nAnd we can clearly see all result patterns\nthat might happen in this particular case:\n- `Success[UserProfile]`\n- `Failure[Exception]`\n\nFor more complex cases there\'s a [@pipeline](https://returns.readthedocs.io/en/latest/pages/functions.html#returns.functions.pipeline)\ndecorator to help you with the composition.\n\nAnd we can work with each of them precisely.\nIt is a good practice to create `Enum` classes or `Union` sum type\nwith all the possible errors.\n\n\n## IO marker\n\nBut is that all we can improve?\nLet\'s look at `FetchUserProfile` from another angle.\nAll its methods look like regular ones:\nit is impossible to tell whether they are pure or impure from the first sight.\n\nIt leads to a very important consequence:\n*we start to mix pure and impure code together*.\nWe should not do that!\n\nWhen these two concepts are mixed\nwe suffer really bad when testing or reusing it.\nAlmost everything should be pure by default.\nAnd we should explicitly mark impure parts of the program.\n\n### Explicit IO\n\nLet\'s refactor it to make our\n[IO](https://returns.readthedocs.io/en/latest/pages/io.html) explicit!\n\n```python\nimport requests\nfrom returns.io import IO, impure\nfrom returns.result import Result, safe\nfrom returns.pipeline import pipe\nfrom returns.functions import box\n\ndef fetch_user_profile(user_id: int) -> Result[\'UserProfile\', Exception]:\n    """Fetches `UserProfile` TypedDict from foreign API."""\n    return pipe(\n        _make_request,\n        # after box: def (Result) -> Result\n        # after IO.lift: def (IO[Result]) -> IO[Result]\n        IO.lift(box(_parse_json)),\n    )(user_id)\n\n@impure\n@safe\ndef _make_request(user_id: int) -> requests.Response:\n    response = requests.get(\'/api/users/{0}\'.format(user_id))\n    response.raise_for_status()\n    return response\n\n@safe\ndef _parse_json(response: requests.Response) -> \'UserProfile\':\n    return response.json()\n```\n\nNow we have explicit markers where the `IO` did happen\nand these markers cannot be removed.\n\nWhenever we access `FetchUserProfile` we now know\nthat it does `IO` and might fail.\nSo, we act accordingly!\n\n\n## More!\n\nWant more? [Go to the docs!](https://returns.readthedocs.io)\nOr read these articles:\n\n- [Python exceptions considered an anti-pattern](https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern)\n- [Enforcing Single Responsibility Principle in Python](https://sobolevn.me/2019/03/enforcing-srp)\n\nDo you have an article to submit? Feel free to open a pull request!\n',
    'author': 'sobolevn',
    'author_email': 'mail@sobolevn.me',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://returns.readthedocs.io',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<3.8',
}


setup(**setup_kwargs)
