"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,useless-super-delegation

import typing

import sqlalchemy
from sqlalchemy import orm

from open_alchemy import models


class DivisionDict(typing.TypedDict, total=False):
    """TypedDict for properties that are not required."""

    id: typing.Optional[int]
    name: typing.Optional[str]
    employees: typing.Sequence["EmployeeDict"]


class Division(models.Division):  # type: ignore
    """SQLAlchemy model."""

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: typing.Optional[int]
    name: typing.Optional[str]
    employees: typing.Sequence["Employee"]

    def __init__(
        self,
        id: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        employees: typing.Optional[typing.Sequence["Employee"]] = None,
    ) -> None:
        """Construct."""
        kwargs = {}
        if id is not None:
            kwargs["id"] = id
        if name is not None:
            kwargs["name"] = name
        if employees is not None:
            kwargs["employees"] = employees

        super().__init__(**kwargs)

    @classmethod
    def from_dict(
        cls,
        id: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        employees: typing.Optional[typing.Sequence["EmployeeDict"]] = None,
    ) -> "Division":
        """Construct from a dictionary (eg. a POST payload)."""
        kwargs = {}
        if id is not None:
            kwargs["id"] = id
        if name is not None:
            kwargs["name"] = name
        if employees is not None:
            kwargs["employees"] = employees

        return super().from_dict(**kwargs)

    def to_dict(self) -> DivisionDict:
        """Convert to a dictionary (eg. to send back for a GET request)."""
        return super().to_dict()


class EmployeeDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    name: str


class Employee(models.Employee):  # type: ignore
    """SQLAlchemy model."""

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: int
    name: str

    def __init__(self, id: int, name: str) -> None:
        """Construct."""
        kwargs = {"id": id, "name": name}

        super().__init__(**kwargs)

    @classmethod
    def from_dict(cls, id: int, name: str) -> "Employee":
        """Construct from a dictionary (eg. a POST payload)."""
        kwargs = {"id": id, "name": name}

        return super().from_dict(**kwargs)

    def to_dict(self) -> EmployeeDict:
        """Convert to a dictionary (eg. to send back for a GET request)."""
        return super().to_dict()
