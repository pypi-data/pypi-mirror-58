Metadata-Version: 2.1
Name: pysetenv
Version: 1.0.0
Summary: A simple tool to set environment variables before running a command
Home-page: https://github.com/jimporter/pysetenv
Author: Jim Porter
Author-email: itsjimporter@gmail.com
License: BSD
Keywords: set environment variables
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Utilities
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Provides-Extra: dev
Requires-Dist: coverage ; extra == 'dev'
Requires-Dist: flake8 (>=3.0) ; extra == 'dev'
Requires-Dist: pypandoc ; extra == 'dev'
Provides-Extra: test
Requires-Dist: coverage ; extra == 'test'
Requires-Dist: flake8 (>=3.0) ; extra == 'test'

pysetenv
========

**pysetenv** is a simple Python-based program to allow users to set
environment variables before executing a command, similar to the POSIX
```env`` <https://pubs.opengroup.org/onlinepubs/9699919799/utilities/env.html>`__
command.

Why?
----

pysetenv is designed as a support package to help authors of other
Python packages create command-line strings like you'd expect from
``sh`` or the ``env`` command. Generally, pysetenv will only be
installed on Windows systems, with POSIX systems using ``sh`` or
``env``. For example, in your ``setup.py``, you would write:

.. code:: python

    setup(
        # ...
        install_requires=['pysetenv;platform_system=="Windows"'],
    )

Then somewhere in your code, you could call pysetenv:

.. code:: python

    subprocess.call(['pysetenv', ...])

Command-line reference
----------------------

Usage: ``pysetenv [OPTION]... [NAME=VALUE]... [COMMAND [ARG]...]``

pysetenv supports a subset of common options available to various
implementations of ``env``. It executes ``COMMAND`` with any supplied
arguments (``ARG``) after modifying the environment as specified by the
previous arguments. Any arguments of the form ``NAME=VALUE`` will set an
environment variable ``NAME`` to the value of ``VALUE``. If ``COMMAND``
is not specified, pysetenv will print the resulting environment instead.

In addition, the following options are supported:

-  ``-i``: Ignore any environment variables inherited by this process
-  ``-u NAME``: Unset the environment variable ``NAME``
-  ``-h``, ``--help``: Show a help message and exit
-  ``--version``: Show the current version and exit

As an extension to the ``env`` command, the options above can be
separated from the section for defining environment variables and/or the
command to run with ``--``.

License
-------

This project is licensed under the `BSD 3-clause license <LICENSE>`__.


