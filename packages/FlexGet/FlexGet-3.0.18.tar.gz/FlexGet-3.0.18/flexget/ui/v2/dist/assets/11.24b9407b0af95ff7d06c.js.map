{"version":3,"sources":["webpack:///./src/common/TextField/index.tsx","webpack:///./src/core/auth/LoginCard.tsx","webpack:///./src/common/WaveSpinner.tsx","webpack:///./src/core/auth/Splash.tsx","webpack:///./src/core/auth/styles.ts","webpack:///./src/core/auth/Login.tsx"],"names":["TextField","name","props","useField","field","touched","error","helperText","card","css","theme","breakpoints","up","ErrorMessage","palette","content","LoginCard","setLoggedIn","useContainer","AuthContainer","useFlexgetAPI","Method","Post","loading","login","Card","initialValues","username","password","onSubmit","values","actions","async","ok","resetForm","CardContent","message","id","label","autoFocus","type","CardActions","Button","fullWidth","disabled","stretchDelay","keyframes","Spinner","Rect1","primary","Rect2","Rect3","Rect4","Rect5","WaveSpinner","Logo","headerImage","SplashScreen","LoginPage","location","from","state","pathname","loggedIn","loginState","postLogin","versionState","getVersion","useEffect","to","Splash","req","errorStatus"],"mappings":"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","file":"11.24b9407b0af95ff7d06c.js","sourcesContent":["import React from 'react';\nimport BaseTextField from '@material-ui/core/TextField';\nimport { useField } from 'formik';\nconst TextField = ({ name, ...props }) => {\n    const [field, { touched, error }] = useField(name);\n    return <BaseTextField error={touched && !!error} helperText={error} {...field} {...props}/>;\n};\nexport default TextField;\n","import React from 'react';\nimport { Form, Formik } from 'formik';\nimport { useContainer } from 'unstated-next';\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { CardContent, Card, Button, CardActions } from '@material-ui/core';\nimport { useFlexgetAPI } from 'core/api';\nimport { Method } from 'utils/fetch';\nimport TextField from 'common/TextField';\nimport theme from 'core/theme';\nimport { AuthContainer } from './container';\nconst card = css `\n  max-width: 40rem;\n  margin: 0 1rem;\n  ${theme.breakpoints.up('sm')} {\n    margin: 0 auto;\n  }\n`;\nconst field = css `\n  padding-bottom: 1rem;\n`;\nconst ErrorMessage = styled.div `\n  color: ${theme.palette.error[500]};\n  text-align: center;\n  padding: 1rem;\n`;\nconst content = css `\n  display: flex;\n  flex-direction: column;\n`;\nconst LoginCard = () => {\n    const initialValues = { username: 'flexget', password: '' };\n    const [, setLoggedIn] = useContainer(AuthContainer);\n    const [{ error, loading }, login] = useFlexgetAPI('/auth/login', Method.Post);\n    return (<Card css={card}>\n      <Formik initialValues={initialValues} onSubmit={async (values, actions) => {\n        const resp = await login(values);\n        if (resp.ok) {\n            actions.resetForm();\n            setLoggedIn(true);\n        }\n    }}>\n        <Form>\n          <CardContent css={content}>\n            <ErrorMessage>{error?.message}</ErrorMessage>\n            <TextField css={field} name=\"username\" id=\"username\" label=\"Username\" autoFocus/>\n            <TextField css={field} name=\"password\" id=\"password\" label=\"Password\" type=\"Password\"/>\n          </CardContent>\n          <CardActions>\n            <Button type=\"submit\" fullWidth disabled={loading}>\n              Login\n            </Button>\n          </CardActions>\n        </Form>\n      </Formik>\n    </Card>);\n};\nexport default LoginCard;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { keyframes } from '@emotion/core';\nimport theme from 'core/theme';\nconst stretchDelay = keyframes `\n  0%, 40%, 100% {\n    transform: scaleY(0.4);\n  }\n\n  20% {\n    transform: scaleY(1.0);\n  }\n`;\nconst Spinner = styled.div `\n  margin: 10rem auto;\n  width: 5rem;\n  height: 4rem;\n  text-align: center;\n  font-size: 1rem;\n`;\nconst Rect1 = styled.div `\n  background-color: ${theme.palette.primary[500]};\n  height: 100%;\n  width: 0.6rem;\n  display: inline-block;\n  margin: 0.1rem;\n  animation: ${stretchDelay} 1.2s infinite ease-in-out;\n`;\nconst Rect2 = styled(Rect1) `\n  animation-delay: -1.1s;\n`;\nconst Rect3 = styled(Rect1) `\n  animation-delay: -1s;\n`;\nconst Rect4 = styled(Rect1) `\n  animation-delay: -0.9s;\n`;\nconst Rect5 = styled(Rect1) `\n  animation-delay: -0.8s;\n`;\nconst WaveSpinner = () => (<Spinner>\n    <Rect1 />\n    <Rect2 />\n    <Rect3 />\n    <Rect4 />\n    <Rect5 />\n  </Spinner>);\nexport default WaveSpinner;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport WaveSpinner from 'common/WaveSpinner';\nimport headerImage from 'images/header.png';\nimport theme from 'core/theme';\nexport const Logo = styled.div `\n  background: transparent url(${headerImage}) no-repeat center;\n  min-height: 9rem;\n  background-size: 100% auto;\n  margin: 0 1rem;\n  ${theme.breakpoints.up('sm')} {\n    background-size: auto;\n  }\n`;\nconst SplashScreen = () => (<div>\n    <Logo />\n    <WaveSpinner />\n  </div>);\nexport default SplashScreen;\n","import styled from '@emotion/styled';\nimport theme from 'core/theme';\nimport headerImage from 'images/header.png';\nexport const Logo = styled.div `\n  background: transparent url(${headerImage}) no-repeat center;\n  min-height: 9rem;\n  background-size: 100% auto;\n  margin: 0 1rem;\n  ${theme.breakpoints.up('sm')} {\n    background-size: auto;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useContainer } from 'unstated-next';\nimport { Redirect } from 'react-router-dom';\nimport { AuthContainer } from 'core/auth/container';\nimport { useFlexgetAPI } from 'core/api';\nimport { Method } from 'utils/fetch';\nimport LoginCard from './LoginCard';\nimport SplashScreen from './Splash';\nimport { Logo } from './styles';\nconst Card = LoginCard;\nconst LoginPage = ({ location }) => {\n    const { from } = location?.state || { from: { pathname: '/' } };\n    const [loggedIn, setLoggedIn] = useContainer(AuthContainer);\n    const [loginState, postLogin] = useFlexgetAPI('/auth/login', Method.Post);\n    const [versionState, getVersion] = useFlexgetAPI('/server/version');\n    const login = async (req) => {\n        const resp = await postLogin(req);\n        if (resp.ok) {\n            setLoggedIn(true);\n        }\n    };\n    useEffect(() => {\n        const fn = async () => {\n            const resp = await getVersion();\n            if (resp.ok) {\n                setLoggedIn(true);\n            }\n        };\n        fn();\n    }, [getVersion, setLoggedIn]);\n    if (loggedIn) {\n        return <Redirect to={from}/>;\n    }\n    if (versionState.loading) {\n        return <SplashScreen />;\n    }\n    return (<div>\n      <Logo />\n      <Card onSubmit={login} errorStatus={loginState.error}/>\n    </div>);\n};\nexport default LoginPage;\n"],"sourceRoot":""}