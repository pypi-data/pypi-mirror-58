{"version":3,"sources":["webpack:///./src/common/inputs/formik/TextField.tsx","webpack:///./src/plugins/log/Header.tsx","webpack:///./src/plugins/log/types.ts","webpack:///./src/utils/keys.ts","webpack:///./src/plugins/log/LogTable.tsx","webpack:///./src/plugins/log/Log.tsx"],"names":["TextField","name","props","useField","field","touched","error","helperText","LogLevel","wrapper","theme","css","breakpoints","up","filterWrapper","filterField","Header","readyState","connect","disconnect","clear","options","setOptions","useState","anchorEl","setAnchorEl","useMemo","ReadyState","Open","onClick","Icon","Stop","label","heading","Connecting","CircularProgress","disabled","Closed","PlayArrow","handleMenuClose","useCallback","undefined","handleMenuOpen","event","currentTarget","handleKeyPress","which","target","value","initialValues","onSubmit","values","Typography","variant","color","FilterList","id","inputProps","onKeyPress","IconButton","MoreVert","Menu","open","onClose","MenuItem","type","ListItemIcon","ClearAll","hex","palette","table","LogTable","messages","useTheme","cssString","cssMap","Error","Critical","Warning","height","actualWidth","width","actualHeight","rowCount","length","rowHeight","headerHeight","rowGetter","index","rowClassName","logLevel","dataKey","flexGrow","LogPage","useInjectPageTitle","useMergeState","lines","query","queryString","stringify","useFlexgetStream","elevation"],"mappings":"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","file":"13.906fa1b75d05c99dc8b3.js","sourcesContent":["import React from 'react';\nimport BaseTextField from '@material-ui/core/TextField';\nimport { useField } from 'formik';\nconst TextField = ({ name, ...props }) => {\n    const [field, { touched, error }] = useField(name);\n    return <BaseTextField error={touched && !!error} helperText={error} {...field} {...props}/>;\n};\nexport default TextField;\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { Formik } from 'formik';\nimport { Typography, IconButton, Menu, MenuItem, ListItemIcon, CircularProgress, } from '@material-ui/core';\nimport { css } from '@emotion/core';\nimport { Spacer } from 'common/styles';\nimport TextField from 'common/inputs/formik/TextField';\nimport { PlayArrow, Stop, FilterList, MoreVert, ClearAll } from '@material-ui/icons';\nimport { ENTER_KEY } from 'utils/keys';\nimport { ReadyState } from 'core/api';\nexport const wrapper = (theme) => css `\n  display: block;\n  ${theme.breakpoints.up('sm')} {\n    display: flex;\n    align-items: baseline;\n  }\n`;\nexport const filterWrapper = css `\n  display: flex;\n  align-items: center;\n`;\nexport const filterField = css `\n  margin-left: 1rem;\n  margin-right: 1rem;\n`;\nconst Header = ({ readyState, connect, disconnect, clear, options, setOptions }) => {\n    const [anchorEl, setAnchorEl] = useState();\n    const helperText = 'Supports operators and, or, (), and \"str\"';\n    const stateMap = useMemo(() => ({\n        [ReadyState.Open]: {\n            onClick: disconnect,\n            Icon: Stop,\n            label: 'Stop',\n            heading: 'Streaming',\n        },\n        [ReadyState.Connecting]: {\n            label: 'Start',\n            Icon: CircularProgress,\n            heading: 'Connecting',\n            disabled: true,\n        },\n        [ReadyState.Closed]: {\n            onClick: connect,\n            Icon: PlayArrow,\n            label: 'Start',\n            heading: 'Disconnected',\n        },\n    }), [connect, disconnect]);\n    const { onClick, Icon, heading, label, disabled = false } = stateMap[readyState];\n    const handleMenuClose = useCallback(() => setAnchorEl(undefined), []);\n    const handleMenuOpen = useCallback((event) => setAnchorEl(event.currentTarget), []);\n    const handleKeyPress = useCallback(event => {\n        if (event.which === ENTER_KEY) {\n            setOptions({\n                [event.target.name]: event.target.value,\n            });\n        }\n    }, [setOptions]);\n    return (<Formik initialValues={options} onSubmit={values => setOptions(values)}>\n      <div css={wrapper}>\n        <div>\n          <Typography variant=\"h6\">Server Log</Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            {heading}\n          </Typography>\n        </div>\n        <Spacer />\n        <div css={filterWrapper}>\n          <FilterList />\n          <TextField css={filterField} id=\"query\" name=\"query\" label=\"Filter\" inputProps={{\n        onKeyPress: handleKeyPress,\n    }} helperText={helperText}/>\n          <IconButton onClick={handleMenuOpen}>\n            <MoreVert />\n          </IconButton>\n        </div>\n        <Menu id=\"log-menu\" anchorEl={anchorEl} open={!!anchorEl} onClose={handleMenuClose}>\n          <MenuItem>\n            <TextField id=\"lines\" name=\"lines\" label=\"Max Lines\" type=\"number\" inputProps={{\n        onKeyPress: handleKeyPress,\n    }}/>\n          </MenuItem>\n          <MenuItem onClick={clear}>\n            <ListItemIcon>\n              <ClearAll />\n            </ListItemIcon>\n            Clear\n          </MenuItem>\n          <MenuItem onClick={onClick} disabled={disabled}>\n            <ListItemIcon>\n              <Icon />\n            </ListItemIcon>\n            {label}\n          </MenuItem>\n        </Menu>\n      </div>\n    </Formik>);\n};\nexport default Header;\n","export var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"Trace\"] = \"TRACE\";\n    LogLevel[\"Debug\"] = \"DEBUG\";\n    LogLevel[\"Info\"] = \"INFO\";\n    LogLevel[\"Success\"] = \"SUCCESS\";\n    LogLevel[\"Warning\"] = \"WARNING\";\n    LogLevel[\"Error\"] = \"ERROR\";\n    LogLevel[\"Critical\"] = \"CRITICAL\";\n})(LogLevel || (LogLevel = {}));\n","export const ENTER_KEY = 13;\n","import React from 'react';\nimport { AutoSizer, Column, Table } from 'react-virtualized';\nimport 'react-virtualized/styles.css';\nimport { css, ClassNames } from '@emotion/core';\nimport { useTheme } from '@material-ui/core';\nimport { LogLevel } from 'plugins/log/types';\nconst color = (theme, hex) => theme.palette.type === 'light'\n    ? css `\n        background-color: ${hex};\n      `\n    : css `\n        color: ${hex};\n      `;\nconst table = css `\n  font-size: 1rem;\n`;\nconst LogTable = ({ messages }) => {\n    const theme = useTheme();\n    return (<ClassNames>\n      {({ css: cssString }) => {\n        const cssMap = {\n            [LogLevel.Error]: cssString(color(theme, '#f2dede')),\n            [LogLevel.Critical]: cssString(color(theme, '#f2dede')),\n            [LogLevel.Warning]: cssString(color(theme, '#fcf8e3')),\n        };\n        return (<AutoSizer>\n            {({ height, width }) => {\n            let actualWidth = width;\n            let actualHeight = height;\n            if (process.env.NODE_ENV === 'test') {\n                actualWidth = window.innerWidth;\n                actualHeight = window.innerHeight;\n            }\n            return (<Table css={table} rowCount={messages.length} rowHeight={20} headerHeight={50} width={actualWidth} height={actualHeight} rowGetter={({ index }) => messages[index]} rowClassName={({ index }) => cssMap[messages[index]?.logLevel]}>\n                  <Column label=\"Time\" dataKey=\"timestamp\" width={100}/>\n                  <Column label=\"Level\" dataKey=\"logLevel\" width={100}/>\n                  <Column label=\"Plugin\" dataKey=\"plugin\" width={100}/>\n                  <Column label=\"Task\" dataKey=\"task\" width={100}/>\n                  <Column label=\"Message\" dataKey=\"message\" width={100} flexGrow={1}/>\n                </Table>);\n        }}\n          </AutoSizer>);\n    }}\n    </ClassNames>);\n};\nexport default LogTable;\n","import React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport { css } from '@emotion/core';\nimport { PaperWrapper } from 'common/styles';\nimport { useInjectPageTitle } from 'core/layout/AppBar/hooks';\nimport { useFlexgetStream } from 'core/api';\nimport { useMergeState } from 'utils/hooks';\nimport { stringify } from 'qs';\nimport Header from './Header';\nimport LogTable from './LogTable';\nconst wrapper = css `\n  width: initial;\n  flex: 1;\n`;\nconst LogPage = () => {\n    useInjectPageTitle('Log');\n    const [options, setOptions] = useMergeState({\n        lines: 200,\n        query: '',\n    });\n    const queryString = stringify(options);\n    const [{ readyState, messages }, { connect, disconnect, clear }] = useFlexgetStream(`/server/log?${queryString}`);\n    return (<PaperWrapper elevation={4}>\n      <Header readyState={readyState} connect={connect} disconnect={disconnect} clear={clear} options={options} setOptions={setOptions}/>\n      <div css={wrapper}>\n        <LogTable messages={messages}/>\n      </div>\n    </PaperWrapper>);\n};\nexport default hot(LogPage);\n"],"sourceRoot":""}