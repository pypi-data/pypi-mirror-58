import numpy as np

import logging
log = logging.getLogger(__name__)


hgr_offsets = np.asarray([
    0x0000, 0x0400, 0x0800, 0x0c00, 0x1000, 0x1400, 0x1800, 0x1c00,
    0x0080, 0x0480, 0x0880, 0x0c80, 0x1080, 0x1480, 0x1880, 0x1c80,
    0x0100, 0x0500, 0x0900, 0x0d00, 0x1100, 0x1500, 0x1900, 0x1d00,
    0x0180, 0x0580, 0x0980, 0x0d80, 0x1180, 0x1580, 0x1980, 0x1d80,
    0x0200, 0x0600, 0x0a00, 0x0e00, 0x1200, 0x1600, 0x1a00, 0x1e00,
    0x0280, 0x0680, 0x0a80, 0x0e80, 0x1280, 0x1680, 0x1a80, 0x1e80,
    0x0300, 0x0700, 0x0b00, 0x0f00, 0x1300, 0x1700, 0x1b00, 0x1f00,
    0x0380, 0x0780, 0x0b80, 0x0f80, 0x1380, 0x1780, 0x1b80, 0x1f80,
    0x0028, 0x0428, 0x0828, 0x0c28, 0x1028, 0x1428, 0x1828, 0x1c28,
    0x00a8, 0x04a8, 0x08a8, 0x0ca8, 0x10a8, 0x14a8, 0x18a8, 0x1ca8,
    0x0128, 0x0528, 0x0928, 0x0d28, 0x1128, 0x1528, 0x1928, 0x1d28,
    0x01a8, 0x05a8, 0x09a8, 0x0da8, 0x11a8, 0x15a8, 0x19a8, 0x1da8,
    0x0228, 0x0628, 0x0a28, 0x0e28, 0x1228, 0x1628, 0x1a28, 0x1e28,
    0x02a8, 0x06a8, 0x0aa8, 0x0ea8, 0x12a8, 0x16a8, 0x1aa8, 0x1ea8,
    0x0328, 0x0728, 0x0b28, 0x0f28, 0x1328, 0x1728, 0x1b28, 0x1f28,
    0x03a8, 0x07a8, 0x0ba8, 0x0fa8, 0x13a8, 0x17a8, 0x1ba8, 0x1fa8,
    0x0050, 0x0450, 0x0850, 0x0c50, 0x1050, 0x1450, 0x1850, 0x1c50,
    0x00d0, 0x04d0, 0x08d0, 0x0cd0, 0x10d0, 0x14d0, 0x18d0, 0x1cd0,
    0x0150, 0x0550, 0x0950, 0x0d50, 0x1150, 0x1550, 0x1950, 0x1d50,
    0x01d0, 0x05d0, 0x09d0, 0x0dd0, 0x11d0, 0x15d0, 0x19d0, 0x1dd0,
    0x0250, 0x0650, 0x0a50, 0x0e50, 0x1250, 0x1650, 0x1a50, 0x1e50,
    0x02d0, 0x06d0, 0x0ad0, 0x0ed0, 0x12d0, 0x16d0, 0x1ad0, 0x1ed0,
    0x0350, 0x0750, 0x0b50, 0x0f50, 0x1350, 0x1750, 0x1b50, 0x1f50,
    0x03d0, 0x07d0, 0x0bd0, 0x0fd0, 0x13d0, 0x17d0, 0x1bd0, 0x1fd0
], dtype=np.uint16)

hgr_row_order = np.asarray([
    0, 24, 48, 72, 96, 120, 144, 168,
    3, 27, 51, 75, 99, 123, 147, 171,
    6, 30, 54, 78, 102, 126, 150, 174,
    9, 33, 57, 81, 105, 129, 153, 177,
    12, 36, 60, 84, 108, 132, 156, 180,
    15, 39, 63, 87, 111, 135, 159, 183,
    18, 42, 66, 90, 114, 138, 162, 186,
    21, 45, 69, 93, 117, 141, 165, 189,
    1, 25, 49, 73, 97, 121, 145, 169,
    4, 28, 52, 76, 100, 124, 148, 172,
    7, 31, 55, 79, 103, 127, 151, 175,
    10, 34, 58, 82, 106, 130, 154, 178,
    13, 37, 61, 85, 109, 133, 157, 181,
    16, 40, 64, 88, 112, 136, 160, 184,
    19, 43, 67, 91, 115, 139, 163, 187,
    22, 46, 70, 94, 118, 142, 166, 190,
    2, 26, 50, 74, 98, 122, 146, 170,
    5, 29, 53, 77, 101, 125, 149, 173,
    8, 32, 56, 80, 104, 128, 152, 176,
    11, 35, 59, 83, 107, 131, 155, 179,
    14, 38, 62, 86, 110, 134, 158, 182,
    17, 41, 65, 89, 113, 137, 161, 185,
    20, 44, 68, 92, 116, 140, 164, 188,
    23, 47, 71, 95, 119, 143, 167, 191
], dtype=np.uint16)

hgr_byte_order = None

gr_offsets = hgr_offsets[::8]

gr_row_order = hgr_row_order[::8]

gr_byte_order = None

byte_to_14_pixels = np.asarray([
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    ], dtype=np.uint8)


def to_560_bw_pixels(data40, pixels560):
    log.debug(f"to_560_bw_pixels: incoming {data40}")
    pixels560[:] = byte_to_14_pixels[data40].reshape(-1)


def to_560_pixels(data40):
    subset_count = 14 * len(data40)
    pixels560 = np.empty(subset_count, dtype=np.uint8)
    to_560_bw_pixels(data40, pixels560)
    rgb = np.empty([1, subset_count, 3], dtype=np.uint8)
    rgb[0,:,0] = pixels560 * 255
    rgb[0,:,1] = pixels560 * 255
    rgb[0,:,2] = pixels560 * 255
    return rgb


def hires_data_view(data):
    if len(data) < 8192:
        subset = np.zeros(8192, dtype=np.uint8)
        subset[0:len(data)] = data
    else:
        subset = data[0:8192]

    view = subset.reshape((64,128))[:,:120].reshape((192,40))

    # but this is in linear order; need the row swap. So, have to use fancy
    # indexing
    return view[hgr_row_order].reshape(-1)


def hires_byte_order(num_bytes):
    global hgr_byte_order

    if hgr_byte_order is None:
        a = (np.arange(192 * 40, dtype=np.uint16) % 40).reshape((192, 40))
        a[:] += np.repeat(hgr_offsets, 40).reshape((192, 40))
        hgr_byte_order = a.reshape(-1)

    # If the number of bytes is less than 8192, the final byte is repeated as
    # many times as necessary.
    if num_bytes < 1:
        byte_order = np.empty(0, dtype=np.uint8)
    elif num_bytes < 8192:
        byte_order = hgr_byte_order.copy()
        b = byte_order >= num_bytes
        byte_order[b] = num_bytes - 1
    else:
        byte_order = hgr_byte_order

    return byte_order


def lores_data_view(data):
    if len(data) < 0x400:
        subset = np.zeros(0x400, dtype=np.uint8)
        subset[0:len(data)] = data
    else:
        subset = data[0:0x400]

    view = subset.reshape((8,128))[:,:120].reshape((24,40))

    # but this is in linear order; need the row swap. So, have to use fancy
    # indexing
    return view[gr_row_order].reshape(-1)


def lores_byte_order(num_bytes):
    global gr_byte_order

    if gr_byte_order is None:
        a = (np.arange(24 * 40, dtype=np.uint16) % 40).reshape((24, 40))
        a[:] += np.repeat(gr_offsets, 40).reshape((24, 40))
        gr_byte_order = a.reshape(-1)

    # If the number of bytes is less than 8192, the final byte is repeated as
    # many times as necessary.
    if num_bytes < 1:
        byte_order = np.empty(0, dtype=np.uint8)
    elif num_bytes < 0x400:
        byte_order = gr_byte_order.copy()
        b = byte_order >= num_bytes
        byte_order[b] = num_bytes - 1
    else:
        byte_order = gr_byte_order

    return byte_order


if __name__ == "__main__":
    gen = False

    def generate_row_offsets():
        offsets = []
        for y in range(192):
            # From Apple Graphics and Arcade Game Design
            a = y // 64
            d = y - (64 * a)
            b = d // 8
            c = d - 8 * b
            offsets.append((1024 * c) + (128 * b) + (40 * a))
        return offsets

    if gen:
        print(", ".join("0x%04x" % i for i in generate_row_offsets()))

        order = []
        for i in hgr_offsets:
            row = (i // 128) * 3
            if (i & 0x7f) >= 40:
                row += 1
            if (i & 0x7f) >= 80:
                row += 1
            order.append(row)
        groups = ",\n".join(", ".join(str(j) for j in order[i:i+8]) for i in range(0, len(order), 8))
        print(groups)

    def generate_byte_pixel_lookup_table():
        table = []
        for val in range(256):
            pixels14 = []
            high_bit = val & 0x80
            for shift in range(7):
                if val & 1:
                    pixels14.extend([1, 1])
                else:
                    pixels14.extend([0, 0])
                val = val >> 1
            table.append(tuple(pixels14))
        return table

    if gen:
        print("\n".join(str(i) for i in generate_byte_pixel_lookup_table()))


    data = np.arange(20, dtype=np.uint8) * 4
    print(byte_to_14_pixels[data])

    data = np.linspace(0, 0x40, num=8192, endpoint=False, dtype=np.uint8)
    view = hires_data_view(data)
    for i in range(192):
        print(view[i])

    print(hires_byte_order(8192)[:256])

    data = np.linspace(0, 0x40, num=0x400, endpoint=False, dtype=np.uint8)
    view = lores_data_view(data)
    for i in range(24):
        print(view[i])

    bytes_order = lores_byte_order(0x400)
    # print([:256])
    print(bytes_order, len(bytes_order))
