# coding: utf-8

"""
    Criação de Contas

    API de Criação de Contas.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: cadastro_api@orama.com.br
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cadastro_orama.configuration import Configuration


class DadosPatrimonial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'faixa_aplicacoes': 'str',
        'valor_aplicacoes': 'float',
        'faixa_rendimentos': 'str',
        'valor_outros_bens': 'float'
    }

    attribute_map = {
        'faixa_aplicacoes': 'faixaAplicacoes',
        'valor_aplicacoes': 'valorAplicacoes',
        'faixa_rendimentos': 'faixaRendimentos',
        'valor_outros_bens': 'valorOutrosBens'
    }

    def __init__(self, faixa_aplicacoes=None, valor_aplicacoes=None, faixa_rendimentos=None, valor_outros_bens=None, local_vars_configuration=None):  # noqa: E501
        """DadosPatrimonial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._faixa_aplicacoes = None
        self._valor_aplicacoes = None
        self._faixa_rendimentos = None
        self._valor_outros_bens = None
        self.discriminator = None

        if faixa_aplicacoes is not None:
            self.faixa_aplicacoes = faixa_aplicacoes
        if valor_aplicacoes is not None:
            self.valor_aplicacoes = valor_aplicacoes
        if faixa_rendimentos is not None:
            self.faixa_rendimentos = faixa_rendimentos
        if valor_outros_bens is not None:
            self.valor_outros_bens = valor_outros_bens

    @property
    def faixa_aplicacoes(self):
        """Gets the faixa_aplicacoes of this DadosPatrimonial.  # noqa: E501

        Código do valor total em aplicações financeiras considerando outras instituições. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$50.000,00', '2': 'De R$50.000,01 à R$100.000,00', '3': 'De R$100.000,01 à R$200.000,00', '4': 'De R$200.000,01 à R$300.000,00', '5': 'De R$300.000,01 à R$1.000.000,00', '6': 'Acima de R$1.000.000,00'  # noqa: E501

        :return: The faixa_aplicacoes of this DadosPatrimonial.  # noqa: E501
        :rtype: str
        """
        return self._faixa_aplicacoes

    @faixa_aplicacoes.setter
    def faixa_aplicacoes(self, faixa_aplicacoes):
        """Sets the faixa_aplicacoes of this DadosPatrimonial.

        Código do valor total em aplicações financeiras considerando outras instituições. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$50.000,00', '2': 'De R$50.000,01 à R$100.000,00', '3': 'De R$100.000,01 à R$200.000,00', '4': 'De R$200.000,01 à R$300.000,00', '5': 'De R$300.000,01 à R$1.000.000,00', '6': 'Acima de R$1.000.000,00'  # noqa: E501

        :param faixa_aplicacoes: The faixa_aplicacoes of this DadosPatrimonial.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and faixa_aplicacoes not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `faixa_aplicacoes` ({0}), must be one of {1}"  # noqa: E501
                .format(faixa_aplicacoes, allowed_values)
            )

        self._faixa_aplicacoes = faixa_aplicacoes

    @property
    def valor_aplicacoes(self):
        """Gets the valor_aplicacoes of this DadosPatrimonial.  # noqa: E501

        Valor total em R$ em aplicações financeiras, considerando outras instituições. Este campo só deve ser preenchido caso 'faixaAplicacoes' seja acima de R$ 1.000.000,00  # noqa: E501

        :return: The valor_aplicacoes of this DadosPatrimonial.  # noqa: E501
        :rtype: float
        """
        return self._valor_aplicacoes

    @valor_aplicacoes.setter
    def valor_aplicacoes(self, valor_aplicacoes):
        """Sets the valor_aplicacoes of this DadosPatrimonial.

        Valor total em R$ em aplicações financeiras, considerando outras instituições. Este campo só deve ser preenchido caso 'faixaAplicacoes' seja acima de R$ 1.000.000,00  # noqa: E501

        :param valor_aplicacoes: The valor_aplicacoes of this DadosPatrimonial.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                valor_aplicacoes is not None and valor_aplicacoes > 999999999999.99):  # noqa: E501
            raise ValueError("Invalid value for `valor_aplicacoes`, must be a value less than or equal to `999999999999.99`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                valor_aplicacoes is not None and valor_aplicacoes < 1000000):  # noqa: E501
            raise ValueError("Invalid value for `valor_aplicacoes`, must be a value greater than or equal to `1000000`")  # noqa: E501

        self._valor_aplicacoes = valor_aplicacoes

    @property
    def faixa_rendimentos(self):
        """Gets the faixa_rendimentos of this DadosPatrimonial.  # noqa: E501

        Código do valor que representa a renta bruta mensal. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$5.000,00', '2': 'De R$5.000,01 à R$10.000,00', '3': 'De R$10.000,01 à R$20.000,00', '4': 'De R$20.000,01 à R$30.000,00', '5': 'De R$30.000,01 à R$100.000,00', '6': 'Acima de R$100.000,00'  # noqa: E501

        :return: The faixa_rendimentos of this DadosPatrimonial.  # noqa: E501
        :rtype: str
        """
        return self._faixa_rendimentos

    @faixa_rendimentos.setter
    def faixa_rendimentos(self, faixa_rendimentos):
        """Sets the faixa_rendimentos of this DadosPatrimonial.

        Código do valor que representa a renta bruta mensal. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$5.000,00', '2': 'De R$5.000,01 à R$10.000,00', '3': 'De R$10.000,01 à R$20.000,00', '4': 'De R$20.000,01 à R$30.000,00', '5': 'De R$30.000,01 à R$100.000,00', '6': 'Acima de R$100.000,00'  # noqa: E501

        :param faixa_rendimentos: The faixa_rendimentos of this DadosPatrimonial.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and faixa_rendimentos not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `faixa_rendimentos` ({0}), must be one of {1}"  # noqa: E501
                .format(faixa_rendimentos, allowed_values)
            )

        self._faixa_rendimentos = faixa_rendimentos

    @property
    def valor_outros_bens(self):
        """Gets the valor_outros_bens of this DadosPatrimonial.  # noqa: E501

        Valor total em R$ incluindo móveis, imóveis e outros bens do usuário  # noqa: E501

        :return: The valor_outros_bens of this DadosPatrimonial.  # noqa: E501
        :rtype: float
        """
        return self._valor_outros_bens

    @valor_outros_bens.setter
    def valor_outros_bens(self, valor_outros_bens):
        """Sets the valor_outros_bens of this DadosPatrimonial.

        Valor total em R$ incluindo móveis, imóveis e outros bens do usuário  # noqa: E501

        :param valor_outros_bens: The valor_outros_bens of this DadosPatrimonial.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                valor_outros_bens is not None and valor_outros_bens > 999999999999.99):  # noqa: E501
            raise ValueError("Invalid value for `valor_outros_bens`, must be a value less than or equal to `999999999999.99`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                valor_outros_bens is not None and valor_outros_bens < 0.1):  # noqa: E501
            raise ValueError("Invalid value for `valor_outros_bens`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._valor_outros_bens = valor_outros_bens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DadosPatrimonial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DadosPatrimonial):
            return True

        return self.to_dict() != other.to_dict()
