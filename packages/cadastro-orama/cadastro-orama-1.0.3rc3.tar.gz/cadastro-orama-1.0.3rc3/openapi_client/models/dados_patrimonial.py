# coding: utf-8

"""
    Criação de Contas

    API de Criação de Contas.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: cadastro_api@orama.com.br
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DadosPatrimonial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'valor_de_patrimonio': 'str',
        'valor_de_investimento': 'float',
        'rendimento_mensal': 'str',
        'outros_bens_valor': 'float'
    }

    attribute_map = {
        'valor_de_patrimonio': 'valorDePatrimonio',
        'valor_de_investimento': 'valorDeInvestimento',
        'rendimento_mensal': 'rendimentoMensal',
        'outros_bens_valor': 'outrosBensValor'
    }

    def __init__(self, valor_de_patrimonio=None, valor_de_investimento=None, rendimento_mensal=None, outros_bens_valor=None):  # noqa: E501
        """DadosPatrimonial - a model defined in OpenAPI"""  # noqa: E501

        self._valor_de_patrimonio = None
        self._valor_de_investimento = None
        self._rendimento_mensal = None
        self._outros_bens_valor = None
        self.discriminator = None

        if valor_de_patrimonio is not None:
            self.valor_de_patrimonio = valor_de_patrimonio
        if valor_de_investimento is not None:
            self.valor_de_investimento = valor_de_investimento
        if rendimento_mensal is not None:
            self.rendimento_mensal = rendimento_mensal
        if outros_bens_valor is not None:
            self.outros_bens_valor = outros_bens_valor

    @property
    def valor_de_patrimonio(self):
        """Gets the valor_de_patrimonio of this DadosPatrimonial.  # noqa: E501

        Código do valor total do patrimonio. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$50.000,00', '2': 'De R$50.000,01 à R$100.000,00', '3': 'De R$100.000,01 à R$200.000,00', '4': 'De R$200.000,01 à R$300.000,00', '5': 'De R$300.000,01 à R$1.000.000,00', '6': 'Acima de R$1.000.000,00'  # noqa: E501

        :return: The valor_de_patrimonio of this DadosPatrimonial.  # noqa: E501
        :rtype: str
        """
        return self._valor_de_patrimonio

    @valor_de_patrimonio.setter
    def valor_de_patrimonio(self, valor_de_patrimonio):
        """Sets the valor_de_patrimonio of this DadosPatrimonial.

        Código do valor total do patrimonio. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$50.000,00', '2': 'De R$50.000,01 à R$100.000,00', '3': 'De R$100.000,01 à R$200.000,00', '4': 'De R$200.000,01 à R$300.000,00', '5': 'De R$300.000,01 à R$1.000.000,00', '6': 'Acima de R$1.000.000,00'  # noqa: E501

        :param valor_de_patrimonio: The valor_de_patrimonio of this DadosPatrimonial.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6"]  # noqa: E501
        if valor_de_patrimonio not in allowed_values:
            raise ValueError(
                "Invalid value for `valor_de_patrimonio` ({0}), must be one of {1}"  # noqa: E501
                .format(valor_de_patrimonio, allowed_values)
            )

        self._valor_de_patrimonio = valor_de_patrimonio

    @property
    def valor_de_investimento(self):
        """Gets the valor_de_investimento of this DadosPatrimonial.  # noqa: E501

        Valor em R$ disponível para investimento  # noqa: E501

        :return: The valor_de_investimento of this DadosPatrimonial.  # noqa: E501
        :rtype: float
        """
        return self._valor_de_investimento

    @valor_de_investimento.setter
    def valor_de_investimento(self, valor_de_investimento):
        """Sets the valor_de_investimento of this DadosPatrimonial.

        Valor em R$ disponível para investimento  # noqa: E501

        :param valor_de_investimento: The valor_de_investimento of this DadosPatrimonial.  # noqa: E501
        :type: float
        """
        if valor_de_investimento is not None and valor_de_investimento > 999999999999.99:  # noqa: E501
            raise ValueError("Invalid value for `valor_de_investimento`, must be a value less than or equal to `999999999999.99`")  # noqa: E501
        if valor_de_investimento is not None and valor_de_investimento < 0.1:  # noqa: E501
            raise ValueError("Invalid value for `valor_de_investimento`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._valor_de_investimento = valor_de_investimento

    @property
    def rendimento_mensal(self):
        """Gets the rendimento_mensal of this DadosPatrimonial.  # noqa: E501

        Código do valor que representa a renta bruta mensal. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$5.000,00', '2': 'De R$5.000,01 à R$10.000,00', '3': 'De R$10.000,01 à R$20.000,00', '4': 'De R$20.000,01 à R$30.000,00', '5': 'De R$30.000,01 à R$100.000,00', '6': 'Acima de R$100.000,00'  # noqa: E501

        :return: The rendimento_mensal of this DadosPatrimonial.  # noqa: E501
        :rtype: str
        """
        return self._rendimento_mensal

    @rendimento_mensal.setter
    def rendimento_mensal(self, rendimento_mensal):
        """Sets the rendimento_mensal of this DadosPatrimonial.

        Código do valor que representa a renta bruta mensal. Cada número representa um intervalo de valor em reais (R$). Por exemplo, '0': 'Nenhum', '1': 'Até R$5.000,00', '2': 'De R$5.000,01 à R$10.000,00', '3': 'De R$10.000,01 à R$20.000,00', '4': 'De R$20.000,01 à R$30.000,00', '5': 'De R$30.000,01 à R$100.000,00', '6': 'Acima de R$100.000,00'  # noqa: E501

        :param rendimento_mensal: The rendimento_mensal of this DadosPatrimonial.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6"]  # noqa: E501
        if rendimento_mensal not in allowed_values:
            raise ValueError(
                "Invalid value for `rendimento_mensal` ({0}), must be one of {1}"  # noqa: E501
                .format(rendimento_mensal, allowed_values)
            )

        self._rendimento_mensal = rendimento_mensal

    @property
    def outros_bens_valor(self):
        """Gets the outros_bens_valor of this DadosPatrimonial.  # noqa: E501

        Valor em R$ de outros bens do usuário  # noqa: E501

        :return: The outros_bens_valor of this DadosPatrimonial.  # noqa: E501
        :rtype: float
        """
        return self._outros_bens_valor

    @outros_bens_valor.setter
    def outros_bens_valor(self, outros_bens_valor):
        """Sets the outros_bens_valor of this DadosPatrimonial.

        Valor em R$ de outros bens do usuário  # noqa: E501

        :param outros_bens_valor: The outros_bens_valor of this DadosPatrimonial.  # noqa: E501
        :type: float
        """
        if outros_bens_valor is not None and outros_bens_valor > 999999999999.99:  # noqa: E501
            raise ValueError("Invalid value for `outros_bens_valor`, must be a value less than or equal to `999999999999.99`")  # noqa: E501
        if outros_bens_valor is not None and outros_bens_valor < 0.1:  # noqa: E501
            raise ValueError("Invalid value for `outros_bens_valor`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._outros_bens_valor = outros_bens_valor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DadosPatrimonial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
