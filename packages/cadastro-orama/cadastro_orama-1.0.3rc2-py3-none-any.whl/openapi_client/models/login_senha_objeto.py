# coding: utf-8

"""
    Criação de Contas

    API de Criação de Contas.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: cadastro_api@orama.com.br
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LoginSenhaObjeto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nome': 'str',
        'celular': 'str',
        'cpf': 'str',
        'email': 'str',
        'data_nascimento': 'date',
        'senha': 'str'
    }

    attribute_map = {
        'nome': 'nome',
        'celular': 'celular',
        'cpf': 'cpf',
        'email': 'email',
        'data_nascimento': 'dataNascimento',
        'senha': 'senha'
    }

    def __init__(self, nome=None, celular=None, cpf=None, email=None, data_nascimento=None, senha=None):  # noqa: E501
        """LoginSenhaObjeto - a model defined in OpenAPI"""  # noqa: E501

        self._nome = None
        self._celular = None
        self._cpf = None
        self._email = None
        self._data_nascimento = None
        self._senha = None
        self.discriminator = None

        self.nome = nome
        self.celular = celular
        self.cpf = cpf
        self.email = email
        self.data_nascimento = data_nascimento
        self.senha = senha

    @property
    def nome(self):
        """Gets the nome of this LoginSenhaObjeto.  # noqa: E501

        Campo texto de preenchimento obrigatório para o preenchimento do nome completo do cliente.  # noqa: E501

        :return: The nome of this LoginSenhaObjeto.  # noqa: E501
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """Sets the nome of this LoginSenhaObjeto.

        Campo texto de preenchimento obrigatório para o preenchimento do nome completo do cliente.  # noqa: E501

        :param nome: The nome of this LoginSenhaObjeto.  # noqa: E501
        :type: str
        """
        if nome is None:
            raise ValueError("Invalid value for `nome`, must not be `None`")  # noqa: E501
        if nome is not None and len(nome) > 200:
            raise ValueError("Invalid value for `nome`, length must be less than or equal to `200`")  # noqa: E501

        self._nome = nome

    @property
    def celular(self):
        """Gets the celular of this LoginSenhaObjeto.  # noqa: E501

        Telefone celular contendo o código de área e os nove digitos.  # noqa: E501

        :return: The celular of this LoginSenhaObjeto.  # noqa: E501
        :rtype: str
        """
        return self._celular

    @celular.setter
    def celular(self, celular):
        """Sets the celular of this LoginSenhaObjeto.

        Telefone celular contendo o código de área e os nove digitos.  # noqa: E501

        :param celular: The celular of this LoginSenhaObjeto.  # noqa: E501
        :type: str
        """
        if celular is None:
            raise ValueError("Invalid value for `celular`, must not be `None`")  # noqa: E501
        if celular is not None and not re.search(r'^\d{2}-\d{9}$', celular):  # noqa: E501
            raise ValueError(r"Invalid value for `celular`, must be a follow pattern or equal to `/^\d{2}-\d{9}$/`")  # noqa: E501

        self._celular = celular

    @property
    def cpf(self):
        """Gets the cpf of this LoginSenhaObjeto.  # noqa: E501

        CPF deve ser válido e não ter sido usado anteriormente. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  # noqa: E501

        :return: The cpf of this LoginSenhaObjeto.  # noqa: E501
        :rtype: str
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf):
        """Sets the cpf of this LoginSenhaObjeto.

        CPF deve ser válido e não ter sido usado anteriormente. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  # noqa: E501

        :param cpf: The cpf of this LoginSenhaObjeto.  # noqa: E501
        :type: str
        """
        if cpf is None:
            raise ValueError("Invalid value for `cpf`, must not be `None`")  # noqa: E501
        if cpf is not None and not re.search(r'^\d{3}\.\d{3}\.\d{3}-\d{2}$', cpf):  # noqa: E501
            raise ValueError(r"Invalid value for `cpf`, must be a follow pattern or equal to `/^\d{3}\.\d{3}\.\d{3}-\d{2}$/`")  # noqa: E501

        self._cpf = cpf

    @property
    def email(self):
        """Gets the email of this LoginSenhaObjeto.  # noqa: E501


        :return: The email of this LoginSenhaObjeto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LoginSenhaObjeto.


        :param email: The email of this LoginSenhaObjeto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def data_nascimento(self):
        """Gets the data_nascimento of this LoginSenhaObjeto.  # noqa: E501

        Data de nascimento da pessoa no formato YYYY-MM-DD (cf. RFC 3339, section 5.8)  # noqa: E501

        :return: The data_nascimento of this LoginSenhaObjeto.  # noqa: E501
        :rtype: date
        """
        return self._data_nascimento

    @data_nascimento.setter
    def data_nascimento(self, data_nascimento):
        """Sets the data_nascimento of this LoginSenhaObjeto.

        Data de nascimento da pessoa no formato YYYY-MM-DD (cf. RFC 3339, section 5.8)  # noqa: E501

        :param data_nascimento: The data_nascimento of this LoginSenhaObjeto.  # noqa: E501
        :type: date
        """
        if data_nascimento is None:
            raise ValueError("Invalid value for `data_nascimento`, must not be `None`")  # noqa: E501

        self._data_nascimento = data_nascimento

    @property
    def senha(self):
        """Gets the senha of this LoginSenhaObjeto.  # noqa: E501

        Senha de seis dígitos.  # noqa: E501

        :return: The senha of this LoginSenhaObjeto.  # noqa: E501
        :rtype: str
        """
        return self._senha

    @senha.setter
    def senha(self, senha):
        """Sets the senha of this LoginSenhaObjeto.

        Senha de seis dígitos.  # noqa: E501

        :param senha: The senha of this LoginSenhaObjeto.  # noqa: E501
        :type: str
        """
        if senha is None:
            raise ValueError("Invalid value for `senha`, must not be `None`")  # noqa: E501
        if senha is not None and not re.search(r'^\d{6}$', senha):  # noqa: E501
            raise ValueError(r"Invalid value for `senha`, must be a follow pattern or equal to `/^\d{6}$/`")  # noqa: E501

        self._senha = senha

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginSenhaObjeto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
