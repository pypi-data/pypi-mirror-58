# coding: utf-8

"""
    Criação de Contas

    API de Criação de Contas.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: cadastro_api@orama.com.br
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cadastro_orama.configuration import Configuration


class Documento(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tipo_documento': 'str',
        'numero_documento': 'str',
        'orgao_expedidor': 'str',
        'uf_emissao': 'str',
        'data_emissao': 'date',
        'data_validade': 'date',
        'codigo_seguranca_cnh': 'str'
    }

    attribute_map = {
        'tipo_documento': 'tipoDocumento',
        'numero_documento': 'numeroDocumento',
        'orgao_expedidor': 'orgaoExpedidor',
        'uf_emissao': 'ufEmissao',
        'data_emissao': 'dataEmissao',
        'data_validade': 'dataValidade',
        'codigo_seguranca_cnh': 'codigoSegurancaCNH'
    }

    def __init__(self, tipo_documento=None, numero_documento=None, orgao_expedidor=None, uf_emissao=None, data_emissao=None, data_validade=None, codigo_seguranca_cnh=None, local_vars_configuration=None):  # noqa: E501
        """Documento - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tipo_documento = None
        self._numero_documento = None
        self._orgao_expedidor = None
        self._uf_emissao = None
        self._data_emissao = None
        self._data_validade = None
        self._codigo_seguranca_cnh = None
        self.discriminator = None

        self.tipo_documento = tipo_documento
        self.numero_documento = numero_documento
        self.orgao_expedidor = orgao_expedidor
        self.uf_emissao = uf_emissao
        if data_emissao is not None:
            self.data_emissao = data_emissao
        if data_validade is not None:
            self.data_validade = data_validade
        if codigo_seguranca_cnh is not None:
            self.codigo_seguranca_cnh = codigo_seguranca_cnh

    @property
    def tipo_documento(self):
        """Gets the tipo_documento of this Documento.  # noqa: E501


        :return: The tipo_documento of this Documento.  # noqa: E501
        :rtype: str
        """
        return self._tipo_documento

    @tipo_documento.setter
    def tipo_documento(self, tipo_documento):
        """Sets the tipo_documento of this Documento.


        :param tipo_documento: The tipo_documento of this Documento.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tipo_documento is None:  # noqa: E501
            raise ValueError("Invalid value for `tipo_documento`, must not be `None`")  # noqa: E501
        allowed_values = ["Carteira de Habilitação - CNH", "Passaporte", "Cart. Ident. Estrangeiro - RNE", "Cart. Identidade Profissional", "Carteira de Identidade / RG"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tipo_documento not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tipo_documento` ({0}), must be one of {1}"  # noqa: E501
                .format(tipo_documento, allowed_values)
            )

        self._tipo_documento = tipo_documento

    @property
    def numero_documento(self):
        """Gets the numero_documento of this Documento.  # noqa: E501


        :return: The numero_documento of this Documento.  # noqa: E501
        :rtype: str
        """
        return self._numero_documento

    @numero_documento.setter
    def numero_documento(self, numero_documento):
        """Sets the numero_documento of this Documento.


        :param numero_documento: The numero_documento of this Documento.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and numero_documento is None:  # noqa: E501
            raise ValueError("Invalid value for `numero_documento`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                numero_documento is not None and len(numero_documento) > 50):
            raise ValueError("Invalid value for `numero_documento`, length must be less than or equal to `50`")  # noqa: E501

        self._numero_documento = numero_documento

    @property
    def orgao_expedidor(self):
        """Gets the orgao_expedidor of this Documento.  # noqa: E501

        Orgão expedidor de acordo com o tipo de documento  # noqa: E501

        :return: The orgao_expedidor of this Documento.  # noqa: E501
        :rtype: str
        """
        return self._orgao_expedidor

    @orgao_expedidor.setter
    def orgao_expedidor(self, orgao_expedidor):
        """Sets the orgao_expedidor of this Documento.

        Orgão expedidor de acordo com o tipo de documento  # noqa: E501

        :param orgao_expedidor: The orgao_expedidor of this Documento.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and orgao_expedidor is None:  # noqa: E501
            raise ValueError("Invalid value for `orgao_expedidor`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                orgao_expedidor is not None and len(orgao_expedidor) > 30):
            raise ValueError("Invalid value for `orgao_expedidor`, length must be less than or equal to `30`")  # noqa: E501

        self._orgao_expedidor = orgao_expedidor

    @property
    def uf_emissao(self):
        """Gets the uf_emissao of this Documento.  # noqa: E501

        Unidade da Federação onde foi emitido o documeto  # noqa: E501

        :return: The uf_emissao of this Documento.  # noqa: E501
        :rtype: str
        """
        return self._uf_emissao

    @uf_emissao.setter
    def uf_emissao(self, uf_emissao):
        """Sets the uf_emissao of this Documento.

        Unidade da Federação onde foi emitido o documeto  # noqa: E501

        :param uf_emissao: The uf_emissao of this Documento.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uf_emissao is None:  # noqa: E501
            raise ValueError("Invalid value for `uf_emissao`, must not be `None`")  # noqa: E501

        self._uf_emissao = uf_emissao

    @property
    def data_emissao(self):
        """Gets the data_emissao of this Documento.  # noqa: E501

        Data em que o documento foi emitido no formato YYYY-MM-DD (cf. RFC 3339, section 5.8)  # noqa: E501

        :return: The data_emissao of this Documento.  # noqa: E501
        :rtype: date
        """
        return self._data_emissao

    @data_emissao.setter
    def data_emissao(self, data_emissao):
        """Sets the data_emissao of this Documento.

        Data em que o documento foi emitido no formato YYYY-MM-DD (cf. RFC 3339, section 5.8)  # noqa: E501

        :param data_emissao: The data_emissao of this Documento.  # noqa: E501
        :type: date
        """

        self._data_emissao = data_emissao

    @property
    def data_validade(self):
        """Gets the data_validade of this Documento.  # noqa: E501

        Data de validade do documento no formato YYYY-MM-DD (cf. RFC 3339, section 5.8)  # noqa: E501

        :return: The data_validade of this Documento.  # noqa: E501
        :rtype: date
        """
        return self._data_validade

    @data_validade.setter
    def data_validade(self, data_validade):
        """Sets the data_validade of this Documento.

        Data de validade do documento no formato YYYY-MM-DD (cf. RFC 3339, section 5.8)  # noqa: E501

        :param data_validade: The data_validade of this Documento.  # noqa: E501
        :type: date
        """

        self._data_validade = data_validade

    @property
    def codigo_seguranca_cnh(self):
        """Gets the codigo_seguranca_cnh of this Documento.  # noqa: E501

        Código de Segurança da Carteira Nacional de Habilitação  # noqa: E501

        :return: The codigo_seguranca_cnh of this Documento.  # noqa: E501
        :rtype: str
        """
        return self._codigo_seguranca_cnh

    @codigo_seguranca_cnh.setter
    def codigo_seguranca_cnh(self, codigo_seguranca_cnh):
        """Sets the codigo_seguranca_cnh of this Documento.

        Código de Segurança da Carteira Nacional de Habilitação  # noqa: E501

        :param codigo_seguranca_cnh: The codigo_seguranca_cnh of this Documento.  # noqa: E501
        :type: str
        """

        self._codigo_seguranca_cnh = codigo_seguranca_cnh

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Documento):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Documento):
            return True

        return self.to_dict() != other.to_dict()
