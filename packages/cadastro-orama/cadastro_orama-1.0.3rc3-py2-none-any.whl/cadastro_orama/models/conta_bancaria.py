# coding: utf-8

"""
    Criação de Contas

    API de Criação de Contas.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: cadastro_api@orama.com.br
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cadastro_orama.configuration import Configuration


class ContaBancaria(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'banco': 'str',
        'tipo': 'str',
        'agencia': 'str',
        'conta': 'str',
        'digito': 'str',
        'conta_conjunta': 'bool',
        'segundo_participante_titular': 'bool',
        'cpf_cotitular': 'str'
    }

    attribute_map = {
        'banco': 'banco',
        'tipo': 'tipo',
        'agencia': 'agencia',
        'conta': 'conta',
        'digito': 'digito',
        'conta_conjunta': 'contaConjunta',
        'segundo_participante_titular': 'segundoParticipanteTitular',
        'cpf_cotitular': 'cpfCotitular'
    }

    def __init__(self, banco=None, tipo='CC', agencia=None, conta=None, digito=None, conta_conjunta=False, segundo_participante_titular=False, cpf_cotitular=None, local_vars_configuration=None):  # noqa: E501
        """ContaBancaria - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._banco = None
        self._tipo = None
        self._agencia = None
        self._conta = None
        self._digito = None
        self._conta_conjunta = None
        self._segundo_participante_titular = None
        self._cpf_cotitular = None
        self.discriminator = None

        self.banco = banco
        self.tipo = tipo
        self.agencia = agencia
        self.conta = conta
        self.digito = digito
        if conta_conjunta is not None:
            self.conta_conjunta = conta_conjunta
        if segundo_participante_titular is not None:
            self.segundo_participante_titular = segundo_participante_titular
        if cpf_cotitular is not None:
            self.cpf_cotitular = cpf_cotitular

    @property
    def banco(self):
        """Gets the banco of this ContaBancaria.  # noqa: E501

        Banco da conta, string com o número do banco  # noqa: E501

        :return: The banco of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._banco

    @banco.setter
    def banco(self, banco):
        """Sets the banco of this ContaBancaria.

        Banco da conta, string com o número do banco  # noqa: E501

        :param banco: The banco of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and banco is None:  # noqa: E501
            raise ValueError("Invalid value for `banco`, must not be `None`")  # noqa: E501

        self._banco = banco

    @property
    def tipo(self):
        """Gets the tipo of this ContaBancaria.  # noqa: E501

        Tipo da conta bancária. O tipo deve ser conta corrente (CC) ou conta poupança (CP).  # noqa: E501

        :return: The tipo of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo):
        """Sets the tipo of this ContaBancaria.

        Tipo da conta bancária. O tipo deve ser conta corrente (CC) ou conta poupança (CP).  # noqa: E501

        :param tipo: The tipo of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tipo is None:  # noqa: E501
            raise ValueError("Invalid value for `tipo`, must not be `None`")  # noqa: E501
        allowed_values = ["CC", "CP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tipo not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tipo` ({0}), must be one of {1}"  # noqa: E501
                .format(tipo, allowed_values)
            )

        self._tipo = tipo

    @property
    def agencia(self):
        """Gets the agencia of this ContaBancaria.  # noqa: E501

        Agência da conta bancária  # noqa: E501

        :return: The agencia of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._agencia

    @agencia.setter
    def agencia(self, agencia):
        """Sets the agencia of this ContaBancaria.

        Agência da conta bancária  # noqa: E501

        :param agencia: The agencia of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and agencia is None:  # noqa: E501
            raise ValueError("Invalid value for `agencia`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                agencia is not None and len(agencia) > 5):
            raise ValueError("Invalid value for `agencia`, length must be less than or equal to `5`")  # noqa: E501

        self._agencia = agencia

    @property
    def conta(self):
        """Gets the conta of this ContaBancaria.  # noqa: E501

        Número da conta bancária sem o dígito verificador  # noqa: E501

        :return: The conta of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._conta

    @conta.setter
    def conta(self, conta):
        """Sets the conta of this ContaBancaria.

        Número da conta bancária sem o dígito verificador  # noqa: E501

        :param conta: The conta of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and conta is None:  # noqa: E501
            raise ValueError("Invalid value for `conta`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                conta is not None and len(conta) > 12):
            raise ValueError("Invalid value for `conta`, length must be less than or equal to `12`")  # noqa: E501

        self._conta = conta

    @property
    def digito(self):
        """Gets the digito of this ContaBancaria.  # noqa: E501

        Digito verificador da conta bancária  # noqa: E501

        :return: The digito of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._digito

    @digito.setter
    def digito(self, digito):
        """Sets the digito of this ContaBancaria.

        Digito verificador da conta bancária  # noqa: E501

        :param digito: The digito of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and digito is None:  # noqa: E501
            raise ValueError("Invalid value for `digito`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                digito is not None and not re.search(r'\d{0,2}', digito)):  # noqa: E501
            raise ValueError(r"Invalid value for `digito`, must be a follow pattern or equal to `/\d{0,2}/`")  # noqa: E501

        self._digito = digito

    @property
    def conta_conjunta(self):
        """Gets the conta_conjunta of this ContaBancaria.  # noqa: E501

        Informação que define se é uma conta conjunta. Caso seja, deve ser definido como true.  # noqa: E501

        :return: The conta_conjunta of this ContaBancaria.  # noqa: E501
        :rtype: bool
        """
        return self._conta_conjunta

    @conta_conjunta.setter
    def conta_conjunta(self, conta_conjunta):
        """Sets the conta_conjunta of this ContaBancaria.

        Informação que define se é uma conta conjunta. Caso seja, deve ser definido como true.  # noqa: E501

        :param conta_conjunta: The conta_conjunta of this ContaBancaria.  # noqa: E501
        :type: bool
        """

        self._conta_conjunta = conta_conjunta

    @property
    def segundo_participante_titular(self):
        """Gets the segundo_participante_titular of this ContaBancaria.  # noqa: E501

        Informação se o segundo participante (co-titular) é o titular da conta, caso não seja, o primeiro participante quem esta preenchendo a conta é o titular.  # noqa: E501

        :return: The segundo_participante_titular of this ContaBancaria.  # noqa: E501
        :rtype: bool
        """
        return self._segundo_participante_titular

    @segundo_participante_titular.setter
    def segundo_participante_titular(self, segundo_participante_titular):
        """Sets the segundo_participante_titular of this ContaBancaria.

        Informação se o segundo participante (co-titular) é o titular da conta, caso não seja, o primeiro participante quem esta preenchendo a conta é o titular.  # noqa: E501

        :param segundo_participante_titular: The segundo_participante_titular of this ContaBancaria.  # noqa: E501
        :type: bool
        """

        self._segundo_participante_titular = segundo_participante_titular

    @property
    def cpf_cotitular(self):
        """Gets the cpf_cotitular of this ContaBancaria.  # noqa: E501

        CPF do co-titular caso seja conta conjunta. CPF deve ser válido. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  # noqa: E501

        :return: The cpf_cotitular of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._cpf_cotitular

    @cpf_cotitular.setter
    def cpf_cotitular(self, cpf_cotitular):
        """Sets the cpf_cotitular of this ContaBancaria.

        CPF do co-titular caso seja conta conjunta. CPF deve ser válido. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  # noqa: E501

        :param cpf_cotitular: The cpf_cotitular of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                cpf_cotitular is not None and not re.search(r'^\d{3}\.\d{3}\.\d{3}-\d{2}$', cpf_cotitular)):  # noqa: E501
            raise ValueError(r"Invalid value for `cpf_cotitular`, must be a follow pattern or equal to `/^\d{3}\.\d{3}\.\d{3}-\d{2}$/`")  # noqa: E501

        self._cpf_cotitular = cpf_cotitular

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContaBancaria):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContaBancaria):
            return True

        return self.to_dict() != other.to_dict()
