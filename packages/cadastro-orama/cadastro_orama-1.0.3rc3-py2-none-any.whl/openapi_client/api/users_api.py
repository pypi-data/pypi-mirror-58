# coding: utf-8

"""
    Criação de Contas

    API de Criação de Contas.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: cadastro_api@orama.com.br
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class UsersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_autenticacao_post(self, usuario_senha_objeto, **kwargs):  # noqa: E501
        """Autentica um usuário que ainda não é cliente.  # noqa: E501

        Autentica um usuário que ainda não é cliente, caso o usuário não existe, ou a combinação de usuário e senha ou ainda o usuário já seja cliente retorna um erro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_autenticacao_post(usuario_senha_objeto, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UsuarioSenhaObjeto usuario_senha_objeto: Dados para autenticação do usuário (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AutenticacaoObjeto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_autenticacao_post_with_http_info(usuario_senha_objeto, **kwargs)  # noqa: E501

    def account_autenticacao_post_with_http_info(self, usuario_senha_objeto, **kwargs):  # noqa: E501
        """Autentica um usuário que ainda não é cliente.  # noqa: E501

        Autentica um usuário que ainda não é cliente, caso o usuário não existe, ou a combinação de usuário e senha ou ainda o usuário já seja cliente retorna um erro.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_autenticacao_post_with_http_info(usuario_senha_objeto, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UsuarioSenhaObjeto usuario_senha_objeto: Dados para autenticação do usuário (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AutenticacaoObjeto, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['usuario_senha_objeto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_autenticacao_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'usuario_senha_objeto' is set
        if ('usuario_senha_objeto' not in local_var_params or
                local_var_params['usuario_senha_objeto'] is None):
            raise ApiValueError("Missing the required parameter `usuario_senha_objeto` when calling `account_autenticacao_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'usuario_senha_objeto' in local_var_params:
            body_params = local_var_params['usuario_senha_objeto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/autenticacao/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutenticacaoObjeto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_documento_confirmacao_get(self, cpf, tipo_documento, **kwargs):  # noqa: E501
        """Consulta o status de confirmação do documento que foi submetido  # noqa: E501

        Consulta o status de confirmação do documento que foi submetido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_documento_confirmacao_get(cpf, tipo_documento, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str tipo_documento: Tipo do documento (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_documento_confirmacao_get_with_http_info(cpf, tipo_documento, **kwargs)  # noqa: E501

    def account_documento_confirmacao_get_with_http_info(self, cpf, tipo_documento, **kwargs):  # noqa: E501
        """Consulta o status de confirmação do documento que foi submetido  # noqa: E501

        Consulta o status de confirmação do documento que foi submetido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_documento_confirmacao_get_with_http_info(cpf, tipo_documento, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str tipo_documento: Tipo do documento (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf', 'tipo_documento']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_documento_confirmacao_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_documento_confirmacao_get`")  # noqa: E501
        # verify the required parameter 'tipo_documento' is set
        if ('tipo_documento' not in local_var_params or
                local_var_params['tipo_documento'] is None):
            raise ApiValueError("Missing the required parameter `tipo_documento` when calling `account_documento_confirmacao_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []
        if 'tipo_documento' in local_var_params:
            query_params.append(('tipoDocumento', local_var_params['tipo_documento']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/documento/confirmacao/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_documento_put(self, cpf, tipo_documento, name, filename, **kwargs):  # noqa: E501
        """Anexa ou atualiza documento para conferencia de autenticidade do perfil.  # noqa: E501

        Anexa ou atualiza documento que será usado no processo conferencia de autenticidade do perfil. É recomendado fazer o upload de documentos para comprovação de identidade. Caso o perfil tiver conta bancária conjunta ou a conta seja do banco Itaú é recomendado o upload do documento 'Comprovante Bancário'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_documento_put(cpf, tipo_documento, name, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str tipo_documento: Tipo do documento (required)
        :param str name: Nome do atributo codificado em form-data 'image' (required)
        :param file filename: Arquivo binário que será enviado. O formato deve ser PDF, PNG ou JPG (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_documento_put_with_http_info(cpf, tipo_documento, name, filename, **kwargs)  # noqa: E501

    def account_documento_put_with_http_info(self, cpf, tipo_documento, name, filename, **kwargs):  # noqa: E501
        """Anexa ou atualiza documento para conferencia de autenticidade do perfil.  # noqa: E501

        Anexa ou atualiza documento que será usado no processo conferencia de autenticidade do perfil. É recomendado fazer o upload de documentos para comprovação de identidade. Caso o perfil tiver conta bancária conjunta ou a conta seja do banco Itaú é recomendado o upload do documento 'Comprovante Bancário'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_documento_put_with_http_info(cpf, tipo_documento, name, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str tipo_documento: Tipo do documento (required)
        :param str name: Nome do atributo codificado em form-data 'image' (required)
        :param file filename: Arquivo binário que será enviado. O formato deve ser PDF, PNG ou JPG (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf', 'tipo_documento', 'name', 'filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_documento_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_documento_put`")  # noqa: E501
        # verify the required parameter 'tipo_documento' is set
        if ('tipo_documento' not in local_var_params or
                local_var_params['tipo_documento'] is None):
            raise ApiValueError("Missing the required parameter `tipo_documento` when calling `account_documento_put`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `account_documento_put`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in local_var_params or
                local_var_params['filename'] is None):
            raise ApiValueError("Missing the required parameter `filename` when calling `account_documento_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []
        if 'tipo_documento' in local_var_params:
            query_params.append(('tipoDocumento', local_var_params['tipo_documento']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'filename' in local_var_params:
            local_var_files['filename'] = local_var_params['filename']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/documento/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_identificacao_post(self, login_senha_objeto, **kwargs):  # noqa: E501
        """Cria um login para usuário.  # noqa: E501

        Cria um novo login que será usado para acesso ao sistema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_identificacao_post(login_senha_objeto, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param LoginSenhaObjeto login_senha_objeto: Dados para criação do login (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LoginCriado
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_identificacao_post_with_http_info(login_senha_objeto, **kwargs)  # noqa: E501

    def account_identificacao_post_with_http_info(self, login_senha_objeto, **kwargs):  # noqa: E501
        """Cria um login para usuário.  # noqa: E501

        Cria um novo login que será usado para acesso ao sistema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_identificacao_post_with_http_info(login_senha_objeto, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param LoginSenhaObjeto login_senha_objeto: Dados para criação do login (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LoginCriado, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['login_senha_objeto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_identificacao_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'login_senha_objeto' is set
        if ('login_senha_objeto' not in local_var_params or
                local_var_params['login_senha_objeto'] is None):
            raise ApiValueError("Missing the required parameter `login_senha_objeto` when calling `account_identificacao_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'login_senha_objeto' in local_var_params:
            body_params = local_var_params['login_senha_objeto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/identificacao/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoginCriado',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_aprovacao_get(self, cpf, **kwargs):  # noqa: E501
        """Retorna o estado de aprovação de um perfil  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_aprovacao_get(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Aprovacao
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_aprovacao_get_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_aprovacao_get_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Retorna o estado de aprovação de um perfil  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_aprovacao_get_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Aprovacao, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_aprovacao_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_aprovacao_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/aprovacao/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Aprovacao',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_celular_autenticacao_confirmacao_get(self, cpf, **kwargs):  # noqa: E501
        """Estado atual de confirmação do celular  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_celular_autenticacao_confirmacao_get(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Confirmado
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_celular_autenticacao_confirmacao_get_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_celular_autenticacao_confirmacao_get_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Estado atual de confirmação do celular  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_celular_autenticacao_confirmacao_get_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Confirmado, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_celular_autenticacao_confirmacao_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_celular_autenticacao_confirmacao_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/celular/autenticacao/confirmacao/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Confirmado',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_celular_autenticacao_post(self, cpf, **kwargs):  # noqa: E501
        """Gera um código para iniciar o processo de validação do número do celular  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_celular_autenticacao_post(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_celular_autenticacao_post_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_celular_autenticacao_post_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Gera um código para iniciar o processo de validação do número do celular  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_celular_autenticacao_post_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_celular_autenticacao_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_celular_autenticacao_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/celular/autenticacao/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_celular_confirmacao_post(self, cpf, codigo, **kwargs):  # noqa: E501
        """Confirma o numero de celular, concluindo a validação  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_celular_confirmacao_post(cpf, codigo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str codigo: Código de validação para confirmar o número de celular (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Confirmado
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_celular_confirmacao_post_with_http_info(cpf, codigo, **kwargs)  # noqa: E501

    def account_perfil_celular_confirmacao_post_with_http_info(self, cpf, codigo, **kwargs):  # noqa: E501
        """Confirma o numero de celular, concluindo a validação  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_celular_confirmacao_post_with_http_info(cpf, codigo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str codigo: Código de validação para confirmar o número de celular (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Confirmado, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf', 'codigo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_celular_confirmacao_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_celular_confirmacao_post`")  # noqa: E501
        # verify the required parameter 'codigo' is set
        if ('codigo' not in local_var_params or
                local_var_params['codigo'] is None):
            raise ApiValueError("Missing the required parameter `codigo` when calling `account_perfil_celular_confirmacao_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []
        if 'codigo' in local_var_params:
            query_params.append(('codigo', local_var_params['codigo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/celular/autenticacao/confirmacao/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Confirmado',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_email_autenticacao_confirmacao_get(self, cpf, **kwargs):  # noqa: E501
        """Estado atual de confirmação do email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_email_autenticacao_confirmacao_get(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Confirmado
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_email_autenticacao_confirmacao_get_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_email_autenticacao_confirmacao_get_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Estado atual de confirmação do email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_email_autenticacao_confirmacao_get_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Confirmado, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_email_autenticacao_confirmacao_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_email_autenticacao_confirmacao_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/email/autenticacao/confirmacao/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Confirmado',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_email_autenticacao_post(self, cpf, **kwargs):  # noqa: E501
        """Gera um código para iniciar o processo de validação do email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_email_autenticacao_post(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_email_autenticacao_post_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_email_autenticacao_post_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Gera um código para iniciar o processo de validação do email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_email_autenticacao_post_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_email_autenticacao_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_email_autenticacao_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/email/autenticacao/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_email_confirmacao_post(self, cpf, codigo, **kwargs):  # noqa: E501
        """Confirma o email, concluindo a validação  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_email_confirmacao_post(cpf, codigo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str codigo: Código de validação para confirmar o email (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Confirmado
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_email_confirmacao_post_with_http_info(cpf, codigo, **kwargs)  # noqa: E501

    def account_perfil_email_confirmacao_post_with_http_info(self, cpf, codigo, **kwargs):  # noqa: E501
        """Confirma o email, concluindo a validação  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_email_confirmacao_post_with_http_info(cpf, codigo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str codigo: Código de validação para confirmar o email (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Confirmado, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf', 'codigo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_email_confirmacao_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_email_confirmacao_post`")  # noqa: E501
        # verify the required parameter 'codigo' is set
        if ('codigo' not in local_var_params or
                local_var_params['codigo'] is None):
            raise ApiValueError("Missing the required parameter `codigo` when calling `account_perfil_email_confirmacao_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []
        if 'codigo' in local_var_params:
            query_params.append(('codigo', local_var_params['codigo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/email/autenticacao/confirmacao/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Confirmado',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_get(self, cpf, **kwargs):  # noqa: E501
        """Retorna o perfil de um usuário que ainda não foi transformado em cliente.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_get(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str campos: Lista de campos para ser inclusivamente filtrados
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PerfilUsuario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_get_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_get_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Retorna o perfil de um usuário que ainda não foi transformado em cliente.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_get_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param str campos: Lista de campos para ser inclusivamente filtrados
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PerfilUsuario, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf', 'campos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []
        if 'campos' in local_var_params:
            query_params.append(('campos', local_var_params['campos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PerfilUsuario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_post(self, cpf, **kwargs):  # noqa: E501
        """Submete o perfil de usuário associado a um login para ser criado como cliente.  # noqa: E501

        Submete o perfil de usuário associado a um login para ser criado como cliente. Após submissão deste POST, o perfil não poderá mais ser alterado. Para alterar ou inserir informações no perfil antes de submeter o perfil o método PUT deve ser utilizado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_post(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_post_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_post_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Submete o perfil de usuário associado a um login para ser criado como cliente.  # noqa: E501

        Submete o perfil de usuário associado a um login para ser criado como cliente. Após submissão deste POST, o perfil não poderá mais ser alterado. Para alterar ou inserir informações no perfil antes de submeter o perfil o método PUT deve ser utilizado.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_post_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_put(self, cpf, perfil_usuario, **kwargs):  # noqa: E501
        """Atualiza perfil para criação de conta.  # noqa: E501

        Atualiza um perfil de usuário associado a um login para o processo de criação de um usuário. Cada chamada modifica o perfil. Quando o perfil estiver pronto para ser submetido para criação de conta, basta enviar um POST.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_put(cpf, perfil_usuario, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param PerfilUsuario perfil_usuario: Dados para criação ou atualização do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_put_with_http_info(cpf, perfil_usuario, **kwargs)  # noqa: E501

    def account_perfil_put_with_http_info(self, cpf, perfil_usuario, **kwargs):  # noqa: E501
        """Atualiza perfil para criação de conta.  # noqa: E501

        Atualiza um perfil de usuário associado a um login para o processo de criação de um usuário. Cada chamada modifica o perfil. Quando o perfil estiver pronto para ser submetido para criação de conta, basta enviar um POST.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_put_with_http_info(cpf, perfil_usuario, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param PerfilUsuario perfil_usuario: Dados para criação ou atualização do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf', 'perfil_usuario']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_put`")  # noqa: E501
        # verify the required parameter 'perfil_usuario' is set
        if ('perfil_usuario' not in local_var_params or
                local_var_params['perfil_usuario'] is None):
            raise ApiValueError("Missing the required parameter `perfil_usuario` when calling `account_perfil_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'perfil_usuario' in local_var_params:
            body_params = local_var_params['perfil_usuario']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_perfil_submetido_get(self, cpf, **kwargs):  # noqa: E501
        """Retorna o estado de submissão de um perfil  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_submetido_get(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Submetido
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.account_perfil_submetido_get_with_http_info(cpf, **kwargs)  # noqa: E501

    def account_perfil_submetido_get_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """Retorna o estado de submissão de um perfil  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_perfil_submetido_get_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cpf: CPF do perfil (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Submetido, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_perfil_submetido_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in local_var_params or
                local_var_params['cpf'] is None):
            raise ApiValueError("Missing the required parameter `cpf` when calling `account_perfil_submetido_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in local_var_params:
            path_params['cpf'] = local_var_params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/perfil/{cpf}/submetido/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submetido',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
