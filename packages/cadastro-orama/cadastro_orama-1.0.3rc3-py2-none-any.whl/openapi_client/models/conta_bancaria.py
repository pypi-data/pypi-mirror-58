# coding: utf-8

"""
    Criação de Contas

    API de Criação de Contas.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: cadastro_api@orama.com.br
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ContaBancaria(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'banco': 'str',
        'agencia': 'str',
        'conta': 'str',
        'digito': 'str',
        'cotitular_conjuge': 'bool',
        'cpf_conjuge': 'str'
    }

    attribute_map = {
        'banco': 'banco',
        'agencia': 'agencia',
        'conta': 'conta',
        'digito': 'digito',
        'cotitular_conjuge': 'cotitularConjuge',
        'cpf_conjuge': 'cpfConjuge'
    }

    def __init__(self, banco=None, agencia=None, conta=None, digito=None, cotitular_conjuge=None, cpf_conjuge=None):  # noqa: E501
        """ContaBancaria - a model defined in OpenAPI"""  # noqa: E501

        self._banco = None
        self._agencia = None
        self._conta = None
        self._digito = None
        self._cotitular_conjuge = None
        self._cpf_conjuge = None
        self.discriminator = None

        self.banco = banco
        self.agencia = agencia
        self.conta = conta
        self.digito = digito
        if cotitular_conjuge is not None:
            self.cotitular_conjuge = cotitular_conjuge
        if cpf_conjuge is not None:
            self.cpf_conjuge = cpf_conjuge

    @property
    def banco(self):
        """Gets the banco of this ContaBancaria.  # noqa: E501

        Banco da conta, string com o numero do banco  # noqa: E501

        :return: The banco of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._banco

    @banco.setter
    def banco(self, banco):
        """Sets the banco of this ContaBancaria.

        Banco da conta, string com o numero do banco  # noqa: E501

        :param banco: The banco of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if banco is None:
            raise ValueError("Invalid value for `banco`, must not be `None`")  # noqa: E501

        self._banco = banco

    @property
    def agencia(self):
        """Gets the agencia of this ContaBancaria.  # noqa: E501

        Agencia bancaria da conta corrente  # noqa: E501

        :return: The agencia of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._agencia

    @agencia.setter
    def agencia(self, agencia):
        """Sets the agencia of this ContaBancaria.

        Agencia bancaria da conta corrente  # noqa: E501

        :param agencia: The agencia of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if agencia is None:
            raise ValueError("Invalid value for `agencia`, must not be `None`")  # noqa: E501
        if agencia is not None and len(agencia) > 5:
            raise ValueError("Invalid value for `agencia`, length must be less than or equal to `5`")  # noqa: E501

        self._agencia = agencia

    @property
    def conta(self):
        """Gets the conta of this ContaBancaria.  # noqa: E501

        Número da conta corrente sem o dígito verificador  # noqa: E501

        :return: The conta of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._conta

    @conta.setter
    def conta(self, conta):
        """Sets the conta of this ContaBancaria.

        Número da conta corrente sem o dígito verificador  # noqa: E501

        :param conta: The conta of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if conta is None:
            raise ValueError("Invalid value for `conta`, must not be `None`")  # noqa: E501
        if conta is not None and len(conta) > 12:
            raise ValueError("Invalid value for `conta`, length must be less than or equal to `12`")  # noqa: E501

        self._conta = conta

    @property
    def digito(self):
        """Gets the digito of this ContaBancaria.  # noqa: E501

        Digito verificador da conta corrente  # noqa: E501

        :return: The digito of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._digito

    @digito.setter
    def digito(self, digito):
        """Sets the digito of this ContaBancaria.

        Digito verificador da conta corrente  # noqa: E501

        :param digito: The digito of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if digito is None:
            raise ValueError("Invalid value for `digito`, must not be `None`")  # noqa: E501
        if digito is not None and not re.search(r'\d{0,2}', digito):  # noqa: E501
            raise ValueError(r"Invalid value for `digito`, must be a follow pattern or equal to `/\d{0,2}/`")  # noqa: E501

        self._digito = digito

    @property
    def cotitular_conjuge(self):
        """Gets the cotitular_conjuge of this ContaBancaria.  # noqa: E501

        Informação se o conjuge é co-titular da conta corrente. Necessário caso seja especificado o cpfConjuge  # noqa: E501

        :return: The cotitular_conjuge of this ContaBancaria.  # noqa: E501
        :rtype: bool
        """
        return self._cotitular_conjuge

    @cotitular_conjuge.setter
    def cotitular_conjuge(self, cotitular_conjuge):
        """Sets the cotitular_conjuge of this ContaBancaria.

        Informação se o conjuge é co-titular da conta corrente. Necessário caso seja especificado o cpfConjuge  # noqa: E501

        :param cotitular_conjuge: The cotitular_conjuge of this ContaBancaria.  # noqa: E501
        :type: bool
        """

        self._cotitular_conjuge = cotitular_conjuge

    @property
    def cpf_conjuge(self):
        """Gets the cpf_conjuge of this ContaBancaria.  # noqa: E501

        CPF do conjuge caso seja conta conjunta. CPF deve ser válido. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  # noqa: E501

        :return: The cpf_conjuge of this ContaBancaria.  # noqa: E501
        :rtype: str
        """
        return self._cpf_conjuge

    @cpf_conjuge.setter
    def cpf_conjuge(self, cpf_conjuge):
        """Sets the cpf_conjuge of this ContaBancaria.

        CPF do conjuge caso seja conta conjunta. CPF deve ser válido. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  # noqa: E501

        :param cpf_conjuge: The cpf_conjuge of this ContaBancaria.  # noqa: E501
        :type: str
        """
        if cpf_conjuge is not None and not re.search(r'^\d{3}\.\d{3}\.\d{3}-\d{2}$', cpf_conjuge):  # noqa: E501
            raise ValueError(r"Invalid value for `cpf_conjuge`, must be a follow pattern or equal to `/^\d{3}\.\d{3}\.\d{3}-\d{2}$/`")  # noqa: E501

        self._cpf_conjuge = cpf_conjuge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContaBancaria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
