{"version":3,"sources":["asanaFieldView.es6.js"],"names":[],"mappings":"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","file":"asanaFieldView.js","sourcesContent":["(function() {\n\n\n/**\n * An inline editor view for selecting Asana tasks.\n */\nconst AsanaInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        options = _.defaults(options, {\n            hasRawValue: true,\n            formatResult: value => {\n                if (value && value.name) {\n                    return value.name.htmlEncode();\n                } else {\n                    return '';\n                }\n            },\n            getFieldValue: editor => {\n                const selectize = this.$field[0].selectize;\n                const selected = selectize.getValue();\n\n                return JSON.stringify(selected.map(\n                    key => _.pick(\n                        selectize.options[key],\n                        ['completed', 'gid', 'workspace_id', 'name'])));\n            },\n            isFieldDirty: (editor, initialValue) => {\n                const value = editor.getValue();\n                return initialValue !== value;\n            },\n            setFieldValue: (editor, value) => {\n                // This is a no-op, since we do this in the $.selectize call.\n            },\n        });\n\n        RB.InlineEditorView.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        return $('<select multiple class=\"asana-field\">');\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        RB.InlineEditorView.prototype.setupEvents.call(this);\n\n        this.$field.on('change', this._scheduleUpdateDirtyState.bind(this));\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for showing the editor.\n     */\n    showEditor(options={}) {\n        RB.InlineEditorView.prototype.showEditor.call(this, options);\n\n        if (this.options.focusOnOpen) {\n            this.$field[0].selectize.focus();\n        }\n    },\n});\n\n\n/**\n * A review request field view for selecting Asana tasks.\n */\nRB.ReviewRequestFields.AsanaFieldView =\n    RB.ReviewRequestFields.TextFieldView.extend({\n    autocomplete: {},\n    multiline: true,\n    useEditIconOnly: true,\n\n    taskTemplate: _.template(dedent`\n        <<%- tagName %> class=\"asana-task<% if (completed) { %> completed<% } %>\">\n         <a href=\"https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/\">\n          <div class=\"asana-task-checkbox\">\n           <svg viewBox=\"0 0 32 32\">'\n            <polygon points=\"27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615\"></polygon>\n           </svg>\n          </div>\n          <span><%- taskSummary %></span>\n         </a>\n        </<%- tagName %>>\n        `),\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const fieldName = this.jsonFieldName || this.fieldID;\n        const opts = { useExtraData: this.useExtraData };\n        const tasks = JSON.parse(this.model.getDraftField(fieldName, opts));\n        this._renderValue(tasks);\n    },\n\n    /**\n     * Render the current value of the field.\n     *\n     * Args:\n     *     tasks (Array of object):\n     *         The current value of the field.\n     */\n    _renderValue(tasks) {\n        const lis = tasks.map(task => this.taskTemplate({\n            completed: task.completed,\n            workspaceId: task.workspace_id,\n            taskId: task.gid,\n            taskSummary: task.name,\n            tagName: 'li',\n        }));\n\n        this.$el.html(`<ul>${lis.join('')}</ul>`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return AsanaInlineEditorView;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const reviewRequest = this.model.get('reviewRequest');\n        const localSite = reviewRequest.get('localSitePrefix');\n        const reviewRequestId = reviewRequest.get('id');\n        const url = `${SITE_ROOT}rbintegrations/asana/${localSite}task-search/${reviewRequestId}/`;\n        const $field = this.inlineEditorView.$field;\n        const tasks = this.$el.data('raw-value');\n\n        tasks.forEach(task => {\n            if (task.gid === undefined) {\n                task.gid = String(task.id);\n            }\n        });\n\n        this._renderValue(tasks || []);\n\n        $field.selectize({\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            labelField: 'name',\n            valueField: 'gid',\n            multiple: true,\n            options: tasks,\n            items: tasks.map(task => task.gid),\n            optgroupLabelField: 'workspace',\n            searchField: 'name',\n            sortField: [\n                { 'field': 'completed' },\n                { 'field': 'name' },\n            ],\n            render: {\n                option: (data, escape) => {\n                    return this.taskTemplate({\n                        completed: data.completed,\n                        workspaceId: data.workspace_id,\n                        taskId: data.gid,\n                        taskSummary: data.name,\n                        tagName: 'div',\n                    });\n                }\n            },\n            load(query, callback) {\n                const params = $.param({ q: query });\n\n                $.ajax({\n                    url: `${url}?${params}`,\n                    type: 'GET',\n                    error: callback.bind(this),\n                    success: res => {\n                        const items = [];\n\n                        this.clearOptionGroups();\n\n                        for (let i = 0; i < res.length; i++) {\n                            const group = res[i];\n                            this.addOptionGroup(group.workspace, group);\n\n                            for (let j = 0; j < group.tasks.length; j++) {\n                                const task = group.tasks[j];\n                                task.optgroup = group.workspace;\n                                task.workspace_id = group.workspace_id;\n\n                                const notesLines = task.notes.split('\\n');\n                                task.notes = notesLines.splice(8).join('\\n');\n\n                                items.push(task);\n                            }\n                        }\n\n                        this.refreshOptions();\n                        callback(items);\n                    },\n                });\n            },\n        });\n    },\n});\n\n\n})();\n"]}