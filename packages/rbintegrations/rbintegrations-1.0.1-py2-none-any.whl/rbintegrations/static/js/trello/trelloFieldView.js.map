{"version":3,"sources":["trelloFieldView.es6.js"],"names":[],"mappings":"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","file":"trelloFieldView.js","sourcesContent":["(function() {\n\n\n/**\n * An inline editor view for selecting Trello cards.\n */\nconst TrelloInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        options = _.defaults(options, {\n            hasRawValue: true,\n            formatResult: value => {\n                if (value && value.name) {\n                    return value.name.htmlEncode();\n                } else {\n                    return '';\n                }\n            },\n            getFieldValue: editor => {\n                const selectize = this.$field[0].selectize;\n                const selected = selectize.getValue();\n\n                return JSON.stringify(\n                    selected.map(key => selectize.options[key]));\n            },\n            isFieldDirty: (editor, initialValue) => {\n                const value = editor.getValue();\n                return (initialValue !== value);\n            },\n            setFieldValue: (editor, value) => {\n                // This is a no-op, since we do this in the $.selectize call.\n            },\n        });\n\n        RB.InlineEditorView.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        return $('<select multiple class=\"trello-field\">');\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        RB.InlineEditorView.prototype.setupEvents.call(this);\n\n        this.$field.on('change', this._scheduleUpdateDirtyState.bind(this));\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for showing the editor.\n     */\n    showEditor(options={}) {\n        RB.InlineEditorView.prototype.showEditor.call(this, options);\n\n        if (this.options.focusOnOpen) {\n            this.$field[0].selectize.focus();\n        }\n    },\n});\n\n\n/**\n * A review request field view for selecting Trello cards.\n */\nRB.ReviewRequestFields.TrelloFieldView =\n    RB.ReviewRequestFields.TextFieldView.extend({\n    autocomplete: {},\n    multiline: true,\n    useEditIconOnly: true,\n\n    cardTemplate: _.template(dedent`\n        <<%- tagName %> class=\"trello-card\">\n         <div class=\"trello-card-card\">\n          <a href=\"<%- url %>\"><%- name %></a>\n         </div>\n         <div class=\"trello-card-details\">\n          on <span class=\"trello-card-list\"><%- list %></span>\n          in <span class=\"trello-card-board\"><%- board %></span>\n         </div>\n        </<%- tagName %>>\n        `),\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const cards = JSON.parse(this.model.getDraftField(\n            this.jsonFieldName || this.fieldID, {\n                useExtraData: this.useExtraData,\n            }));\n        this._renderValue(cards);\n    },\n\n    /**\n     * Render the current value of the field.\n     *\n     * Args:\n     *     cards (Array of object):\n     *         The current set of cards to list.\n     */\n    _renderValue(cards) {\n        const items = cards.map(card => this.cardTemplate(_.defaults({\n            tagName: 'li',\n        }, card)));\n        this.$el.html(`<ul>${items.join('')}</ul>`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return TrelloInlineEditorView;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const reviewRequest = this.model.get('reviewRequest');\n        const localSite = reviewRequest.get('localSitePrefix');\n        const reviewRequestId = reviewRequest.get('id');\n        const url = `${SITE_ROOT}rbintegrations/trello/${localSite}card-search/${reviewRequestId}/`;\n        const $field = this.inlineEditorView.$field;\n        const cards = this.$el.data('raw-value');\n\n        this._renderValue(cards || []);\n\n        $field.selectize({\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            multiple: true,\n            labelField: 'name',\n            valueField: 'id',\n            searchField: 'name',\n            options: cards,\n            items: _.pluck(cards, 'id'),\n            render: {\n                option: (data, escape) => this.cardTemplate(_.defaults({\n                    tagName: 'div',\n                }, data)),\n            },\n            load(query, callback) {\n                const params = $.param({ q: query });\n\n                $.ajax({\n                    url: `${url}?${params}`,\n                    type: 'GET',\n                    error: callback.bind(this),\n                    success: res => callback(res),\n                });\n            },\n        });\n    },\n});\n\n\n})();\n"]}