(function(){"use strict";(function(){var AsanaInlineEditorView=RB.InlineEditorView.extend({initialize:function initialize(options){var _this=this;options=_.defaults(options,{hasRawValue:true,formatResult:function formatResult(value){if(value&&value.name){return value.name.htmlEncode()}else{return""}},getFieldValue:function getFieldValue(editor){var selectize=_this.$field[0].selectize;var selected=selectize.getValue();return JSON.stringify(selected.map(function(key){return _.pick(selectize.options[key],["completed","gid","workspace_id","name"])}))},isFieldDirty:function isFieldDirty(editor,initialValue){var value=editor.getValue();return initialValue!==value},setFieldValue:function setFieldValue(editor,value){}});RB.InlineEditorView.prototype.initialize.call(this,options)},createField:function createField(){return $('<select multiple class="asana-field">')},setupEvents:function setupEvents(){RB.InlineEditorView.prototype.setupEvents.call(this);this.$field.on("change",this._scheduleUpdateDirtyState.bind(this))},showEditor:function showEditor(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};RB.InlineEditorView.prototype.showEditor.call(this,options);if(this.options.focusOnOpen){this.$field[0].selectize.focus()}}});RB.ReviewRequestFields.AsanaFieldView=RB.ReviewRequestFields.TextFieldView.extend({autocomplete:{},multiline:true,useEditIconOnly:true,taskTemplate:_.template('<<%- tagName %> class="asana-task<% if (completed) { %> completed<% } %>">\n <a href="https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/">\n  <div class="asana-task-checkbox">\n   <svg viewBox="0 0 32 32">\'\n    <polygon points="27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615"></polygon>\n   </svg>\n  </div>\n  <span><%- taskSummary %></span>\n </a>\n</<%- tagName %>>'),_formatField:function _formatField(){var fieldName=this.jsonFieldName||this.fieldID;var opts={useExtraData:this.useExtraData};var tasks=JSON.parse(this.model.getDraftField(fieldName,opts));this._renderValue(tasks)},_renderValue:function _renderValue(tasks){var _this2=this;var lis=tasks.map(function(task){return _this2.taskTemplate({completed:task.completed,workspaceId:task.workspace_id,taskId:task.gid,taskSummary:task.name,tagName:"li"})});this.$el.html("<ul>"+lis.join("")+"</ul>")},_getInlineEditorClass:function _getInlineEditorClass(){return AsanaInlineEditorView},_buildAutoComplete:function _buildAutoComplete(){var _this3=this;var reviewRequest=this.model.get("reviewRequest");var localSite=reviewRequest.get("localSitePrefix");var reviewRequestId=reviewRequest.get("id");var url=SITE_ROOT+"rbintegrations/asana/"+localSite+"task-search/"+reviewRequestId+"/";var $field=this.inlineEditorView.$field;var tasks=this.$el.data("raw-value");tasks.forEach(function(task){if(task.gid===undefined){task.gid=String(task.id)}});this._renderValue(tasks||[]);$field.selectize({copyClassesToDropdown:true,dropdownParent:"body",labelField:"name",valueField:"gid",multiple:true,options:tasks,items:tasks.map(function(task){return task.gid}),optgroupLabelField:"workspace",searchField:"name",sortField:[{field:"completed"},{field:"name"}],render:{option:function option(data,escape){return _this3.taskTemplate({completed:data.completed,workspaceId:data.workspace_id,taskId:data.gid,taskSummary:data.name,tagName:"div"})}},load:function load(query,callback){var _this4=this;var params=$.param({q:query});$.ajax({url:url+"?"+params,type:"GET",error:callback.bind(this),success:function success(res){var items=[];_this4.clearOptionGroups();for(var i=0;i<res.length;i++){var group=res[i];_this4.addOptionGroup(group.workspace,group);for(var j=0;j<group.tasks.length;j++){var task=group.tasks[j];task.optgroup=group.workspace;task.workspace_id=group.workspace_id;var notesLines=task.notes.split("\n");task.notes=notesLines.splice(8).join("\n");items.push(task)}}_this4.refreshOptions();callback(items)}})}})}})})();"use strict";(function(){var TrelloInlineEditorView=RB.InlineEditorView.extend({initialize:function initialize(options){var _this=this;options=_.defaults(options,{hasRawValue:true,formatResult:function formatResult(value){if(value&&value.name){return value.name.htmlEncode()}else{return""}},getFieldValue:function getFieldValue(editor){var selectize=_this.$field[0].selectize;var selected=selectize.getValue();return JSON.stringify(selected.map(function(key){return selectize.options[key]}))},isFieldDirty:function isFieldDirty(editor,initialValue){var value=editor.getValue();return initialValue!==value},setFieldValue:function setFieldValue(editor,value){}});RB.InlineEditorView.prototype.initialize.call(this,options)},createField:function createField(){return $('<select multiple class="trello-field">')},setupEvents:function setupEvents(){RB.InlineEditorView.prototype.setupEvents.call(this);this.$field.on("change",this._scheduleUpdateDirtyState.bind(this))},showEditor:function showEditor(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};RB.InlineEditorView.prototype.showEditor.call(this,options);if(this.options.focusOnOpen){this.$field[0].selectize.focus()}}});RB.ReviewRequestFields.TrelloFieldView=RB.ReviewRequestFields.TextFieldView.extend({autocomplete:{},multiline:true,useEditIconOnly:true,cardTemplate:_.template('<<%- tagName %> class="trello-card">\n <div class="trello-card-card">\n  <a href="<%- url %>"><%- name %></a>\n </div>\n <div class="trello-card-details">\n  on <span class="trello-card-list"><%- list %></span>\n  in <span class="trello-card-board"><%- board %></span>\n </div>\n</<%- tagName %>>'),_formatField:function _formatField(){var cards=JSON.parse(this.model.getDraftField(this.jsonFieldName||this.fieldID,{useExtraData:this.useExtraData}));this._renderValue(cards)},_renderValue:function _renderValue(cards){var _this2=this;var items=cards.map(function(card){return _this2.cardTemplate(_.defaults({tagName:"li"},card))});this.$el.html("<ul>"+items.join("")+"</ul>")},_getInlineEditorClass:function _getInlineEditorClass(){return TrelloInlineEditorView},_buildAutoComplete:function _buildAutoComplete(){var _this3=this;var reviewRequest=this.model.get("reviewRequest");var localSite=reviewRequest.get("localSitePrefix");var reviewRequestId=reviewRequest.get("id");var url=SITE_ROOT+"rbintegrations/trello/"+localSite+"card-search/"+reviewRequestId+"/";var $field=this.inlineEditorView.$field;var cards=this.$el.data("raw-value");this._renderValue(cards||[]);$field.selectize({copyClassesToDropdown:true,dropdownParent:"body",multiple:true,labelField:"name",valueField:"id",searchField:"name",options:cards,items:_.pluck(cards,"id"),render:{option:function option(data,escape){return _this3.cardTemplate(_.defaults({tagName:"div"},data))}},load:function load(query,callback){var params=$.param({q:query});$.ajax({url:url+"?"+params,type:"GET",error:callback.bind(this),success:function success(res){return callback(res)}})}})}})})()}).call(this);
