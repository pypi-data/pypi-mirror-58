#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_demo.ipynb (unless otherwise specified).

__all__ = ['info', 'corr', 'fit_transform']

#Cell
def info(df):
    print('The number of users is '+str(df.user_id.nunique()))
    print('The number of channels is '+str(df.channel_id.nunique()))
    print('The size of correlation matrix is '+str(df.user_id.nunique()*df.channel_id.nunique()))

#Cell
def corr(df):
    corr_df = df.assign(**{'value': 1}).pivot(index='user_id', columns='channel_id', values='value').fillna(0).corr()
    corr_df.index.names = ['left']
    corr_df.columns.names = ['right']
    corr_df_long = corr_df.stack().reset_index().rename(columns={0:'cor'})
    return corr_df_long

#Cell
def fit_transform(df, corr_df_long):

    # merge
    merged_df = pd.merge(df, corr_df_long, left_on = 'channel_id', right_on = 'left', how = 'left')
    merged_df['distance'] = -np.log((merged_df['cor'] / 2) + 0.5)
    merged_df = merged_df.drop(columns = ['cor'])

    print("merged_df size is:")
    print(merged_df.index.size)
    print("merged_df column names:")
    print(merged_df.columns.values)
    print("For each user_id, each channel, there are ___ channels to recommend:")
    print(np.mean(merged_df.groupby(['user_id','channel_id']).right.count()))
    print(np.mean(merged_df.groupby(['user_id','left']).right.count()))

    # merge 2
    merged_df2 = merged_df.groupby(['user_id','left']).apply(lambda x: x.nsmallest(8,columns='distance')) \
        [['right','distance']].reset_index() \
        [['user_id','right','distance']]

    print("Each user has %s recommendations:" % np.round(np.mean(merged_df2.groupby(['user_id']).right.nunique())))

    # output
    output_df = merged_df2.groupby(['user_id','right'])['distance'].mean().reset_index()
    output_df['score'] = 1 - output_df.distance
    output_df = output_df.drop(columns = ['distance']) \
        .sort_values(['user_id', 'score'], ascending=[False,False]) \
        .rename(columns = {'right':'channel_id'})

    print("The recommendation count < 8 ratio is:")
    print(np.mean(output_df.groupby(['user_id']).channel_id.nunique() < 8))

    return output_df