# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class AlertChannel(pulumi.CustomResource):
    configuration: pulumi.Output[dict]
    """
    A map of key / value pairs with channel type specific values. See channel configurations for specific configurations for the different channel types.
    """
    name: pulumi.Output[str]
    """
    The name of the channel.
    """
    type: pulumi.Output[str]
    """
    The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.
    """
    def __init__(__self__, resource_name, opts=None, configuration=None, name=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Use this resource to create and manage New Relic alert policies.
        
        ## Channel Configurations
        
        Each supported channel supports a particular set of configuration arguments.
        
          * `email`
            * `recipients` - (Required) Comma delimited list of email addresses.
            * `include_json_attachment` - (Optional) `0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients. Default: `0`
          * `slack`
            * `url` - (Required) Your organization's Slack URL.
            * `channel` - (Required) The Slack channel for which to send notifications.
          * `opsgenie`
            * `api_key` - (Required) Your OpsGenie API key.
            * `teams` - (Optional) Comma delimited list of teams.
            * `tags` - (Optional) Comma delimited list of tags.
            * `recipients` - (Optional) Comma delimited list of email addresses.
          * `pagerduty`
            * `service_key` - (Required) Your PagerDuty service key.
          * `victorops`
            * `key` - (Required) Your VictorOps key.
            * `route_key` - (Required) The route for which to send notifications.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] configuration: A map of key / value pairs with channel type specific values. See channel configurations for specific configurations for the different channel types.
        :param pulumi.Input[str] name: The name of the channel.
        :param pulumi.Input[str] type: The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_channel.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if configuration is None:
                raise TypeError("Missing required property 'configuration'")
            __props__['configuration'] = configuration
            __props__['name'] = name
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(AlertChannel, __self__).__init__(
            'newrelic:index/alertChannel:AlertChannel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, configuration=None, name=None, type=None):
        """
        Get an existing AlertChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] configuration: A map of key / value pairs with channel type specific values. See channel configurations for specific configurations for the different channel types.
        :param pulumi.Input[str] name: The name of the channel.
        :param pulumi.Input[str] type: The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_channel.html.markdown.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["configuration"] = configuration
        __props__["name"] = name
        __props__["type"] = type
        return AlertChannel(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

