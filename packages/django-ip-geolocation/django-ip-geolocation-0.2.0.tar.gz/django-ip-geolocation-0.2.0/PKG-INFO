Metadata-Version: 2.1
Name: django-ip-geolocation
Version: 0.2.0
Summary: Django request/response hook (Middleware and Decorator) to geolocate visitors using their IP address
Home-page: https://github.com/rednaks/django-ip-geolocation
Author: Skander Ben Mahmoud
Author-email: skander.bmahmoud@gmail.com
License: MIT
Description: # Django Ip Geolocation:
        Django request/response hooks to geolocate visitors by their ip address
        
        # Usage:
        ## Decorator:
        Use decorators to decorate views :
        ```python
        from django_ip_geolocation.decorators import with_ip_geolocation
        
        @with_ip_geolocation
        def api_view(request):
           location = request.location
           ...
        ```
        
        ## Middleware:
        
        First you need to add the middleware into your `settings.py`
        ```python
        MIDDLEWARE = [
            ...
            'django_ip_geolocation.middleware.IpGeolocationMiddleware',
            ...
        ]
        ```
        
        Then the location is available to all views in request and response:
        ```python
        def api_view(request):
           location = request.location
           ...
           
        def other_view(request):
          location = request.location
          ...
        ```
        
        ## Settings
        You can configure settings for your hook in the `settings.py` as follow:
        ```python
        
        IP_GEOLOCATION_SETTINGS = {
            'BACKEND': 'django_ip_geolocation.backends.IPGeolocationAPI',
            'BACKEND_API_KEY': '',
            'BACKEND_USERNAME': '',
            'RESPONSE_HEADER': 'X-IP-Geolocation',
            'ENABLE_REQUEST_HOOK': True,
            'ENABLE_RESPONSE_HOOK': True,
        }
        
        ```
        
        Those are the default settings, that will be overwritten by those set in `settings.py`
        
        
        | setting                | description                                     | default value (type)                                                  |
        |------------------------|-------------------------------------------------|-----------------------------------------------------------------------|
        | `BACKEND`              | Backend class used to detect the geolocation    | `django_ip_geolocation.backends.IPGeolocationAPI` (string class path) |
        | `BACKEND_API_KEY`      | Api key or token for the backend                | Empty (string)                                                        |
        | `BACKEND_USERNAME`     | username for the backend                        | Empty (string)                                                        |
        | `RESPONSE_HEADER`      | Custom response header to store the geolocation | `X-IP-Geolocation` (string)                                           |
        | `ENABLE_REQUEST_HOOK`  | Enable or disable hook on request               | `True` (bool)                                                         |
        | `ENABLE_RESPONSE_HOOK` | Enable or disable hook on request               | `True` (bool)                                                         |
        
        ### Available Backends:
        * `django_ip_geolocation.backends.IPGeolocationAPI` : (Default) Using https://ipgeolocationapi.com/
        * `django_ip_geolocation.backends.IPStack` : (Require `BACKEND_API_KEY`) Using https://ipstack.com/documentation
        
        
        ## Implementing your own backend:
        If you want to add a new backend, you need to inherit from `django_ip_geolocation.backends.base`. Then you need to implement `geolocate()` and `_parse()`.
        ### `geolocate()`:
        This method will make the external api call. It should also store the api response in `self._raw_data`. and call `self._parse()`.
        
        ### `_parse()`:
        This method will parse raw data stored in `self._raw_data` and assign values to the class attribute, such as `self._continent`, `self._county`, `self._geo`.
        `self._country` is a dict, with `code` and `name` keys.
        `self._geo` is a dict with `latitude` and `longitude` keys.
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Description-Content-Type: text/markdown
