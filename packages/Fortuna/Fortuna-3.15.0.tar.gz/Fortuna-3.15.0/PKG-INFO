Metadata-Version: 2.1
Name: Fortuna
Version: 3.15.0
Summary: Custom Random Value Generators
Home-page: UNKNOWN
Author: Robert Sharp
Author-email: webmaster@sharpdesigndigital.com
License: Free for non-commercial use
Description: # Fortuna: A Collection of Random Value Generators for Python3
        Fortuna's main goal is to provide a quick and easy way to build custom random-value functions for your data. Fortuna also offers a variety of high-performance dice functions.
        
        The core functionality of Fortuna is based on the Storm c++ library. While Storm has a high quality, hardware seeded random engine - it is not appropriate for cryptography of any kind. Fortuna is meant for games, data science, A.I. and experimental programming, not security.
        
        
        ### Quick Install `$ pip install Fortuna`
        
        
        ### Installation may require the following:
        - Python 3.6 or later with dev tools (setuptools, pip, etc.)
        - Cython: Bridge from C/C++ to Python.
        - Modern C++17 Compiler and Standard Library.
        
        
        ### Sister Projects (included but documented separately):
        - RNG: Python3 API for the C++ Random Library. https://pypi.org/project/RNG/
        - Pyewacket: Drop-in replacement for the Python3 random module. https://pypi.org/project/Pyewacket/
        - MonkeyScope: Framework for testing non-deterministic functions. https://pypi.org/project/MonkeyScope/
        
        
        ---
        
        ### Table of Contents:
        - Numeric Limits
        - Random Value Classes
            - `RandomValue(Iterable) -> Callable -> Value`
            - `TruffleShuffle(Iterable) -> Callable -> Value`
            - `QuantumMonty(Iterable) -> Callable -> Value`
            - `CumulativeWeightedChoice(Iterable[Tuple[int, Any]]) -> Callable -> Value`
            - `RelativeWeightedChoice(Iterable[Tuple[int, Any]]) -> Callable -> Value`
            - `FlexCat(Dict[str, Iterable[Any]]) -> Callable -> Value`
        - Random Value Functions
            - `random_value(data: Sequence[Any]) -> Any`
            - `cumulative_weighted_choice(Sequence[Tuple[int, Any]]) -> Any`
        - Random Integer Functions
            - `random_below(Integer) -> Integer`
            - `random_int(Integer, Integer) -> Integer`
            - `random_range(Integer, Integer, Integer) -> Integer`
            - `d(Integer) -> Integer`
            - `dice(Integer, Integer) -> Integer`
            - `plus_or_minus(Integer) -> Integer`
            - `plus_or_minus_linear(Integer) -> Integer`
            - `plus_or_minus_gauss(Integer) -> Integer`
        - Random Index Functions 
            - ZeroCool Specification: `f(N) -> [0, N)` or `f(-N) -> [-N, 0)`
            - `random_index(Integer) -> Integer`
            - `front_gauss(Integer) -> Integer`
            - `middle_gauss(Integer) -> Integer`
            - `back_gauss(Integer) -> Integer`
            - `quantum_gauss(Integer) -> Integer`
            - `front_poisson(Integer) -> Integer`
            - `middle_poisson(Integer) -> Integer`
            - `back_poisson(Integer) -> Integer`
            - `quantum_poisson(Integer) -> Integer`
            - `front_linear(Integer) -> Integer`
            - `middle_linear(Integer) -> Integer`
            - `back_linear(Integer) -> Integer`
            - `quantum_linear(Integer) -> Integer`
            - `quantum_monty(Integer) -> Integer`
        - Random Float Functions
            - `canonical() -> Float`
            - `random_float(Float, Float) -> Float`
            - `triangular(Float, Float, Float) -> Float`
        - Random Boolean Functions
            - `percent_true(Float) -> Boolean`
        - Inplace Shuffle Algorithms
            - `shuffle(List[Any]) -> None`
            - `knuth_a(List[Any]) -> None`
            - `fisher_yates(List[Any]) -> None`
        - Utilities
            - `flatten(Object, *args, Boolean, **kwargs) -> Object`
            - `smart_clamp(Integer, Integer, Integer) -> Integer`
            - `MultiChoice(str, Iterable[str], str, bool, str) -> Callable -> str`
        - Development Log
        - Test Suite Output
        - Legal Information
        
        
        #### Numeric Limits:
        - Integer: 64 bit signed integer.
            - Range: ±9223372036854775807, approximately ±9.2 billion billion
        - Float: 64 bit floating point.
            - Range: ±1.7976931348623157e+308
            - Epsilon Delta: 5e-305 to 5e-324, platform dependant
        
        ----
        
        ## Random Value Engines
        
        ### Fortuna.RandomValue
        `Fortuna.RandomValue(collection: Iterable[Any], zero_cool=random_index, flat=True) -> Callable -> Value`
        
        Random Value Engine Class that supports dependency injection.
        - @param collection :: Iterable of Values. Tuple recommended.
        - @param zero_cool :: Optional ZeroCool Callable, kwarg only. Default = random_index(). This function must follow the ZeroCool Spec.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Object. `Callable(*args, **kwargs) -> Value`
                - Default = 0, kwarg only. Parameter for ZeroCool Method. `range_to=0` indicates the intent to use the whole collection.
            - @param *args, **kwargs :: Optional arguments used to flatten the return Value (below) if Callable.
            - @return Value or Value(*args, **kwargs) if the value itself is callable. This is recursive.
        
        #### RandomValue Dependency Injection Example
        ```python
        from Fortuna import RandomValue, front_linear, back_linear
        
        # Data Setup
        random_apple = RandomValue((
            "Delicious", 
            "Empire", 
            "Granny Smith", 
            "Honey Crisp", 
            "Macintosh",
        ), zero_cool=front_linear)
        random_fruit = RandomValue((
            lambda: f"Apple, {random_apple()}",
            "Banana",
            "Cherry",
            "Grapes",
            "Orange",
        ), zero_cool=back_linear)
        
        # Usage
        print(random_fruit())
        # prints a random fruit with the correct distributions
        
        ```
        
        
        #### RandomValue with Auto Flattening
        Auto Flattening work with all random generator classes in Fortuna.
        ```python
        from Fortuna import RandomValue
        
        
        auto_flat = RandomValue([lambda: 1, lambda: 2, lambda: 3])
        print(auto_flat())  # will print the value 1, 2 or 3.
        # Note: the lambda will not be called until call time and stays dynamic for the life of the object.
        
        auto_flat_with = RandomValue([lambda x: x, lambda x: x + 1, lambda x:  x + 2])
        print(auto_flat_with(2))  # will print the value 2, 3 or 4
        # Note: if this is called with no args it will simply return the lambda in an uncalled state.
        
        un_flat = RandomValue([lambda: 1, lambda: 2, lambda: 3], flat=False)
        print(un_flat()())  # will print the value 1, 2 or 3, 
        # mind the double-double parenthesis, they are required to manually unpack the lambdas
        
        auto_un_flat = RandomValue([lambda x: x, lambda x: x + 1, lambda x:  x + 2], flat=False)
        # Note: flat=False is not required here because the lambdas can not be called without input x satisfied.
        # It is recommended to specify flat=False if non-flat output is intended.
        print(auto_un_flat()(1))  # will print the value 1, 2 or 3, mind the double-double parenthesis
        ```
        
        #### Mixing Static Objects with Callable Objects
        Auto Flattening work with all random generator classes in Fortuna.
        ```python
        from Fortuna import RandomValue
        
        
        """ With automatic flattening active, `lambda() -> int` can be treated as an `int`. """
        mixed_flat = RandomValue([1, 2, lambda: 3])
        print(mixed_flat())  # will print 1, 2 or 3
        
        """ Mixed Anti-pattern """
        mixed_un_flat = RandomValue([1, 2, lambda: 3], flat=False) # this is not recommended.
        print(mixed_flat())  # will print 1, 2 or "Function <lambda at some_address>"
        # This pattern is not recommended because you wont know the nature of what you get back.
        # This is almost always not what you want, and it can give rise to messy logic in other areas of your code.
        ```
        
        #### Dynamic Strings
        To successfully express a dynamic string, and keep it dynamic for the duration of the program, at least one level of indirection is required. Without a lambda - the f-string would collapse into a static string too soon.
        This works with all random generator classes in Fortuna.
        
        ```python
        from Fortuna import RandomValue, d
        
        
        # d() is a simple dice function, d(n) -> [1, n] flat uniform distribution.
        dynamic_string = RandomValue((
            # while the probability of all A == all B == all C, individual probabilities of each possible string will differ based on the number of possible outputs of each category.
            lambda: f"A{d(2)}",  # -> A1 - A2, each are twice as likely as any particular B, and three times as likely as any C.
            lambda: f"B{d(4)}",  # -> B1 - B4, each are half as likely as any particular A, and 3/2 as likely as any C.
            lambda: f"C{d(6)}",  # -> C1 - C6, each are 1/3 as likely as any particular A and 2/3 as likely of any B.
        ))
        
        print(dynamic_string())  # prints a random dynamic string, generated at call time.
        ```
        
        #### Nesting Dolls
        This works with all random generator classes in Fortuna.
        ```python
        from Fortuna import RandomValue
        
        # Data Setup
        nesting_dolls = RandomValue((
            RandomValue(("A", "B", "C", "D", "E")),
            RandomValue(("F", "G", "H", "I", "J")),
            RandomValue(("K", "L", "M", "N", "O")),
            RandomValue(("P", "Q", "R", "S", "T")),
        ))
        
        # Usage
        print(nesting_dolls())  
        # prints one of the letters A-T, flat uniform distribution of each category and within each category.
        ```
        
        
        ### TruffleShuffle
        `Fortuna.TruffleShuffle(collection: Iterable[Any], flat=True) -> Callable -> Value`
        - @param collection :: Iterable of Values. Set recommended but not required.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Object. `Callable(*args, **kwargs) -> Value`
            - @param *args, **kwargs :: Optional arguments used to flatten the return Value (below) if Callable.
            - @return :: Random value from the collection with a Wide Uniform Distribution. 
            
        Wide Uniform Distribution: "Wide" refers to the average distance between consecutive occurrences of the same value. The average width of the output distribution will naturally scale up with the size of the collection. The goal of this type of distribution is to keep the output sequence free of clumps or streaks of the same value, while maintaining randomness and uniform probability. This is not the same as a flat uniform distribution. The two distributions over time will be statistically similar for any given set, but the repetitiveness of the output sequence will be very different.
        
        #### TruffleShuffle, Basic Use
        ```python
        from Fortuna import TruffleShuffle
        
        # Data Setup
        list_of_values = { 1, 2, 3, 4, 5, 6 }
        truffle_shuffle = TruffleShuffle(list_of_values)
        
        # Usage
        print(truffle_shuffle())  # this will print one of the numbers 1-6, 
        # repeated calls will produce a wide distribution.
        ```
        
        
        ### QuantumMonty
        `Fortuna.QuantumMonty(collection: Iterable[Any], flat=True) -> Callable -> Value`
        - @param collection :: Iterable of Values. Tuple recommended.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Object with Monty Methods for producing various distributions of the data.
            - @param *args, **kwargs :: Optional arguments used to flatten the return Value (below) if Callable.
            - @return :: Random value from the data. The instance will produce random values from the list using the selected distribution model or "monty". The default monty is the Quantum Monty Algorithm.
        
        ```python
        from Fortuna import QuantumMonty
        
        # Data Setup
        list_of_values = [1, 2, 3, 4, 5, 6]
        monty = QuantumMonty(list_of_values)
        
        # Usage
        print(monty())               # prints a random value from the list_of_values.
                                     # uses the default Quantum Monty Algorithm.
        
        print(monty.flat_uniform())  # prints a random value from the list_of_values.
                                     # uses the "flat_uniform" monty.
                                     # equivalent to random.choice(list_of_values).
        ```
        The QuantumMonty class represents a diverse collection of strategies for producing random values from a sequence where the output distribution is based on the method you choose. Generally speaking, each value in the sequence will have a probability that is based on its position in the sequence. For example: the "front" monty produces random values where the beginning of the sequence is geometrically more common than the back. Given enough samples the "front" monty will always converge to a 45 degree slope down for any list of unique values.
        
        There are three primary method families: linear, gaussian, and poisson. Each family has three base methods; 'front', 'middle', 'back', plus a 'quantum' method that incorporates all three base methods. The quantum algorithms for each family produce distributions by overlapping the probability waves of the other methods in their family. The Quantum Monty Algorithm incorporates all nine base methods.
        
        ```python
        import Fortuna
        
        # Data Setup
        monty = Fortuna.QuantumMonty(
            ["Alpha", "Beta", "Delta", "Eta", "Gamma", "Kappa", "Zeta"]
        )
        
        # Usage
        # Each of the following methods will return a random value from the sequence.
        # Each method has its own unique distribution model.
        """ Flat Base Case """
        monty.flat_uniform()        # Flat Uniform Distribution
        """ Geometric Positional """
        monty.front_linear()        # Linear Descending, Triangle
        monty.middle_linear()       # Linear Median Peak, Equilateral Triangle
        monty.back_linear()         # Linear Ascending, Triangle
        monty.quantum_linear()      # Linear Overlay, 3-way monty.
        """ Gaussian Positional """
        monty.front_gauss()         # Front Gamma
        monty.middle_gauss()        # Scaled Gaussian
        monty.back_gauss()          # Reversed Gamma
        monty.quantum_gauss()       # Gaussian Overlay, 3-way monty.
        """ Poisson Positional """
        monty.front_poisson()       # 1/4 Mean Poisson
        monty.middle_poisson()      # 1/2 Mean Poisson
        monty.back_poisson()        # 3/4 Mean Poisson
        monty.quantum_poisson()     # Poisson Overlay, 3-way monty.
        """ Quantum Monty Algorithm """
        monty()                     # Quantum Monty Algorithm, 9-way monty.
        monty.quantum_monty()       #  same as above
        ```
        
        ### Weighted Choice: Base Class
        Weighted Choice offers two strategies for selecting random values from a sequence where programmable rarity is desired. Both produce a custom distribution of values based on the weights of the values.
        
        The choice to use one strategy over the other is purely about which one suits you or your data best. Relative weights are easier to understand at a glance. However, many RPG Treasure Tables map rather nicely to a cumulative weighted strategy.
        
        #### Cumulative Weighted Choice
        `Fortuna.CumulativeWeightedChoice(weighted_table: Iterable[Tuple[int, Any]], flat=True) -> Callable -> Value`
        - @param weighted_table :: Table of weighted pairs. Tuple of Tuples recommended.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Instance
            - @param *args, **kwargs :: Optional arguments used to flatten the return Value (below) if Callable.
            - @return :: Random value from the weighted_table, distribution based on the weights of the values.
        
        _Note: Logic dictates Cumulative Weights must be unique!_
        
        ```python
        from Fortuna import CumulativeWeightedChoice
        
        # Data Setup
        cum_weighted_choice = CumulativeWeightedChoice((
            (7, "Apple"),
            (11, "Banana"),
            (13, "Cherry"),
            (23, "Grape"),
            (26, "Lime"),
            (30, "Orange"),  # same as relative weight 4 because 30 - 26 = 4
        ))
        # Usage
        print(cum_weighted_choice())  # prints a weighted random value
        ```
        
        #### Relative Weighted Choice
        `Fortuna.RelativeWeightedChoice(weighted_table: Iterable[Tuple[int, Any]]) -> Callable -> Value`
        - @param weighted_table :: Table of weighted pairs. Tuple of Tuples recommended.
        - @param flat :: Bool. Default: True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Instance
            - @param *args, **kwargs :: Optional arguments used to flatten the return Value (below) if Callable.
            - @return :: Random value from the weighted_table, distribution based on the weights of the values.
        
        ```python
        from Fortuna import RelativeWeightedChoice
        
        # Data
        population = ["Apple", "Banana", "Cherry", "Grape", "Lime", "Orange"]
        rel_weights = [7, 4, 2, 10, 3, 4]
        
        # Setup
        rel_weighted_choice = RelativeWeightedChoice(zip(rel_weights, population))
        
        # Usage
        print(rel_weighted_choice())  # prints a weighted random value
        ```
        
        ### FlexCat
        `Fortuna.FlexCat(matrix_data: Matrix, key_bias="front_linear", val_bias="truffle_shuffle", flat=True) -> Callable -> Value`
        - @param matrix_data :: Dictionary of Sequences. `Dict[str, Iterable[Any]]`
        - @parm key_bias :: Default is "front_linear". String indicating the name of the algorithm to use for random key selection.
        - @parm val_bias :: Default is "truffle_shuffle". String indicating the name of the algorithm to use for random value selection.
        - @param flat :: Bool. Default is True. Option to automatically flatten callable values with lazy evaluation.
        - @return :: Callable Instance
            - @param cat_key :: Optional String. Default is None. Key selection by name. If specified, this will override the key_bias for a single call.
            - @param *args, **kwargs :: Optional arguments used to flatten the return Value (below) if Callable.
            - @return :: Value. Returns a random value generated with val_bias from a random sequence generated with key_bias.
        
        FlexCat is like a multi dimensional QuantumMonty.
        
        The constructor takes two optional keyword arguments to specify the algorithms to be used to make random selections. The algorithm specified for selecting a key need not be the same as the one for selecting values. An optional key may be provided at call time to bypass the random key selection. Keys passed in this way must exactly match a key in the Matrix.
        
        By default, FlexCat will use key_bias="front_linear" and val_bias="truffle_shuffle", this will make the top of the data structure geometrically more common than the bottom and it will truffle shuffle the sequence values. This config is known as TopCat, it produces a descending-step, micro-shuffled distribution sequence. Many other combinations are available.
        
        Algorithmic Options: _See QuantumMonty & TruffleShuffle for more details._
        - "front_linear", Linear Descending
        - "middle_linear", Linear Median Peak
        - "back_linear", Linear Ascending
        - "quantum_linear", Linear 3-way monty
        - "front_gauss", Gamma Descending
        - "middle_gauss", Scaled Gaussian
        - "back_gauss", Gamma Ascending
        - "quantum_gauss", Gaussian 3-way monty
        - "front_poisson", Front 1/3 Mean Poisson
        - "middle_poisson", Middle Mean Poisson
        - "back_poisson", Back 1/3 Mean Poisson
        - "quantum_poisson", Poisson 3-way monty
        - "quantum_monty", Quantum Monty Algorithm, 9-way monty
        - "flat_uniform", uniform flat distribution
        - "truffle_shuffle", TruffleShuffle wide uniform distribution
        
        ```python
        from Fortuna import FlexCat, d
        
        
        #                           |- Collection Generator, does not require lambda.
        # Data                      |
        matrix_data = {#            $                         |- Dynamic Value Expression
            "Cat_A": (f"A{i}" for i in range(1, 6)),  #       |  Lazy, 1 of 4 possibilities
            "Cat_B": ("B1", "B2", "B3", "B4", "B5"),  #       $  lambda required for dynamic eval
            "Cat_C": ("C1", "C2", "C3", f"C4.{d(2)}", lambda: f"C5.{d(4)}"),
        }#   $       $       $              $                        $
        #    |       |       |- Value       |                        |- Fair die method: d4
        #    |       |                      |
        #    |       |- Collection          |- Static Value Expression
        #    |                              |  Eager, 1 or 2 permanently
        #    |- Collection Key, "cat_key"
        
        #                               |- Collection Algorithm     |- Value Algorithm
        # Setup                         $  y-axis                   $  x-axis
        flex_cat = FlexCat(matrix_data, key_bias="front_linear", val_bias="flat_uniform")
        #    $       $       $
        #    |       |       |- Dictionary of Collections
        #    |       |
        #    |       |- FlexCat Constructor
        #    |       
        #    |- Callable Random Value Generator
        
        # Usage
        flex_cat()  # returns a Value from the Matrix.
        flex_cat(cat_key="Cat_B")  # returns a Value specifically from the "Cat_B" Collection.
        ```
        ### Random Value Functions
        `Fortuna.random_value(Sequence[Any]) -> Any`
        - @param data :: Sequence of Values
        - @return :: Random value from the sequence. Flat uniform distribution.
        
        `Fortuna.cumulative_weighted_choice(weighted_table: Sequence[Tuple[int, Any]]) -> Any`
        - @param weighted_table :: Sequence of weighted value pairs. `[(w1, v1), (w2, v2)...]`
        - @return :: Returns a random value. Distribution depends on weights.
        
        ### Random Integer Generators
        `Fortuna.random_below(limit: int) -> int`
        - @param limit :: Any Integer
        - @return :: Returns a random integer in the range...
            - `random_below(N) -> [0, N)` for positive limit.
            - `random_below(N) -> (N, 0]` for negative limit.
            - `random_below(0) -> 0` Always returns zero when limit is zero
        - Flat uniform distribution.
        
        
        `Fortuna.random_int(left_limit: int, right_limit: int) -> int`
        - @param left_limit :: Any Integer
        - @param right_limit :: Any Integer
        - @return :: Returns a random integer in the range [left_limit, right_limit]
            - `random_int(1, 10) -> [1, 10]`
            - `random_int(10, 1) -> [1, 10]` same as above.
            - `random_int(A, B)` Always returns A when A == B
        - Flat uniform distribution.
        
        
        `Fortuna.random_range(start: int, stop: int = 0, step: int = 1) -> int`
        - @param start :: Required starting point.
            - `random_range(0) -> [0]`
            - `random_range(10) -> [0, 10)` from 0 to 9. Same as `Fortuna.random_index(N)`
            - `random_range(-10) -> [-10, 0)` from -10 to -1. Same as `Fortuna.random_index(-N)`
        - @param stop :: Zero by default. Optional range bound. With at least two arguments, the order of the first two does not matter.
            - `random_range(0, 0) -> [0]`
            - `random_range(0, 10) -> [0, 10)` from 0 to 9.
            - `random_range(10, 0) -> [0, 10)` same as above.
        - @param step :: One by default. Optional step size.
            - `random_range(0, 0, 0) -> [0]`
            - `random_range(0, 10, 2) -> [0, 10) by 2` even numbers from 0 to 8.
            - The sign of the step parameter controls the phase of the output. Negative stepping will flip the inclusively.
            - `random_range(0, 10, -1) -> (0, 10]` starts at 10 and ranges down to 1.
            - `random_range(10, 0, -1) -> (0, 10]` same as above.
            - `random_range(10, 10, 0) -> [10]` step size or range size of zero always returns the first parameter.
        - @return :: Returns a random integer in the range [A, B) by increments of C.
        - Flat uniform distribution.
        
        
        `Fortuna.d(sides: int) -> int`
        - Represents a single roll of a given size die.
        - @param sides :: Represents the size or number of sides, most commonly six.
        - @return :: Returns a random integer in the range [1, sides].
        - Flat uniform distribution.
        
        
        `Fortuna.dice(rolls: int, sides: int) -> int`
        - Represents the sum total of multiple rolls of the same size die.
        - @param rolls :: Represents the number of times to roll the die.
        - @param sides :: Represents the die size or number of sides, most commonly six.
        - @return :: Returns a random integer in range [X, Y] where X = rolls and Y = rolls * sides.
        - Geometric distribution based on the number and size of the dice rolled.
        - Complexity scales primarily with the number of rolls, not the size of the dice.
        
        
        `Fortuna.plus_or_minus(number: int) -> int`
        - @param number :: input to determine the output distribution range.
        - @return :: Returns a random integer in range [-number, number].
        - Flat uniform distribution.
        
        
        `Fortuna.plus_or_minus_linear(number: int) -> int`
        - @param number :: input to determine the output distribution range.
        - @return :: Returns a random integer in range [-number, number].
        - Linear geometric, 45 degree triangle distribution centered on zero.
        
        
        `Fortuna.plus_or_minus_gauss(number: int) -> int`
        - @param number :: input to determine the output distribution range.
        - @return :: Returns a random integer in range [-number, number].
        - Stretched gaussian distribution centered on zero.
        
        
        ### Random Index, ZeroCool Specification
        ZeroCool Methods are used to generate random Sequence indices.
        
        ZeroCool methods must have the following properties:
        - Any distribution model is acceptable such that...
        - The method or function must take exactly one Integer parameter N.
        - The method returns a random int in range `[0, N)` for positive values of N.
        - The method returns a random int in range `[N, 0)` for negative values of N.
        - This symmetry matches how python can index a list from the back for negative values or the front for positive values of N.
        
        
        ```python
        from Fortuna import random_index
        
        
        some_list = [i for i in range(100)] # [0..99]
        
        print(some_list[random_index(10)])  # prints one of the first 10 items of some_list, [0, 9]
        print(some_list[random_index(-10)])  # prints one of the last 10 items of some_list, [90, 99]
        ```
        ### ZeroCool Methods
        - `Fortuna.random_index(size: int) -> int` Flat uniform distribution
        - `Fortuna.front_gauss(size: int) -> int` Gamma Distribution: Front Peak
        - `Fortuna.middle_gauss(size: int) -> int` Stretched Gaussian Distribution: Median Peak
        - `Fortuna.back_gauss(size: int) -> int` Gamma Distribution: Back Peak
        - `Fortuna.quantum_gauss(size: int) -> int` Quantum Gaussian: Three-way Monty
        - `Fortuna.front_poisson(size: int) -> int` Poisson Distribution: Front 1/3 Peak
        - `Fortuna.middle_poisson(size: int) -> int` Poisson Distribution: Middle Peak
        - `Fortuna.back_poisson(size: int) -> int` Poisson Distribution: Back 1/3 Peak
        - `Fortuna.quantum_poisson(size: int) -> int` Quantum Poisson: Three-way Monty
        - `Fortuna.front_geometric(size: int) -> int` Linear Geometric: 45 Degree Front Peak
        - `Fortuna.middle_geometric(size: int) -> int` Linear Geometric: 45 Degree Middle Peak
        - `Fortuna.back_geometric(size: int) -> int` Linear Geometric: 45 Degree Back Peak
        - `Fortuna.quantum_geometric(size: int) -> int` Quantum Geometric: Three-way Monty
        - `Fortuna.quantum_monty(size: int) -> int` Quantum Monty: Nine-way Monty
        
        ```python
        from Fortuna import front_gauss, middle_gauss, back_gauss, quantum_gauss
        
        
        some_list = [i for i in range(100)]
        
        # Each of the following prints one of the first 10 items of some_list with the appropriate distribution
        print(some_list[front_gauss(10)])
        print(some_list[middle_gauss(10)])
        print(some_list[back_gauss(10)])
        print(some_list[quantum_gauss(10)])
        
        # Each of the following prints one of the last 10 items of some_list with the appropriate distribution
        print(some_list[front_gauss(-10)])  
        print(some_list[middle_gauss(-10)])  
        print(some_list[back_gauss(-10)])  
        print(some_list[quantum_gauss(-10)])
        ```
        
        ### Random Float Generators
        `Fortuna.canonical() -> float`
        - @return :: random float in range [0.0, 1.0), flat uniform.
        
        `Fortuna.random_float(a: Float, b: Float) -> Float`
        - @param a :: Float input
        - @param b :: Float input
        - @return :: random Float in range [a, b), flat uniform distribution.
        
        `Fortuna.triangular(low: Float, high: Float, mode: Float) -> Float`
        - @param low :: Float, minimum output
        - @param high :: Float, maximum output
        - @param mode :: Float, most common output, mode must be in range `[low, high]`
        - @return :: random number in range `[low, high]` with a linear distribution about the mode.
        
        
        ### Random Truth Generator
        `Fortuna.percent_true(truth_factor: Float = 50.0) -> bool`
        - @param truth_factor :: The probability of True as a percentage. Default is 50 percent.
        - @return :: Produces True or False based on the truth_factor as a percent of true.
            - Always returns False if num is 0 or less
            - Always returns True if num is 100 or more.
        
        
        ### Shuffle Algorithm
        `Fortuna.shuffle(array: List[Any]) -> None`
        - Knuth B Shuffle Algorithm. Destructive, in-place shuffle.
        - @param array :: List to be shuffled.
        - @return :: None
        
        `Fortuna.knuth_a(array: List[Any]) -> None`
        - Knuth A Shuffle Algorithm. Destructive, in-place shuffle.
        - @param array :: List to be shuffled.
        - @return :: None
        
        `Fortuna.fisher_yates(array: List[Any]) -> None`
        - Fisher Yates Shuffle Algorithm. Destructive, in-place shuffle.
        - @param array :: List to be shuffled.
        - @return :: None
        
        
        ### Utilities
        `Fortuna.flatten(maybe_callable, *args, flat=True, **kwargs) -> flatten(maybe_callable(*args, **kwargs))`
        - Recursively calls the input object and returns the result. The arguments are only passed in on the first evaluation.
        - If the maybe_callable is not callable it is simply returned without error. 
        - Conceptually this is somewhat like collapsing the wave function. Often used as the last step in lazy evaluation.
        - @param maybe_callable :: Any Object that might be callable.
        - @param flat :: Boolean, default is True. Optional, keyword only. 
            - Disables flattening if flat is set to False, conceptually turns flatten into the identity function.
        - @param *args, **kwargs :: Optional arguments used to flatten the maybe_callable object.
        - @return :: Recursively Flattened Object.
        
        `Fortuna.smart_clamp(target: int, lo: int, hi: int) -> int`
        - Used to clamp the target in range [lo, hi] by saturating the bounds.
        - Essentially the same as median for exactly three integers.
        - @return :: Returns the middle value, input order does not matter.
        
        
        ### MultiChoice
        ```
        Fortuna.MultiChoice(
            query: str, 
            *,
            options: Iterable[str] = (), 
            default: str = "", 
            strict: bool = False, 
            cursor: str = ">>>",
        ) -> str
        ```
        
        Generates multiple-choice questions for user input on the terminal. 
        If there is no user input and options is not empty and there's no default - a random choice 
        will be made from the options, otherwise the default will be used. 
        If there is no user input and there are no options and no default - the question 
        will be repeated. 
        If strict is set to true - the user input string must be in the options, 
        or the question will be repeated. 
        Options are stored lowercase and printed title case. User input is not case sensitive.
        
        - @param query: String.
            - Question for the user.
        - @param options: Optional Iterable of Strings. Default=()
            - Options presented to the user as a numbered sequence.
            - The user may enter an answer as text or by number.
        - @param default: Optional String. 
            - This is used if no user input is provided.
            - If no default is provided a random choice will be made.
        - @param strict: Optional Bool. Default=False
            - True: Answer must be in the options tuple. Not case-sensitive.
            - False: Accepts any answer.
        - @param cursor: Optional String. Default='>>>' 
            - Indicates user input field.
        
        
        ## Fortuna Development Log
        ##### Fortuna 3.15.0
        - Type Hints Clarified via Typing Module
        
        ##### Fortuna 3.14.1
        - Fixed another installer bug affecting gcc.
        
        ##### Fortuna 3.14.0
        - Minor TruffleShuffle Update
        - Fisher Yates, and Knuth A Shuffle Algorithms added for comparison with Fortuna.shuffle()
            - Some platforms may prefer one over another. Intel favors Knuth B by more than double.
        
        ##### Fortuna 3.13.0 - Internal
        - Development & Testing Environment Updated to Python 3.8
            - Python3.8 brings a 10-20% performance boost over all.
        - RandomValue API redesign. Dependency Injection is now handled at instantiation rather than call time.
        
        ##### Fortuna 3.12.2
        - Installer update.
        - Clarified the docs for MultiChoice.
        
        ##### Fortuna 3.12.1
        - MultiChoice now accepts a default.
        
        ##### Fortuna 3.12.0
        - MultiChoice added
        
        ##### Fortuna 3.10.2
        - Doc string update for clarity.
        - Test update
        - MonkeyScope Update
        
        ##### Fortuna 3.10.1
        - Documentation fix, RandomValue examples are now together.
        
        ##### Fortuna 3.10.0
        - Fortuna now includes both RNG and Pyewacket.
        - Documentation update.
        
        ##### Fortuna 3.9.11
        - Installer Update, properly installs MonkeyScope as intended.
        
        ##### Fortuna 3.9.10
        - Fixed Typos
        
        ##### Fortuna 3.9.9
        - Docs Update
        
        ##### Fortuna 3.9.8
        - Test Update
        
        ##### Fortuna 3.9.7
        - Tests for RNG and Pyewacket are now included in `fortuna_extras` package.
        
        ##### Fortuna 3.9.6
        - Documentation update.
        
        ##### Fortuna 3.9.5
        - Storm 3.2.2 Update.
        
        ##### Fortuna 3.9.4
        - Documentation update.
        
        ##### Fortuna 3.9.3
        - MonkeyScope update, 10% test suite performance improvement.
        
        ##### Fortuna 3.9.2
        - Documentation update.
        
        ##### Fortuna 3.9.1
        - `flatten_with` has been renamed to `flatten`. This should be non-breaking, please report any bugs.
        
        ##### Fortuna 3.9.0 - Internal
        - Added many doc strings.
        - Corrected many typos in Docs.
        - The `flatten` function has been fully replaced by `flatten_with`. 
            - All classes that support automatic flattening can now accept arbitrary arguments at call time.
            - `flatten_with` will be renamed to `flatten` in a future release.
        
        ##### Fortuna 3.8.9
        - Fixed some typos.
        
        ##### Fortuna 3.8.8
        - Fortuna now supports Python notebooks, python3.6 or higher required.
        
        ##### Fortuna 3.8.7
        - Storm Update
        
        ##### Fortuna 3.8.6
        - Attempting to make Fortuna compatible with Python Notebooks. 
        
        ##### Fortuna 3.8.5
        - Installer Config Update
        
        ##### Fortuna 3.8.4
        - Installer Config Update
        
        ##### Fortuna 3.8.3
        - Storm Update 3.2.0
        
        ##### Fortuna 3.8.2
        - More Typo Fix
        
        ##### Fortuna 3.8.1
        - Typo Fix
        
        ##### Fortuna 3.8.0
        - Major API Update, several utilities have been deprecated. See MonkeyScope for replacements.
            - distribution
            - distribution_timer
            - timer
        
        ##### Fortuna 3.7.7
        - Documentation Update
        
        ##### Fortuna 3.7.6
        - Install script update.
        
        ##### Fortuna 3.7.5 - internal
        - Storm 3.1.1 Update
        - Added triangular function.
        
        ##### Fortuna 3.7.4
        - Fixed: missing header in the project manifest, this may have caused building from source to fail.
        
        ##### Fortuna 3.7.3
        - Storm Update
        
        ##### Fortuna 3.7.2
        - Storm Update
        
        ##### Fortuna 3.7.1
        - Bug fixes
        
        ##### Fortuna 3.7.0 - internal
        - flatten_with() is now the default flattening algorithm for all Fortuna classes.
        
        ##### Fortuna 3.6.5
        - Documentation Update
        - RandomValue: New flatten-with-arguments functionality.
        
        ##### Fortuna 3.6.4
        - RandomValue added for testing
        
        ##### Fortuna 3.6.3
        - Developer Update
        
        ##### Fortuna 3.6.2
        - Installer Script Update
        
        ##### Fortuna 3.6.1
        - Documentation Update
        
        ##### Fortuna 3.6.0
        - Storm Update
        - Test Update
        - Bug fix for random_range(), negative stepping is now working as intended. This bug was introduced in 3.5.0.
        - Removed Features
            - lazy_cat(): use QuantumMonty class instead.
            - flex_cat(): use FlexCat class instead.
            - truffle_shuffle(): use TruffleShuffle class instead.
        
        ##### Fortuna 3.5.3 - internal
        - Features added for testing & development
            - ActiveChoice class
            - random_rotate() function
        
        ##### Fortuna 3.5.2
        - Documentation Updates
        
        ##### Fortuna 3.5.1
        - Test Update
        
        ##### Fortuna 3.5.0
        - Storm Update
        - Minor Bug Fix: Truffle Shuffle
        - Deprecated Features
            - lazy_cat(): use QuantumMonty class instead.
            - flex_cat(): use FlexCat class instead.
            - truffle_shuffle(): use TruffleShuffle class instead.
        
        ##### Fortuna 3.4.9
        - Test Update
        
        ##### Fortuna 3.4.8
        - Storm Update
        
        ##### Fortuna 3.4.7
        - Bug fix for analytic_continuation.
        
        ##### Fortuna 3.4.6
        - Docs Update
        
        ##### Fortuna 3.4.5
        - Docs Update
        - Range Tests Added, see extras folder.
        
        ##### Fortuna 3.4.4
        - ZeroCool Algorithm Bug Fixes
        - Typos Fixed
        
        ##### Fortuna 3.4.3
        - Docs Update
        
        ##### Fortuna 3.4.2
        - Typos Fixed
        
        ##### Fortuna 3.4.1
        - Major Bug Fix: random_index()
        
        ##### Fortuna 3.4.0 - internal
        - ZeroCool Poisson Algorithm Family Updated
        
        ##### Fortuna 3.3.8 - internal
        - Docs Update
        
        ##### Fortuna 3.3.7
        - Fixed Performance Bug: ZeroCool Linear Algorithm Family
        
        ##### Fortuna 3.3.6
        - Docs Update
        
        ##### Fortuna 3.3.5
        - ABI Updates
        - Bug Fixes
        
        ##### Fortuna 3.3.4
        - Examples Update
        
        ##### Fortuna 3.3.3
        - Test Suite Update
        
        ##### Fortuna 3.3.2 - internal
        - Documentation Update
        
        ##### Fortuna 3.3.1 - internal
        - Minor Bug Fix
        
        ##### Fortuna 3.3.0 - internal
        - Added `plus_or_minus_gauss(N: int) -> int` random int in range [-N, N] Stretched Gaussian Distribution
        
        ##### Fortuna 3.2.3
        - Small Typos Fixed
        
        ##### Fortuna 3.2.2
        - Documentation update.
        
        ##### Fortuna 3.2.1
        - Small Typo Fixed
        
        ##### Fortuna 3.2.0
        - API updates:
            - QunatumMonty.uniform -> QunatumMonty.flat_uniform
            - QunatumMonty.front -> QunatumMonty.front_linear
            - QunatumMonty.middle -> QunatumMonty.middle_linear
            - QunatumMonty.back -> QunatumMonty.back_linear
            - QunatumMonty.quantum -> QunatumMonty.quantum_linear
            - randindex -> random_index
            - randbelow -> random_below
            - randrange -> random_range
            - randint   -> random_int
        
        ##### Fortuna 3.1.0
        - `discrete()` has been removed, see Weighted Choice.
        - `lazy_cat()` added.
        - All ZeroCool methods have been raised to top level API, for use with lazy_cat()
        
        ##### Fortuna 3.0.1
        - minor typos.
        
        ##### Fortuna 3.0.0
        - Storm 2 Rebuild.
        
        ##### Fortuna 2.1.1
        - Small bug fixes.
        - Test updates.
        
        ##### Fortuna 2.1.0, Major Feature Update
        - Fortuna now includes the best of RNG and Pyewacket.
        
        ##### Fortuna 2.0.3
        - Bug fix.
        
        ##### Fortuna 2.0.2
        - Clarified some documentation.
        
        ##### Fortuna 2.0.1
        - Fixed some typos.
        
        ##### Fortuna 2.0.0b1-10
        - Total rebuild. New RNG Storm Engine.
        
        ##### Fortuna 1.26.7.1
        - README updated.
        
        ##### Fortuna 1.26.7
        - Small bug fix.
        
        ##### Fortuna 1.26.6
        - Updated README to reflect recent changes to the test script.
        
        ##### Fortuna 1.26.5
        - Fixed small bug in test script.
        
        ##### Fortuna 1.26.4
        - Updated documentation for clarity.
        - Fixed a minor typo in the test script.
        
        ##### Fortuna 1.26.3
        - Clean build.
        
        ##### Fortuna 1.26.2
        - Fixed some minor typos.
        
        ##### Fortuna 1.26.1
        - Release.
        
        ##### Fortuna 1.26.0 beta 2
        - Moved README and LICENSE files into fortuna_extras folder.
        
        ##### Fortuna 1.26.0 beta 1
        - Dynamic version scheme implemented.
        - The Fortuna Extension now requires the fortuna_extras package, previously it was optional.
        
        ##### Fortuna 1.25.4
        - Fixed some minor typos in the test script.
        
        ##### Fortuna 1.25.3
        - Since version 1.24 Fortuna requires Python 3.7 or higher. This patch corrects an issue where the setup script incorrectly reported requiring Python 3.6 or higher.
        
        ##### Fortuna 1.25.2
        - Updated test suite.
        - Major performance update for TruffleShuffle.
        - Minor performance update for QuantumMonty & FlexCat: cycle monty.
        
        ##### Fortuna 1.25.1
        - Important bug fix for TruffleShuffle, QuantumMonty and FlexCat.
        
        ##### Fortuna 1.25
        - Full 64bit support.
        - The Distribution & Performance Tests have been redesigned.
        - Bloat Control: Two experimental features have been removed.
            - RandomWalk
            - CatWalk
        - Bloat Control: Several utility functions have been removed from the top level API. These function remain in the Fortuna namespace for now, but may change in the future without warning.
            - stretch_bell, internal only.
            - min_max, not used anymore.
            - analytic_continuation, internal only.
            - flatten, internal only.
        
        ##### Fortuna 1.24.3
        - Low level refactoring, non-breaking patch.
        
        ##### Fortuna 1.24.2
        - Setup config updated to improve installation.
        
        ##### Fortuna 1.24.1
        - Low level patch to avoid potential ADL issue. All low level function calls are now qualified.
        
        ##### Fortuna 1.24
        - Documentation updated for even more clarity.
        - Bloat Control: Two naïve utility functions that are no longer used in the module have been removed.
            - n_samples -> use a list comprehension instead. `[f(x) for _ in range(n)]`
            - bind -> use a lambda instead. `lambda: f(x)`
        
        ##### Fortuna 1.23.7
        - Documentation updated for clarity.
        - Minor bug fixes.
        - TruffleShuffle has been redesigned slightly, it now uses a random rotate instead of swap.
        - Custom `__repr__` methods have been added to each class.
        
        ##### Fortuna 1.23.6
        - New method for QuantumMonty: quantum_not_monty - produces the upside down quantum_monty.
        - New bias option for FlexCat: not_monty.
        
        ##### Fortuna 1.23.5.1
        - Fixed some small typos.
        
        ##### Fortuna 1.23.5
        - Documentation updated for clarity.
        - All sequence wrappers can now accept generators as input.
        - Six new functions added:
            - random_float() -> float in range [0.0..1.0) exclusive, uniform flat distribution.
            - percent_true_float(num: float) -> bool, Like percent_true but with floating point precision.
            - plus_or_minus_linear_down(num: int) -> int in range [-num..num], upside down pyramid.
            - plus_or_minus_curve_down(num: int) -> int in range [-num..num], upside down bell curve.
            - mostly_not_middle(num: int) -> int in range [0..num], upside down pyramid.
            - mostly_not_center(num: int) -> int in range [0..num], upside down bell curve.
        - Two new methods for QuantumMonty:
            - mostly_not_middle
            - mostly_not_center
        - Two new bias options for FlexCat, either can be used to define x and/or y axis bias:
            - not_middle
            - not_center
        
        ##### Fortuna 1.23.4.2
        - Fixed some minor typos in the README.md file.
        
        ##### Fortuna 1.23.4.1
        - Fixed some minor typos in the test suite.
        
        ##### Fortuna 1.23.4
        - Fortuna is now Production/Stable!
        - Fortuna and Fortuna Pure now use the same test suite.
        
        ##### Fortuna 0.23.4, first release candidate.
        - RandomCycle, BlockCycle and TruffleShuffle have been refactored and combined into one class: TruffleShuffle.
        - QuantumMonty and FlexCat will now use the new TruffleShuffle for cycling.
        - Minor refactoring across the module.
        
        ##### Fortuna 0.23.3, internal
        - Function shuffle(arr: list) added.
        
        ##### Fortuna 0.23.2, internal
        - Simplified the plus_or_minus_curve(num: int) function, output will now always be bounded to the range [-num..num].
        - Function stretched_bell(num: int) added, this matches the previous behavior of an unbounded plus_or_minus_curve.
        
        ##### Fortuna 0.23.1, internal
        - Small bug fixes and general clean up.
        
        ##### Fortuna 0.23.0
        - The number of test cycles in the test suite has been reduced to 10,000 (down from 100,000). The performance of the pure python implementation and the c-extension are now directly comparable.
        - Minor tweaks made to the examples in `.../fortuna_extras/fortuna_examples.py`
        
        ##### Fortuna 0.22.2, experimental features
        - BlockCycle class added.
        - RandomWalk class added.
        - CatWalk class added.
        
        ##### Fortuna 0.22.1
        - Fortuna classes no longer return lists of values, this behavior has been extracted to a free function called n_samples.
        
        ##### Fortuna 0.22.0, experimental features
        - Function bind added.
        - Function n_samples added.
        
        ##### Fortuna 0.21.3
        - Flatten will no longer raise an error if passed a callable item that it can't call. It correctly returns such items in an uncalled state without error.
        - Simplified `.../fortuna_extras/fortuna_examples.py` - removed unnecessary class structure.
        
        ##### Fortuna 0.21.2
        - Fix some minor bugs.
        
        ##### Fortuna 0.21.1
        - Fixed a bug in `.../fortuna_extras/fortuna_examples.py`
        
        ##### Fortuna 0.21.0
        - Function flatten added.
        - Flatten: The Fortuna classes will recursively unpack callable objects in the data set.
        
        ##### Fortuna 0.20.10
        - Documentation updated.
        
        ##### Fortuna 0.20.9
        - Minor bug fixes.
        
        ##### Fortuna 0.20.8, internal
        - Testing cycle for potential new features.
        
        ##### Fortuna 0.20.7
        - Documentation updated for clarity.
        
        ##### Fortuna 0.20.6
        - Tests updated based on recent changes.
        
        ##### Fortuna 0.20.5, internal
        - Documentation updated based on recent changes.
        
        ##### Fortuna 0.20.4, internal
        - WeightedChoice (both types) can optionally return a list of samples rather than just one value, control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.3, internal
        - RandomCycle can optionally return a list of samples rather than just one value,
        control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.2, internal
        - QuantumMonty can optionally return a list of samples rather than just one value,
        control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.1, internal
        - FlexCat can optionally return a list of samples rather than just one value,
        control the length of the list via the n_samples argument.
        
        ##### Fortuna 0.20.0, internal
        - FlexCat now accepts a standard dict as input. The ordered(ness) of dict is now part of the standard in Python 3.7.1. Previously FlexCat required an OrderedDict, now it accepts either and treats them the same.
        
        ##### Fortuna 0.19.7
        - Fixed bug in `.../fortuna_extras/fortuna_examples.py`.
        
        ##### Fortuna 0.19.6
        - Updated documentation formatting.
        - Small performance tweak for QuantumMonty and FlexCat.
        
        ##### Fortuna 0.19.5
        - Minor documentation update.
        
        ##### Fortuna 0.19.4
        - Minor update to all classes for better debugging.
        
        ##### Fortuna 0.19.3
        - Updated plus_or_minus_curve to allow unbounded output.
        
        ##### Fortuna 0.19.2
        - Internal development cycle.
        - Minor update to FlexCat for better debugging.
        
        ##### Fortuna 0.19.1
        - Internal development cycle.
        
        ##### Fortuna 0.19.0
        - Updated documentation for clarity.
        - MultiCat has been removed, it is replaced by FlexCat.
        - Mostly has been removed, it is replaced by QuantumMonty.
        
        ##### Fortuna 0.18.7
        - Fixed some more README typos.
        
        ##### Fortuna 0.18.6
        - Fixed some README typos.
        
        ##### Fortuna 0.18.5
        - Updated documentation.
        - Fixed another minor test bug.
        
        ##### Fortuna 0.18.4
        - Updated documentation to reflect recent changes.
        - Fixed some small test bugs.
        - Reduced default number of test cycles to 10,000 - down from 100,000.
        
        ##### Fortuna 0.18.3
        - Fixed some minor README typos.
        
        ##### Fortuna 0.18.2
        - Fixed a bug with Fortuna Pure.
        
        ##### Fortuna 0.18.1
        - Fixed some minor typos.
        - Added tests for `.../fortuna_extras/fortuna_pure.py`
        
        ##### Fortuna 0.18.0
        - Introduced new test format, now includes average call time in nanoseconds.
        - Reduced default number of test cycles to 100,000 - down from 1,000,000.
        - Added pure Python implementation of Fortuna: `.../fortuna_extras/fortuna_pure.py`
        - Promoted several low level functions to top level.
            - `zero_flat(num: int) -> int`
            - `zero_cool(num: int) -> int`
            - `zero_extreme(num: int) -> int`
            - `max_cool(num: int) -> int`
            - `max_extreme(num: int) -> int`
            - `analytic_continuation(func: staticmethod, num: int) -> int`
            - `min_max(num: int, lo: int, hi: int) -> int`
        
        ##### Fortuna 0.17.3
        - Internal development cycle.
        
        ##### Fortuna 0.17.2
        - User Requested: dice() and d() functions now support negative numbers as input.
        
        ##### Fortuna 0.17.1
        - Fixed some minor typos.
        
        ##### Fortuna 0.17.0
        - Added QuantumMonty to replace Mostly, same default behavior with more options.
        - Mostly is depreciated and may be removed in a future release.
        - Added FlexCat to replace MultiCat, same default behavior with more options.
        - MultiCat is depreciated and may be removed in a future release.
        - Expanded the Treasure Table example in `.../fortuna_extras/fortuna_examples.py`
        
        ##### Fortuna 0.16.2
        - Minor refactoring for WeightedChoice.
        
        ##### Fortuna 0.16.1
        - Redesigned fortuna_examples.py to feature a dynamic random magic item generator.
        - Raised cumulative_weighted_choice function to top level.
        - Added test for cumulative_weighted_choice as free function.
        - Updated MultiCat documentation for clarity.
        
        ##### Fortuna 0.16.0
        - Pushed distribution_timer to the .pyx layer.
        - Changed default number of iterations of tests to 1 million, up form 1 hundred thousand.
        - Reordered tests to better match documentation.
        - Added Base Case Fortuna.fast_rand_below.
        - Added Base Case Fortuna.fast_d.
        - Added Base Case Fortuna.fast_dice.
        
        ##### Fortuna 0.15.10
        - Internal Development Cycle
        
        ##### Fortuna 0.15.9
        - Added Base Cases for random_value()
        - Added Base Case for randint()
        
        ##### Fortuna 0.15.8
        - Clarified MultiCat Test
        
        ##### Fortuna 0.15.7
        - Fixed minor typos.
        
        ##### Fortuna 0.15.6
        - Fixed minor typos.
        - Simplified MultiCat example.
        
        ##### Fortuna 0.15.5
        - Added MultiCat test.
        - Fixed some minor typos in docs.
        
        ##### Fortuna 0.15.4
        - Performance optimization for both WeightedChoice() variants.
        - Cython update provides small performance enhancement across the board.
        - Compilation now leverages Python3 all the way down.
        - MultiCat pushed to the .pyx layer for better performance.
        
        ##### Fortuna 0.15.3
        - Reworked the MultiCat example to include several randomizing strategies working in concert.
        - Added Multi Dice 10d10 performance tests.
        - Updated sudo code in documentation to be more pythonic.
        
        ##### Fortuna 0.15.2
        - Fixed: Linux installation failure.
        - Added: complete source files to the distribution (.cpp .hpp .pyx).
        
        ##### Fortuna 0.15.1
        - Updated & simplified distribution_timer in `fortuna_tests.py`
        - Readme updated, fixed some typos.
        - Known issue preventing successful installation on some linux platforms.
        
        ##### Fortuna 0.15.0
        - Performance tweaks.
        - Readme updated, added some details.
        
        ##### Fortuna 0.14.1
        - Readme updated, fixed some typos.
        
        ##### Fortuna 0.14.0
        - Fixed a bug where the analytic continuation algorithm caused a rare issue during compilation on some platforms.
        
        ##### Fortuna 0.13.3
        - Fixed Test Bug: percent sign was missing in output distributions.
        - Readme updated: added update history, fixed some typos.
        
        ##### Fortuna 0.13.2
        - Readme updated for even more clarity.
        
        ##### Fortuna 0.13.1
        - Readme updated for clarity.
        
        ##### Fortuna 0.13.0
        - Minor Bug Fixes.
        - Readme updated for aesthetics.
        - Added Tests: `.../fortuna_extras/fortuna_tests.py`
        
        ##### Fortuna 0.12.0
        - Internal test for future update.
        
        ##### Fortuna 0.11.0
        - Initial Release: Public Beta
        
        ##### Fortuna 0.10.0
        - Module name changed from Dice to Fortuna
        
        ##### Dice 0.1.x - 0.9.x
        - Experimental Phase
        
        
        ## Distribution and Performance Tests
        Testbed:
        - Hardware: 2.7Ghz Quad i7 Skylake, 16GB RAM, 1TB SSD
        - Software: MacOS 10.14.6, Python 3.8, MonkeyScope: Fortuna
        ```
        MonkeyScope: Fortuna Quick Test
        
        Random Sequence Values:
        
        some_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        
        Base Case
        Output Analysis: Random.choice(some_list)
        Typical Timing: 449 ± 27 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 4
         Maximum: 9
         Mean: 4.411
         Std Deviation: 2.882720763445534
        Distribution of 100000 samples:
         0: 10.03%
         1: 9.959%
         2: 10.108%
         3: 9.929%
         4: 9.989%
         5: 10.165%
         6: 10.148%
         7: 9.98%
         8: 9.814%
         9: 9.878%
        
        Output Analysis: random_value(some_list)
        Typical Timing: 73 ± 3 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: (4, 5)
         Maximum: 9
         Mean: 4.475
         Std Deviation: 2.8857191478035418
        Distribution of 100000 samples:
         0: 10.17%
         1: 10.042%
         2: 10.207%
         3: 9.947%
         4: 9.947%
         5: 9.919%
         6: 9.862%
         7: 10.075%
         8: 9.84%
         9: 9.991%
        
        
        Wide Distribution
        
        truffle = TruffleShuffle(some_list)
        Output Analysis: truffle()
        Typical Timing: 509 ± 38 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.59
         Std Deviation: 2.875395624953199
        Distribution of 100000 samples:
         0: 9.917%
         1: 9.903%
         2: 10.193%
         3: 9.862%
         4: 10.03%
         5: 10.096%
         6: 9.83%
         7: 9.923%
         8: 10.094%
         9: 10.152%
        
        
        Single objects with many distribution possibilities
        
        some_tuple = tuple(i for i in range(10))
        
        monty = QuantumMonty(some_tuple)
        Output Analysis: monty()
        Typical Timing: 526 ± 38 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.626
         Std Deviation: 2.9045006455499367
        Distribution of 100000 samples:
         0: 10.973%
         1: 8.946%
         2: 8.928%
         3: 9.702%
         4: 11.577%
         5: 11.552%
         6: 9.455%
         7: 8.944%
         8: 8.984%
         9: 10.939%
        
        rand_value = RandomValue(collection, zero_cool=random_index)
        Output Analysis: rand_value()
        Typical Timing: 413 ± 30 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 4
         Maximum: 9
         Mean: 4.394
         Std Deviation: 2.8786740002994433
        Distribution of 100000 samples:
         0: 10.0%
         1: 10.04%
         2: 10.036%
         3: 10.295%
         4: 10.064%
         5: 9.809%
         6: 9.835%
         7: 10.04%
         8: 9.92%
         9: 9.961%
        
        
        Weighted Tables:
        
        population = ('A', 'B', 'C', 'D')
        cum_weights = (1, 3, 6, 10)
        rel_weights = (1, 2, 3, 4)
        cum_weighted_table = zip(cum_weights, population)
        rel_weighted_table = zip(rel_weights, population)
        
        Cumulative Base Case
        Output Analysis: Random.choices(population, cum_weights=cum_weights)
        Typical Timing: 1480 ± 50 ns
        Distribution of 100000 samples:
         A: 9.841%
         B: 19.936%
         C: 30.095%
         D: 40.128%
        
        cum_weighted_choice = CumulativeWeightedChoice(cum_weighted_table)
        Output Analysis: cum_weighted_choice()
        Typical Timing: 398 ± 15 ns
        Distribution of 100000 samples:
         A: 9.955%
         B: 20.139%
         C: 30.021%
         D: 39.885%
        
        Output Analysis: cumulative_weighted_choice(tuple(zip(cum_weights, population)))
        Typical Timing: 142 ± 6 ns
        Distribution of 100000 samples:
         A: 9.974%
         B: 19.939%
         C: 29.904%
         D: 40.183%
        
        Relative Base Case
        Output Analysis: Random.choices(population, weights=rel_weights)
        Typical Timing: 1824 ± 74 ns
        Distribution of 100000 samples:
         A: 9.965%
         B: 19.909%
         C: 30.342%
         D: 39.784%
        
        rel_weighted_choice = RelativeWeightedChoice(rel_weighted_table)
        Output Analysis: rel_weighted_choice()
        Typical Timing: 394 ± 13 ns
        Distribution of 100000 samples:
         A: 9.953%
         B: 20.134%
         C: 30.031%
         D: 39.882%
        
        
        Random Matrix Values:
        
        some_matrix = {'A': (1, 2, 3, 4), 'B': (10, 20, 30, 40), 'C': (100, 200, 300, 400)}
        
        flex_cat = FlexCat(some_matrix)
        Output Analysis: flex_cat()
        Typical Timing: 921 ± 43 ns
        Statistics of 1000 samples:
         Minimum: 1
         Median: 4
         Maximum: 400
         Mean: 34.112
         Std Deviation: 79.92621257134607
        Distribution of 100000 samples:
         1: 13.986%
         2: 13.997%
         3: 13.916%
         4: 13.947%
         10: 8.229%
         20: 8.331%
         30: 8.195%
         40: 8.292%
         100: 2.776%
         200: 2.774%
         300: 2.781%
         400: 2.776%
        
        Output Analysis: flex_cat("C")
        Typical Timing: 621 ± 23 ns
        Statistics of 1000 samples:
         Minimum: 100
         Median: 300
         Maximum: 400
         Mean: 250.4
         Std Deviation: 111.6236534073312
        Distribution of 100000 samples:
         100: 25.052%
         200: 24.895%
         300: 25.1%
         400: 24.953%
        
        
        Random Integers:
        
        Base Case
        Output Analysis: Random.randrange(10)
        Typical Timing: 563 ± 24 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.522
         Std Deviation: 2.88643655741816
        Distribution of 100000 samples:
         0: 9.975%
         1: 10.055%
         2: 10.086%
         3: 10.013%
         4: 10.06%
         5: 9.958%
         6: 10.095%
         7: 9.834%
         8: 10.012%
         9: 9.912%
        
        Output Analysis: random_below(10)
        Typical Timing: 68 ± 2 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.568
         Std Deviation: 2.916740646680812
        Distribution of 100000 samples:
         0: 9.972%
         1: 10.048%
         2: 10.043%
         3: 9.916%
         4: 10.075%
         5: 10.079%
         6: 9.987%
         7: 9.864%
         8: 9.901%
         9: 10.115%
        
        Output Analysis: random_index(10)
        Typical Timing: 82 ± 12 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.661
         Std Deviation: 2.8089284433748043
        Distribution of 100000 samples:
         0: 9.811%
         1: 10.086%
         2: 9.965%
         3: 10.195%
         4: 10.117%
         5: 10.068%
         6: 10.015%
         7: 9.773%
         8: 10.034%
         9: 9.936%
        
        Output Analysis: random_range(10)
        Typical Timing: 96 ± 7 ns
        Statistics of 1000 samples:
         Minimum: 0
         Median: 5
         Maximum: 9
         Mean: 4.671
         Std Deviation: 2.9011651107787713
        Distribution of 100000 samples:
         0: 10.055%
         1: 10.001%
         2: 9.98%
         3: 9.976%
         4: 9.995%
         5: 10.095%
         6: 10.013%
         7: 9.928%
         8: 10.003%
         9: 9.954%
        
        Output Analysis: random_below(-10)
        Typical Timing: 86 ± 7 ns
        Statistics of 1000 samples:
         Minimum: -9
         Median: -5
         Maximum: 0
         Mean: -4.496
         Std Deviation: 2.8435864678254466
        Distribution of 100000 samples:
         -9: 10.022%
         -8: 9.906%
         -7: 10.111%
         -6: 10.076%
         -5: 9.924%
         -4: 10.088%
         -3: 9.926%
         -2: 10.058%
         -1: 9.994%
         0: 9.895%
        
        Output Analysis: random_index(-10)
        Typical Timing: 96 ± 14 ns
        Statistics of 1000 samples:
         Minimum: -10
         Median: -5
         Maximum: -1
         Mean: -5.492
         Std Deviation: 2.878877559049707
        Distribution of 100000 samples:
         -10: 10.054%
         -9: 10.02%
         -8: 9.937%
         -7: 10.017%
         -6: 9.708%
         -5: 10.118%
         -4: 9.961%
         -3: 10.116%
         -2: 10.132%
         -1: 9.937%
        
        Output Analysis: random_range(-10)
        Typical Timing: 110 ± 10 ns
        Statistics of 1000 samples:
         Minimum: -10
         Median: -6
         Maximum: -1
         Mean: -5.524
         Std Deviation: 2.8059622235518424
        Distribution of 100000 samples:
         -10: 9.819%
         -9: 9.886%
         -8: 9.966%
         -7: 10.093%
         -6: 10.011%
         -5: 9.989%
         -4: 9.935%
         -3: 10.065%
         -2: 10.123%
         -1: 10.113%
        
        Base Case
        Output Analysis: Random.randrange(1, 10)
        Typical Timing: 753 ± 38 ns
        Statistics of 1000 samples:
         Minimum: 1
         Median: 5
         Maximum: 9
         Mean: 4.954
         Std Deviation: 2.618756193310099
        Distribution of 100000 samples:
         1: 11.011%
         2: 11.157%
         3: 11.062%
         4: 11.147%
         5: 11.192%
         6: 11.095%
         7: 11.079%
         8: 11.113%
         9: 11.144%
        
        Output Analysis: random_range(1, 10)
        Typical Timing: 95 ± 3 ns
        Statistics of 1000 samples:
         Minimum: 1
         Median: 5
         Maximum: 9
         Mean: 4.975
         Std Deviation: 2.5698978578924105
        Distribution of 100000 samples:
         1: 11.104%
         2: 11.161%
         3: 11.172%
         4: 11.232%
         5: 11.022%
         6: 11.082%
         7: 11.064%
         8: 11.048%
         9: 11.115%
        
        Output Analysis: random_range(10, 1)
        Typical Timing: 103 ± 11 ns
        Statistics of 1000 samples:
         Minimum: 1
         Median: 5
         Maximum: 9
         Mean: 4.983
         Std Deviation: 2.6158576031580925
        Distribution of 100000 samples:
         1: 11.059%
         2: 11.124%
         3: 11.291%
         4: 11.112%
         5: 11.286%
         6: 11.197%
         7: 10.924%
         8: 11.059%
         9: 10.948%
        
        Base Case
        Output Analysis: Random.randint(-5, 5)
        Typical Timing: 877 ± 49 ns
        Statistics of 1000 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: 0.035
         Std Deviation: 3.1409831263475456
        Distribution of 100000 samples:
         -5: 9.113%
         -4: 9.132%
         -3: 9.063%
         -2: 9.234%
         -1: 9.189%
         0: 9.263%
         1: 9.059%
         2: 9.096%
         3: 8.914%
         4: 8.972%
         5: 8.965%
        
        Output Analysis: random_int(-5, 5)
        Typical Timing: 63 ± 2 ns
        Statistics of 1000 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: -0.027
         Std Deviation: 3.2122065624738396
        Distribution of 100000 samples:
         -5: 8.984%
         -4: 9.218%
         -3: 9.167%
         -2: 9.141%
         -1: 9.249%
         0: 9.03%
         1: 8.992%
         2: 9.025%
         3: 9.17%
         4: 9.016%
         5: 9.008%
        
        Base Case
        Output Analysis: Random.randrange(1, 20, 2)
        Typical Timing: 963 ± 37 ns
        Statistics of 1000 samples:
         Minimum: 1
         Median: 11
         Maximum: 19
         Mean: 10.282
         Std Deviation: 5.827561754284548
        Distribution of 100000 samples:
         1: 9.889%
         3: 9.951%
         5: 9.85%
         7: 9.904%
         9: 10.089%
         11: 10.142%
         13: 10.17%
         15: 9.97%
         17: 9.832%
         19: 10.203%
        
        Output Analysis: random_range(1, 20, 2)
        Typical Timing: 91 ± 3 ns
        Statistics of 1000 samples:
         Minimum: 1
         Median: 9
         Maximum: 19
         Mean: 10.138
         Std Deviation: 5.810073665625936
        Distribution of 100000 samples:
         1: 10.001%
         3: 10.016%
         5: 9.786%
         7: 10.163%
         9: 9.957%
         11: 10.037%
         13: 9.995%
         15: 9.945%
         17: 10.159%
         19: 9.941%
        
        Output Analysis: random_range(1, 20, -2)
        Typical Timing: 96 ± 7 ns
        Statistics of 1000 samples:
         Minimum: 2
         Median: 10
         Maximum: 20
         Mean: 10.748
         Std Deviation: 5.71808499412172
        Distribution of 100000 samples:
         2: 10.152%
         4: 10.016%
         6: 9.919%
         8: 9.937%
         10: 9.948%
         12: 10.021%
         14: 9.806%
         16: 9.962%
         18: 10.124%
         20: 10.115%
        
        Output Analysis: random_range(20, 1, -2)
        Typical Timing: 102 ± 13 ns
        Statistics of 1000 samples:
         Minimum: 2
         Median: 12
         Maximum: 20
         Mean: 11.166
         Std Deviation: 5.760246869709666
        Distribution of 100000 samples:
         2: 9.983%
         4: 10.068%
         6: 10.01%
         8: 10.049%
         10: 10.159%
         12: 9.995%
         14: 9.853%
         16: 9.936%
         18: 9.999%
         20: 9.948%
        
        Output Analysis: d(10)
        Typical Timing: 70 ± 8 ns
        Statistics of 1000 samples:
         Minimum: 1
         Median: 5
         Maximum: 10
         Mean: 5.565
         Std Deviation: 2.87224215552937
        Distribution of 100000 samples:
         1: 9.883%
         2: 9.959%
         3: 10.007%
         4: 10.236%
         5: 9.964%
         6: 10.007%
         7: 9.976%
         8: 10.041%
         9: 10.035%
         10: 9.892%
        
        Output Analysis: dice(3, 6)
        Typical Timing: 133 ± 13 ns
        Statistics of 1000 samples:
         Minimum: 3
         Median: 11
         Maximum: 18
         Mean: 10.553
         Std Deviation: 2.898135780117971
        Distribution of 100000 samples:
         3: 0.454%
         4: 1.357%
         5: 2.859%
         6: 4.693%
         7: 7.102%
         8: 9.738%
         9: 11.364%
         10: 12.578%
         11: 12.54%
         12: 11.472%
         13: 9.638%
         14: 6.843%
         15: 4.634%
         16: 2.839%
         17: 1.432%
         18: 0.457%
        
        Output Analysis: ability_dice(4)
        Typical Timing: 202 ± 11 ns
        Statistics of 1000 samples:
         Minimum: 4
         Median: 13
         Maximum: 18
         Mean: 12.37
         Std Deviation: 2.7930449334015375
        Distribution of 100000 samples:
         3: 0.065%
         4: 0.326%
         5: 0.812%
         6: 1.547%
         7: 2.911%
         8: 4.848%
         9: 6.975%
         10: 9.347%
         11: 11.259%
         12: 12.775%
         13: 13.423%
         14: 12.565%
         15: 10.145%
         16: 7.235%
         17: 4.239%
         18: 1.528%
        
        Output Analysis: plus_or_minus(5)
        Typical Timing: 59 ± 2 ns
        Statistics of 1000 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: -0.068
         Std Deviation: 3.1287978522109734
        Distribution of 100000 samples:
         -5: 9.121%
         -4: 9.107%
         -3: 8.976%
         -2: 9.114%
         -1: 9.072%
         0: 9.049%
         1: 9.078%
         2: 9.002%
         3: 9.204%
         4: 9.123%
         5: 9.154%
        
        Output Analysis: plus_or_minus_linear(5)
        Typical Timing: 90 ± 5 ns
        Statistics of 1000 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: -0.026
         Std Deviation: 2.482201442268536
        Distribution of 100000 samples:
         -5: 2.801%
         -4: 5.507%
         -3: 8.385%
         -2: 11.247%
         -1: 13.933%
         0: 16.38%
         1: 13.911%
         2: 11.009%
         3: 8.473%
         4: 5.491%
         5: 2.863%
        
        Output Analysis: plus_or_minus_gauss(5)
        Typical Timing: 117 ± 12 ns
        Statistics of 1000 samples:
         Minimum: -5
         Median: 0
         Maximum: 5
         Mean: -0.061
         Std Deviation: 1.5935115311788615
        Distribution of 100000 samples:
         -5: 0.207%
         -4: 1.156%
         -3: 4.408%
         -2: 11.681%
         -1: 20.602%
         0: 24.505%
         1: 20.382%
         2: 11.319%
         3: 4.421%
         4: 1.14%
         5: 0.179%
        
        
        Random Floats:
        
        Base Case
        Output Analysis: Random.random()
        Typical Timing: 49 ± 7 ns
        Statistics of 1000 samples:
         Minimum: 0.0002888470803480425
         Median: (0.46213952087655163, 0.4636366242070955)
         Maximum: 0.9977632155620412
         Mean: 0.48442243187698747
         Std Deviation: 0.28738283779373863
        Post-processor distribution of 100000 samples using round method:
         0: 49.768%
         1: 50.232%
        
        Output Analysis: canonical()
        Typical Timing: 55 ± 13 ns
        Statistics of 1000 samples:
         Minimum: 0.00016528966584249268
         Median: (0.5034224950558034, 0.5035526820708255)
         Maximum: 0.9990207386568256
         Mean: 0.4974733542900666
         Std Deviation: 0.2856933491334474
        Post-processor distribution of 100000 samples using round method:
         0: 50.162%
         1: 49.838%
        
        Output Analysis: random_float(0.0, 10.0)
        Typical Timing: 53 ± 8 ns
        Statistics of 1000 samples:
         Minimum: 0.030305628721902574
         Median: (4.853858719115635, 4.862273736747954)
         Maximum: 9.970651504803019
         Mean: 4.917661417395715
         Std Deviation: 2.9086601882155105
        Post-processor distribution of 100000 samples using floor method:
         0: 10.167%
         1: 9.868%
         2: 9.925%
         3: 9.967%
         4: 9.837%
         5: 10.04%
         6: 9.854%
         7: 10.175%
         8: 10.089%
         9: 10.078%
        
        Base Case
        Output Analysis: Random.triangular(0.0, 10.0, 5.0)
        Typical Timing: 483 ± 26 ns
        Statistics of 1000 samples:
         Minimum: 0.04674664717664105
         Median: (4.976122076661077, 4.983779318612285)
         Maximum: 9.762649058797425
         Mean: 4.9831149291150085
         Std Deviation: 2.022618851331035
        Post-processor distribution of 100000 samples using round method:
         0: 0.466%
         1: 4.13%
         2: 7.945%
         3: 12.132%
         4: 15.821%
         5: 19.095%
         6: 15.958%
         7: 12.031%
         8: 7.946%
         9: 4.002%
         10: 0.474%
        
        Output Analysis: triangular(0.0, 10.0, 5.0)
        Typical Timing: 62 ± 7 ns
        Statistics of 1000 samples:
         Minimum: 0.220376476007011
         Median: (4.900280981060672, 4.900749496523958)
         Maximum: 9.886507172943086
         Mean: 4.87871957938429
         Std Deviation: 2.090875247200711
        Post-processor distribution of 100000 samples using round method:
         0: 0.495%
         1: 3.995%
         2: 7.875%
         3: 12.025%
         4: 15.963%
         5: 19.147%
         6: 16.063%
         7: 12.044%
         8: 7.888%
         9: 4.017%
         10: 0.488%
        
        
        Random Booleans:
        
        Output Analysis: percent_true(33.33)
        Typical Timing: 54 ± 12 ns
        Statistics of 1000 samples:
         Minimum: False
         Median: False
         Maximum: True
         Mean: 0.347
         Std Deviation: 0.4760157560417512
        Distribution of 100000 samples:
         False: 66.64%
         True: 33.36%
        
        
        Shuffle Performance:
        
        some_small_list = [i for i in range(10)]
        some_med_list = [i for i in range(100)]
        some_large_list = [i for i in range(1000)]
        
        Base Case:
        Random.shuffle()
        Typical Timing: 4340 ± 219 ns
        Typical Timing: 39841 ± 128 ns
        Typical Timing: 444381 ± 3647 ns
        
        Fortuna.shuffle()
        Typical Timing: 483 ± 74 ns
        Typical Timing: 5619 ± 1055 ns
        Typical Timing: 45969 ± 125 ns
        
        Fortuna.knuth_a()
        Typical Timing: 1205 ± 217 ns
        Typical Timing: 9620 ± 1207 ns
        Typical Timing: 100283 ± 113 ns
        
        Fortuna.fisher_yates()
        Typical Timing: 1174 ± 50 ns
        Typical Timing: 8157 ± 51 ns
        Typical Timing: 103040 ± 4063 ns
        
        
        -------------------------------------------------------------------------
        Total Test Time: 3.14 seconds
        ```
        
        
        ## Legal Information
        Fortuna © 2019 Robert W Sharp, all rights reserved.
        
        Fortuna is licensed under a Creative Commons Attribution-NonCommercial 3.0 Unported License.
        
        See online version of this license here: <http://creativecommons.org/licenses/by-nc/3.0/>
        
Keywords: Fortuna,Random Patterns,Data Perturbation,Game Dice,WeightedChoice,Random Value Generator,Gaussian Distribution,Linear Distribution,TruffleShuffle,FlexCat,Percent True,ZeroCool,QuantumMonty,Custom Distribution,Rarity Table,D20,Generative Modeling
Platform: Darwin
Platform: Linux
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Cython
Classifier: Programming Language :: C++
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires: Cython
Requires-Python: >=3.6
Description-Content-Type: text/markdown
