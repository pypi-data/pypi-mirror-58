# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cproton')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cproton')
    _cproton = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cproton', [dirname(__file__)])
        except ImportError:
            import _cproton
            return _cproton
        try:
            _mod = imp.load_module('_cproton', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cproton = swig_import_helper()
    del swig_import_helper
else:
    import _cproton
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def pn_message_encode(msg, BIN_OUT):
    return _cproton.pn_message_encode(msg, BIN_OUT)
pn_message_encode = _cproton.pn_message_encode

def pn_message_decode(msg, BIN_IN):
    return _cproton.pn_message_decode(msg, BIN_IN)
pn_message_decode = _cproton.pn_message_decode

def pn_link_send(transport, BIN_IN):
    return _cproton.pn_link_send(transport, BIN_IN)
pn_link_send = _cproton.pn_link_send

def pn_link_recv(link, BIN_OUT):
    return _cproton.pn_link_recv(link, BIN_OUT)
pn_link_recv = _cproton.pn_link_recv

def pn_transport_push(transport, BIN_IN):
    return _cproton.pn_transport_push(transport, BIN_IN)
pn_transport_push = _cproton.pn_transport_push

def pn_transport_peek(transport, BIN_OUT):
    return _cproton.pn_transport_peek(transport, BIN_OUT)
pn_transport_peek = _cproton.pn_transport_peek

def pn_delivery(link, STRING):
    return _cproton.pn_delivery(link, STRING)
pn_delivery = _cproton.pn_delivery

def pn_delivery_tag(delivery):
    return _cproton.pn_delivery_tag(delivery)
pn_delivery_tag = _cproton.pn_delivery_tag

def pn_data_decode(data, BIN_IN):
    return _cproton.pn_data_decode(data, BIN_IN)
pn_data_decode = _cproton.pn_data_decode

def pn_data_encode(data, BIN_OUT):
    return _cproton.pn_data_encode(data, BIN_OUT)
pn_data_encode = _cproton.pn_data_encode

def pn_data_format(data, VTEXT_OUT):
    return _cproton.pn_data_format(data, VTEXT_OUT)
pn_data_format = _cproton.pn_data_format

def pn_ssl_get_cipher_name(ssl, OUTPUT):
    return _cproton.pn_ssl_get_cipher_name(ssl, OUTPUT)
pn_ssl_get_cipher_name = _cproton.pn_ssl_get_cipher_name

def pn_ssl_get_protocol_name(ssl, OUTPUT):
    return _cproton.pn_ssl_get_protocol_name(ssl, OUTPUT)
pn_ssl_get_protocol_name = _cproton.pn_ssl_get_protocol_name

def pn_ssl_get_remote_subject_subfield(ssl, field):
    return _cproton.pn_ssl_get_remote_subject_subfield(ssl, field)
pn_ssl_get_remote_subject_subfield = _cproton.pn_ssl_get_remote_subject_subfield

def pn_ssl_get_cert_fingerprint(ssl, OUTPUT, hash_alg):
    return _cproton.pn_ssl_get_cert_fingerprint(ssl, OUTPUT, hash_alg)
pn_ssl_get_cert_fingerprint = _cproton.pn_ssl_get_cert_fingerprint

def pn_ssl_get_peer_hostname(ssl, VTEXT_OUT):
    return _cproton.pn_ssl_get_peer_hostname(ssl, VTEXT_OUT)
pn_ssl_get_peer_hostname = _cproton.pn_ssl_get_peer_hostname

def pn_pyref_incref(object):
    return _cproton.pn_pyref_incref(object)
pn_pyref_incref = _cproton.pn_pyref_incref

def pn_pyref_decref(object):
    return _cproton.pn_pyref_decref(object)
pn_pyref_decref = _cproton.pn_pyref_decref

def pn_pyref_refcount(object):
    return _cproton.pn_pyref_refcount(object)
pn_pyref_refcount = _cproton.pn_pyref_refcount

def pn_pyref_reify(object):
    return _cproton.pn_pyref_reify(object)
pn_pyref_reify = _cproton.pn_pyref_reify

def pn_py2void(object):
    return _cproton.pn_py2void(object)
pn_py2void = _cproton.pn_py2void

def pn_void2py(object):
    return _cproton.pn_void2py(object)
pn_void2py = _cproton.pn_void2py

def pn_cast_pn_void(object):
    return _cproton.pn_cast_pn_void(object)
pn_cast_pn_void = _cproton.pn_cast_pn_void

def pn_pytracer(transport, message):
    return _cproton.pn_pytracer(transport, message)
pn_pytracer = _cproton.pn_pytracer

def pn_transport_set_pytracer(transport, obj):
    return _cproton.pn_transport_set_pytracer(transport, obj)
pn_transport_set_pytracer = _cproton.pn_transport_set_pytracer

def pn_transport_get_pytracer(transport):
    return _cproton.pn_transport_get_pytracer(transport)
pn_transport_get_pytracer = _cproton.pn_transport_get_pytracer
PROTON_IMPORT_EXPORT_H = _cproton.PROTON_IMPORT_EXPORT_H
PN_VERSION_MAJOR = _cproton.PN_VERSION_MAJOR
PN_VERSION_MINOR = _cproton.PN_VERSION_MINOR
PN_VERSION_POINT = _cproton.PN_VERSION_POINT
PROTON_TYPES_H = _cproton.PROTON_TYPES_H
PN_MILLIS_MAX = _cproton.PN_MILLIS_MAX

def pn_bytes(size, start):
    return _cproton.pn_bytes(size, start)
pn_bytes = _cproton.pn_bytes

def pn_rwbytes(size, start):
    return _cproton.pn_rwbytes(size, start)
pn_rwbytes = _cproton.pn_rwbytes
PROTON_OBJECT_H = _cproton.PROTON_OBJECT_H

def pn_class_id(clazz):
    return _cproton.pn_class_id(clazz)
pn_class_id = _cproton.pn_class_id

def pn_class_name(clazz):
    return _cproton.pn_class_name(clazz)
pn_class_name = _cproton.pn_class_name

def pn_class_new(clazz, size):
    return _cproton.pn_class_new(clazz, size)
pn_class_new = _cproton.pn_class_new

def pn_class_incref(clazz, object):
    return _cproton.pn_class_incref(clazz, object)
pn_class_incref = _cproton.pn_class_incref

def pn_class_refcount(clazz, object):
    return _cproton.pn_class_refcount(clazz, object)
pn_class_refcount = _cproton.pn_class_refcount

def pn_class_decref(clazz, object):
    return _cproton.pn_class_decref(clazz, object)
pn_class_decref = _cproton.pn_class_decref

def pn_class_free(clazz, object):
    return _cproton.pn_class_free(clazz, object)
pn_class_free = _cproton.pn_class_free

def pn_class_reify(clazz, object):
    return _cproton.pn_class_reify(clazz, object)
pn_class_reify = _cproton.pn_class_reify

def pn_class_hashcode(clazz, object):
    return _cproton.pn_class_hashcode(clazz, object)
pn_class_hashcode = _cproton.pn_class_hashcode

def pn_class_compare(clazz, a, b):
    return _cproton.pn_class_compare(clazz, a, b)
pn_class_compare = _cproton.pn_class_compare

def pn_class_equals(clazz, a, b):
    return _cproton.pn_class_equals(clazz, a, b)
pn_class_equals = _cproton.pn_class_equals

def pn_class_inspect(clazz, object, dst):
    return _cproton.pn_class_inspect(clazz, object, dst)
pn_class_inspect = _cproton.pn_class_inspect

def pn_void_new(clazz, size):
    return _cproton.pn_void_new(clazz, size)
pn_void_new = _cproton.pn_void_new

def pn_void_incref(object):
    return _cproton.pn_void_incref(object)
pn_void_incref = _cproton.pn_void_incref

def pn_void_decref(object):
    return _cproton.pn_void_decref(object)
pn_void_decref = _cproton.pn_void_decref

def pn_void_refcount(object):
    return _cproton.pn_void_refcount(object)
pn_void_refcount = _cproton.pn_void_refcount

def pn_void_hashcode(object):
    return _cproton.pn_void_hashcode(object)
pn_void_hashcode = _cproton.pn_void_hashcode

def pn_void_compare(a, b):
    return _cproton.pn_void_compare(a, b)
pn_void_compare = _cproton.pn_void_compare

def pn_void_inspect(object, dst):
    return _cproton.pn_void_inspect(object, dst)
pn_void_inspect = _cproton.pn_void_inspect

def pn_object_new(clazz, size):
    return _cproton.pn_object_new(clazz, size)
pn_object_new = _cproton.pn_object_new

def pn_object_reify(object):
    return _cproton.pn_object_reify(object)
pn_object_reify = _cproton.pn_object_reify

def pn_object_incref(object):
    return _cproton.pn_object_incref(object)
pn_object_incref = _cproton.pn_object_incref

def pn_object_refcount(object):
    return _cproton.pn_object_refcount(object)
pn_object_refcount = _cproton.pn_object_refcount

def pn_object_decref(object):
    return _cproton.pn_object_decref(object)
pn_object_decref = _cproton.pn_object_decref

def pn_object_free(object):
    return _cproton.pn_object_free(object)
pn_object_free = _cproton.pn_object_free

def pn_incref(object):
    return _cproton.pn_incref(object)
pn_incref = _cproton.pn_incref

def pn_decref(object):
    return _cproton.pn_decref(object)
pn_decref = _cproton.pn_decref

def pn_refcount(object):
    return _cproton.pn_refcount(object)
pn_refcount = _cproton.pn_refcount

def pn_free(object):
    return _cproton.pn_free(object)
pn_free = _cproton.pn_free

def pn_class(object):
    return _cproton.pn_class(object)
pn_class = _cproton.pn_class

def pn_hashcode(object):
    return _cproton.pn_hashcode(object)
pn_hashcode = _cproton.pn_hashcode

def pn_compare(a, b):
    return _cproton.pn_compare(a, b)
pn_compare = _cproton.pn_compare

def pn_equals(a, b):
    return _cproton.pn_equals(a, b)
pn_equals = _cproton.pn_equals

def pn_inspect(object, dst):
    return _cproton.pn_inspect(object, dst)
pn_inspect = _cproton.pn_inspect
PN_REFCOUNT = _cproton.PN_REFCOUNT
PN_REFCOUNT_KEY = _cproton.PN_REFCOUNT_KEY
PN_REFCOUNT_VALUE = _cproton.PN_REFCOUNT_VALUE

def pn_string(bytes):
    return _cproton.pn_string(bytes)
pn_string = _cproton.pn_string

def pn_string_get(string):
    return _cproton.pn_string_get(string)
pn_string_get = _cproton.pn_string_get

def pn_record():
    return _cproton.pn_record()
pn_record = _cproton.pn_record

def pn_record_def(record, key, clazz):
    return _cproton.pn_record_def(record, key, clazz)
pn_record_def = _cproton.pn_record_def

def pn_record_has(record, key):
    return _cproton.pn_record_has(record, key)
pn_record_has = _cproton.pn_record_has

def pn_record_get(record, key):
    return _cproton.pn_record_get(record, key)
pn_record_get = _cproton.pn_record_get

def pn_record_set(record, key, value):
    return _cproton.pn_record_set(record, key, value)
pn_record_set = _cproton.pn_record_set

def pn_record_clear(record):
    return _cproton.pn_record_clear(record)
pn_record_clear = _cproton.pn_record_clear
PROTON_ERROR_H = _cproton.PROTON_ERROR_H
PN_OK = _cproton.PN_OK
PN_EOS = _cproton.PN_EOS
PN_ERR = _cproton.PN_ERR
PN_OVERFLOW = _cproton.PN_OVERFLOW
PN_UNDERFLOW = _cproton.PN_UNDERFLOW
PN_STATE_ERR = _cproton.PN_STATE_ERR
PN_ARG_ERR = _cproton.PN_ARG_ERR
PN_TIMEOUT = _cproton.PN_TIMEOUT
PN_INTR = _cproton.PN_INTR
PN_INPROGRESS = _cproton.PN_INPROGRESS
PN_OUT_OF_MEMORY = _cproton.PN_OUT_OF_MEMORY
PN_ABORTED = _cproton.PN_ABORTED

def pn_code(code):
    return _cproton.pn_code(code)
pn_code = _cproton.pn_code

def pn_error():
    return _cproton.pn_error()
pn_error = _cproton.pn_error

def pn_error_free(error):
    return _cproton.pn_error_free(error)
pn_error_free = _cproton.pn_error_free

def pn_error_clear(error):
    return _cproton.pn_error_clear(error)
pn_error_clear = _cproton.pn_error_clear

def pn_error_set(error, code, text):
    return _cproton.pn_error_set(error, code, text)
pn_error_set = _cproton.pn_error_set

def pn_error_code(error):
    return _cproton.pn_error_code(error)
pn_error_code = _cproton.pn_error_code

def pn_error_text(error):
    return _cproton.pn_error_text(error)
pn_error_text = _cproton.pn_error_text

def pn_error_copy(error, src):
    return _cproton.pn_error_copy(error, src)
pn_error_copy = _cproton.pn_error_copy
PROTON_CONDITION_H = _cproton.PROTON_CONDITION_H

def pn_condition_is_set(condition):
    return _cproton.pn_condition_is_set(condition)
pn_condition_is_set = _cproton.pn_condition_is_set

def pn_condition_clear(condition):
    return _cproton.pn_condition_clear(condition)
pn_condition_clear = _cproton.pn_condition_clear

def pn_condition_get_name(condition):
    return _cproton.pn_condition_get_name(condition)
pn_condition_get_name = _cproton.pn_condition_get_name

def pn_condition_set_name(condition, name):
    return _cproton.pn_condition_set_name(condition, name)
pn_condition_set_name = _cproton.pn_condition_set_name

def pn_condition_get_description(condition):
    return _cproton.pn_condition_get_description(condition)
pn_condition_get_description = _cproton.pn_condition_get_description

def pn_condition_set_description(condition, description):
    return _cproton.pn_condition_set_description(condition, description)
pn_condition_set_description = _cproton.pn_condition_set_description

def pn_condition_info(condition):
    return _cproton.pn_condition_info(condition)
pn_condition_info = _cproton.pn_condition_info

def pn_condition_is_redirect(condition):
    return _cproton.pn_condition_is_redirect(condition)
pn_condition_is_redirect = _cproton.pn_condition_is_redirect

def pn_condition_redirect_host(condition):
    return _cproton.pn_condition_redirect_host(condition)
pn_condition_redirect_host = _cproton.pn_condition_redirect_host

def pn_condition_redirect_port(condition):
    return _cproton.pn_condition_redirect_port(condition)
pn_condition_redirect_port = _cproton.pn_condition_redirect_port

def pn_condition_copy(dest, src):
    return _cproton.pn_condition_copy(dest, src)
pn_condition_copy = _cproton.pn_condition_copy

def pn_condition():
    return _cproton.pn_condition()
pn_condition = _cproton.pn_condition

def pn_condition_free(arg1):
    return _cproton.pn_condition_free(arg1)
pn_condition_free = _cproton.pn_condition_free
PROTON_CONNECTION_H = _cproton.PROTON_CONNECTION_H
PN_LOCAL_UNINIT = _cproton.PN_LOCAL_UNINIT
PN_LOCAL_ACTIVE = _cproton.PN_LOCAL_ACTIVE
PN_LOCAL_CLOSED = _cproton.PN_LOCAL_CLOSED
PN_REMOTE_UNINIT = _cproton.PN_REMOTE_UNINIT
PN_REMOTE_ACTIVE = _cproton.PN_REMOTE_ACTIVE
PN_REMOTE_CLOSED = _cproton.PN_REMOTE_CLOSED
PN_LOCAL_MASK = _cproton.PN_LOCAL_MASK
PN_REMOTE_MASK = _cproton.PN_REMOTE_MASK

def pn_connection():
    return _cproton.pn_connection()
pn_connection = _cproton.pn_connection

def pn_connection_free(connection):
    return _cproton.pn_connection_free(connection)
pn_connection_free = _cproton.pn_connection_free

def pn_connection_release(connection):
    return _cproton.pn_connection_release(connection)
pn_connection_release = _cproton.pn_connection_release

def pn_connection_error(connection):
    return _cproton.pn_connection_error(connection)
pn_connection_error = _cproton.pn_connection_error

def pn_connection_collect(connection, collector):
    return _cproton.pn_connection_collect(connection, collector)
pn_connection_collect = _cproton.pn_connection_collect

def pn_connection_collector(connection):
    return _cproton.pn_connection_collector(connection)
pn_connection_collector = _cproton.pn_connection_collector

def pn_connection_get_context(connection):
    return _cproton.pn_connection_get_context(connection)
pn_connection_get_context = _cproton.pn_connection_get_context

def pn_connection_set_context(connection, context):
    return _cproton.pn_connection_set_context(connection, context)
pn_connection_set_context = _cproton.pn_connection_set_context

def pn_connection_attachments(connection):
    return _cproton.pn_connection_attachments(connection)
pn_connection_attachments = _cproton.pn_connection_attachments

def pn_connection_state(connection):
    return _cproton.pn_connection_state(connection)
pn_connection_state = _cproton.pn_connection_state

def pn_connection_open(connection):
    return _cproton.pn_connection_open(connection)
pn_connection_open = _cproton.pn_connection_open

def pn_connection_close(connection):
    return _cproton.pn_connection_close(connection)
pn_connection_close = _cproton.pn_connection_close

def pn_connection_reset(connection):
    return _cproton.pn_connection_reset(connection)
pn_connection_reset = _cproton.pn_connection_reset

def pn_connection_condition(connection):
    return _cproton.pn_connection_condition(connection)
pn_connection_condition = _cproton.pn_connection_condition

def pn_connection_remote_condition(connection):
    return _cproton.pn_connection_remote_condition(connection)
pn_connection_remote_condition = _cproton.pn_connection_remote_condition

def pn_connection_get_container(connection):
    return _cproton.pn_connection_get_container(connection)
pn_connection_get_container = _cproton.pn_connection_get_container

def pn_connection_set_container(connection, container):
    return _cproton.pn_connection_set_container(connection, container)
pn_connection_set_container = _cproton.pn_connection_set_container

def pn_connection_set_user(connection, user):
    return _cproton.pn_connection_set_user(connection, user)
pn_connection_set_user = _cproton.pn_connection_set_user

def pn_connection_set_password(connection, password):
    return _cproton.pn_connection_set_password(connection, password)
pn_connection_set_password = _cproton.pn_connection_set_password

def pn_connection_get_user(connection):
    return _cproton.pn_connection_get_user(connection)
pn_connection_get_user = _cproton.pn_connection_get_user

def pn_connection_get_hostname(connection):
    return _cproton.pn_connection_get_hostname(connection)
pn_connection_get_hostname = _cproton.pn_connection_get_hostname

def pn_connection_set_hostname(connection, hostname):
    return _cproton.pn_connection_set_hostname(connection, hostname)
pn_connection_set_hostname = _cproton.pn_connection_set_hostname

def pn_connection_remote_container(connection):
    return _cproton.pn_connection_remote_container(connection)
pn_connection_remote_container = _cproton.pn_connection_remote_container

def pn_connection_remote_hostname(connection):
    return _cproton.pn_connection_remote_hostname(connection)
pn_connection_remote_hostname = _cproton.pn_connection_remote_hostname

def pn_connection_offered_capabilities(connection):
    return _cproton.pn_connection_offered_capabilities(connection)
pn_connection_offered_capabilities = _cproton.pn_connection_offered_capabilities

def pn_connection_desired_capabilities(connection):
    return _cproton.pn_connection_desired_capabilities(connection)
pn_connection_desired_capabilities = _cproton.pn_connection_desired_capabilities

def pn_connection_properties(connection):
    return _cproton.pn_connection_properties(connection)
pn_connection_properties = _cproton.pn_connection_properties

def pn_connection_remote_offered_capabilities(connection):
    return _cproton.pn_connection_remote_offered_capabilities(connection)
pn_connection_remote_offered_capabilities = _cproton.pn_connection_remote_offered_capabilities

def pn_connection_remote_desired_capabilities(connection):
    return _cproton.pn_connection_remote_desired_capabilities(connection)
pn_connection_remote_desired_capabilities = _cproton.pn_connection_remote_desired_capabilities

def pn_connection_remote_properties(connection):
    return _cproton.pn_connection_remote_properties(connection)
pn_connection_remote_properties = _cproton.pn_connection_remote_properties

def pn_connection_transport(connection):
    return _cproton.pn_connection_transport(connection)
pn_connection_transport = _cproton.pn_connection_transport
PROTON_SESSION_H = _cproton.PROTON_SESSION_H

def pn_session(connection):
    return _cproton.pn_session(connection)
pn_session = _cproton.pn_session

def pn_session_free(session):
    return _cproton.pn_session_free(session)
pn_session_free = _cproton.pn_session_free

def pn_session_get_context(session):
    return _cproton.pn_session_get_context(session)
pn_session_get_context = _cproton.pn_session_get_context

def pn_session_set_context(session, context):
    return _cproton.pn_session_set_context(session, context)
pn_session_set_context = _cproton.pn_session_set_context

def pn_session_attachments(session):
    return _cproton.pn_session_attachments(session)
pn_session_attachments = _cproton.pn_session_attachments

def pn_session_state(session):
    return _cproton.pn_session_state(session)
pn_session_state = _cproton.pn_session_state

def pn_session_error(session):
    return _cproton.pn_session_error(session)
pn_session_error = _cproton.pn_session_error

def pn_session_condition(session):
    return _cproton.pn_session_condition(session)
pn_session_condition = _cproton.pn_session_condition

def pn_session_remote_condition(session):
    return _cproton.pn_session_remote_condition(session)
pn_session_remote_condition = _cproton.pn_session_remote_condition

def pn_session_connection(session):
    return _cproton.pn_session_connection(session)
pn_session_connection = _cproton.pn_session_connection

def pn_session_open(session):
    return _cproton.pn_session_open(session)
pn_session_open = _cproton.pn_session_open

def pn_session_close(session):
    return _cproton.pn_session_close(session)
pn_session_close = _cproton.pn_session_close

def pn_session_get_incoming_capacity(session):
    return _cproton.pn_session_get_incoming_capacity(session)
pn_session_get_incoming_capacity = _cproton.pn_session_get_incoming_capacity

def pn_session_set_incoming_capacity(session, capacity):
    return _cproton.pn_session_set_incoming_capacity(session, capacity)
pn_session_set_incoming_capacity = _cproton.pn_session_set_incoming_capacity

def pn_session_get_outgoing_window(session):
    return _cproton.pn_session_get_outgoing_window(session)
pn_session_get_outgoing_window = _cproton.pn_session_get_outgoing_window

def pn_session_set_outgoing_window(session, window):
    return _cproton.pn_session_set_outgoing_window(session, window)
pn_session_set_outgoing_window = _cproton.pn_session_set_outgoing_window

def pn_session_outgoing_bytes(session):
    return _cproton.pn_session_outgoing_bytes(session)
pn_session_outgoing_bytes = _cproton.pn_session_outgoing_bytes

def pn_session_incoming_bytes(session):
    return _cproton.pn_session_incoming_bytes(session)
pn_session_incoming_bytes = _cproton.pn_session_incoming_bytes

def pn_session_head(connection, state):
    return _cproton.pn_session_head(connection, state)
pn_session_head = _cproton.pn_session_head

def pn_session_next(session, state):
    return _cproton.pn_session_next(session, state)
pn_session_next = _cproton.pn_session_next
PROTON_LINK_H = _cproton.PROTON_LINK_H

def pn_sender(session, name):
    return _cproton.pn_sender(session, name)
pn_sender = _cproton.pn_sender

def pn_receiver(session, name):
    return _cproton.pn_receiver(session, name)
pn_receiver = _cproton.pn_receiver

def pn_link_free(link):
    return _cproton.pn_link_free(link)
pn_link_free = _cproton.pn_link_free

def pn_link_get_context(link):
    return _cproton.pn_link_get_context(link)
pn_link_get_context = _cproton.pn_link_get_context

def pn_link_set_context(link, context):
    return _cproton.pn_link_set_context(link, context)
pn_link_set_context = _cproton.pn_link_set_context

def pn_link_attachments(link):
    return _cproton.pn_link_attachments(link)
pn_link_attachments = _cproton.pn_link_attachments

def pn_link_name(link):
    return _cproton.pn_link_name(link)
pn_link_name = _cproton.pn_link_name

def pn_link_is_sender(link):
    return _cproton.pn_link_is_sender(link)
pn_link_is_sender = _cproton.pn_link_is_sender

def pn_link_is_receiver(link):
    return _cproton.pn_link_is_receiver(link)
pn_link_is_receiver = _cproton.pn_link_is_receiver

def pn_link_state(link):
    return _cproton.pn_link_state(link)
pn_link_state = _cproton.pn_link_state

def pn_link_error(link):
    return _cproton.pn_link_error(link)
pn_link_error = _cproton.pn_link_error

def pn_link_condition(link):
    return _cproton.pn_link_condition(link)
pn_link_condition = _cproton.pn_link_condition

def pn_link_remote_condition(link):
    return _cproton.pn_link_remote_condition(link)
pn_link_remote_condition = _cproton.pn_link_remote_condition

def pn_link_session(link):
    return _cproton.pn_link_session(link)
pn_link_session = _cproton.pn_link_session

def pn_link_head(connection, state):
    return _cproton.pn_link_head(connection, state)
pn_link_head = _cproton.pn_link_head

def pn_link_next(link, state):
    return _cproton.pn_link_next(link, state)
pn_link_next = _cproton.pn_link_next

def pn_link_open(link):
    return _cproton.pn_link_open(link)
pn_link_open = _cproton.pn_link_open

def pn_link_close(link):
    return _cproton.pn_link_close(link)
pn_link_close = _cproton.pn_link_close

def pn_link_detach(link):
    return _cproton.pn_link_detach(link)
pn_link_detach = _cproton.pn_link_detach

def pn_link_source(link):
    return _cproton.pn_link_source(link)
pn_link_source = _cproton.pn_link_source

def pn_link_target(link):
    return _cproton.pn_link_target(link)
pn_link_target = _cproton.pn_link_target

def pn_link_remote_source(link):
    return _cproton.pn_link_remote_source(link)
pn_link_remote_source = _cproton.pn_link_remote_source

def pn_link_remote_target(link):
    return _cproton.pn_link_remote_target(link)
pn_link_remote_target = _cproton.pn_link_remote_target

def pn_link_current(link):
    return _cproton.pn_link_current(link)
pn_link_current = _cproton.pn_link_current

def pn_link_advance(link):
    return _cproton.pn_link_advance(link)
pn_link_advance = _cproton.pn_link_advance

def pn_link_credit(link):
    return _cproton.pn_link_credit(link)
pn_link_credit = _cproton.pn_link_credit

def pn_link_queued(link):
    return _cproton.pn_link_queued(link)
pn_link_queued = _cproton.pn_link_queued

def pn_link_remote_credit(link):
    return _cproton.pn_link_remote_credit(link)
pn_link_remote_credit = _cproton.pn_link_remote_credit

def pn_link_get_drain(link):
    return _cproton.pn_link_get_drain(link)
pn_link_get_drain = _cproton.pn_link_get_drain

def pn_link_drained(link):
    return _cproton.pn_link_drained(link)
pn_link_drained = _cproton.pn_link_drained

def pn_link_available(link):
    return _cproton.pn_link_available(link)
pn_link_available = _cproton.pn_link_available
PN_SND_UNSETTLED = _cproton.PN_SND_UNSETTLED
PN_SND_SETTLED = _cproton.PN_SND_SETTLED
PN_SND_MIXED = _cproton.PN_SND_MIXED
PN_RCV_FIRST = _cproton.PN_RCV_FIRST
PN_RCV_SECOND = _cproton.PN_RCV_SECOND

def pn_link_snd_settle_mode(link):
    return _cproton.pn_link_snd_settle_mode(link)
pn_link_snd_settle_mode = _cproton.pn_link_snd_settle_mode

def pn_link_rcv_settle_mode(link):
    return _cproton.pn_link_rcv_settle_mode(link)
pn_link_rcv_settle_mode = _cproton.pn_link_rcv_settle_mode

def pn_link_set_snd_settle_mode(link, mode):
    return _cproton.pn_link_set_snd_settle_mode(link, mode)
pn_link_set_snd_settle_mode = _cproton.pn_link_set_snd_settle_mode

def pn_link_set_rcv_settle_mode(link, mode):
    return _cproton.pn_link_set_rcv_settle_mode(link, mode)
pn_link_set_rcv_settle_mode = _cproton.pn_link_set_rcv_settle_mode

def pn_link_remote_snd_settle_mode(link):
    return _cproton.pn_link_remote_snd_settle_mode(link)
pn_link_remote_snd_settle_mode = _cproton.pn_link_remote_snd_settle_mode

def pn_link_remote_rcv_settle_mode(link):
    return _cproton.pn_link_remote_rcv_settle_mode(link)
pn_link_remote_rcv_settle_mode = _cproton.pn_link_remote_rcv_settle_mode

def pn_link_unsettled(link):
    return _cproton.pn_link_unsettled(link)
pn_link_unsettled = _cproton.pn_link_unsettled

def pn_unsettled_head(link):
    return _cproton.pn_unsettled_head(link)
pn_unsettled_head = _cproton.pn_unsettled_head

def pn_unsettled_next(delivery):
    return _cproton.pn_unsettled_next(delivery)
pn_unsettled_next = _cproton.pn_unsettled_next

def pn_link_offered(sender, credit):
    return _cproton.pn_link_offered(sender, credit)
pn_link_offered = _cproton.pn_link_offered

def pn_link_flow(receiver, credit):
    return _cproton.pn_link_flow(receiver, credit)
pn_link_flow = _cproton.pn_link_flow

def pn_link_drain(receiver, credit):
    return _cproton.pn_link_drain(receiver, credit)
pn_link_drain = _cproton.pn_link_drain

def pn_link_set_drain(receiver, drain):
    return _cproton.pn_link_set_drain(receiver, drain)
pn_link_set_drain = _cproton.pn_link_set_drain

def pn_link_draining(receiver):
    return _cproton.pn_link_draining(receiver)
pn_link_draining = _cproton.pn_link_draining

def pn_link_max_message_size(link):
    return _cproton.pn_link_max_message_size(link)
pn_link_max_message_size = _cproton.pn_link_max_message_size

def pn_link_set_max_message_size(link, size):
    return _cproton.pn_link_set_max_message_size(link, size)
pn_link_set_max_message_size = _cproton.pn_link_set_max_message_size

def pn_link_remote_max_message_size(link):
    return _cproton.pn_link_remote_max_message_size(link)
pn_link_remote_max_message_size = _cproton.pn_link_remote_max_message_size
PROTON_TERMINUS_H = _cproton.PROTON_TERMINUS_H
PN_UNSPECIFIED = _cproton.PN_UNSPECIFIED
PN_SOURCE = _cproton.PN_SOURCE
PN_TARGET = _cproton.PN_TARGET
PN_COORDINATOR = _cproton.PN_COORDINATOR
PN_NONDURABLE = _cproton.PN_NONDURABLE
PN_CONFIGURATION = _cproton.PN_CONFIGURATION
PN_DELIVERIES = _cproton.PN_DELIVERIES
PN_EXPIRE_WITH_LINK = _cproton.PN_EXPIRE_WITH_LINK
PN_EXPIRE_WITH_SESSION = _cproton.PN_EXPIRE_WITH_SESSION
PN_EXPIRE_WITH_CONNECTION = _cproton.PN_EXPIRE_WITH_CONNECTION
PN_EXPIRE_NEVER = _cproton.PN_EXPIRE_NEVER
PN_DIST_MODE_UNSPECIFIED = _cproton.PN_DIST_MODE_UNSPECIFIED
PN_DIST_MODE_COPY = _cproton.PN_DIST_MODE_COPY
PN_DIST_MODE_MOVE = _cproton.PN_DIST_MODE_MOVE

def pn_terminus_get_type(terminus):
    return _cproton.pn_terminus_get_type(terminus)
pn_terminus_get_type = _cproton.pn_terminus_get_type

def pn_terminus_set_type(terminus, type):
    return _cproton.pn_terminus_set_type(terminus, type)
pn_terminus_set_type = _cproton.pn_terminus_set_type

def pn_terminus_get_address(terminus):
    return _cproton.pn_terminus_get_address(terminus)
pn_terminus_get_address = _cproton.pn_terminus_get_address

def pn_terminus_set_address(terminus, address):
    return _cproton.pn_terminus_set_address(terminus, address)
pn_terminus_set_address = _cproton.pn_terminus_set_address

def pn_terminus_get_distribution_mode(terminus):
    return _cproton.pn_terminus_get_distribution_mode(terminus)
pn_terminus_get_distribution_mode = _cproton.pn_terminus_get_distribution_mode

def pn_terminus_set_distribution_mode(terminus, mode):
    return _cproton.pn_terminus_set_distribution_mode(terminus, mode)
pn_terminus_set_distribution_mode = _cproton.pn_terminus_set_distribution_mode

def pn_terminus_get_durability(terminus):
    return _cproton.pn_terminus_get_durability(terminus)
pn_terminus_get_durability = _cproton.pn_terminus_get_durability

def pn_terminus_set_durability(terminus, durability):
    return _cproton.pn_terminus_set_durability(terminus, durability)
pn_terminus_set_durability = _cproton.pn_terminus_set_durability

def pn_terminus_get_expiry_policy(terminus):
    return _cproton.pn_terminus_get_expiry_policy(terminus)
pn_terminus_get_expiry_policy = _cproton.pn_terminus_get_expiry_policy

def pn_terminus_has_expiry_policy(terminus):
    return _cproton.pn_terminus_has_expiry_policy(terminus)
pn_terminus_has_expiry_policy = _cproton.pn_terminus_has_expiry_policy

def pn_terminus_set_expiry_policy(terminus, policy):
    return _cproton.pn_terminus_set_expiry_policy(terminus, policy)
pn_terminus_set_expiry_policy = _cproton.pn_terminus_set_expiry_policy

def pn_terminus_get_timeout(terminus):
    return _cproton.pn_terminus_get_timeout(terminus)
pn_terminus_get_timeout = _cproton.pn_terminus_get_timeout

def pn_terminus_set_timeout(terminus, timeout):
    return _cproton.pn_terminus_set_timeout(terminus, timeout)
pn_terminus_set_timeout = _cproton.pn_terminus_set_timeout

def pn_terminus_is_dynamic(terminus):
    return _cproton.pn_terminus_is_dynamic(terminus)
pn_terminus_is_dynamic = _cproton.pn_terminus_is_dynamic

def pn_terminus_set_dynamic(terminus, dynamic):
    return _cproton.pn_terminus_set_dynamic(terminus, dynamic)
pn_terminus_set_dynamic = _cproton.pn_terminus_set_dynamic

def pn_terminus_properties(terminus):
    return _cproton.pn_terminus_properties(terminus)
pn_terminus_properties = _cproton.pn_terminus_properties

def pn_terminus_capabilities(terminus):
    return _cproton.pn_terminus_capabilities(terminus)
pn_terminus_capabilities = _cproton.pn_terminus_capabilities

def pn_terminus_outcomes(terminus):
    return _cproton.pn_terminus_outcomes(terminus)
pn_terminus_outcomes = _cproton.pn_terminus_outcomes

def pn_terminus_filter(terminus):
    return _cproton.pn_terminus_filter(terminus)
pn_terminus_filter = _cproton.pn_terminus_filter

def pn_terminus_copy(terminus, src):
    return _cproton.pn_terminus_copy(terminus, src)
pn_terminus_copy = _cproton.pn_terminus_copy
PROTON_DELIVERY_H = _cproton.PROTON_DELIVERY_H

def pn_delivery_get_context(delivery):
    return _cproton.pn_delivery_get_context(delivery)
pn_delivery_get_context = _cproton.pn_delivery_get_context

def pn_delivery_set_context(delivery, context):
    return _cproton.pn_delivery_set_context(delivery, context)
pn_delivery_set_context = _cproton.pn_delivery_set_context

def pn_delivery_attachments(delivery):
    return _cproton.pn_delivery_attachments(delivery)
pn_delivery_attachments = _cproton.pn_delivery_attachments

def pn_delivery_link(delivery):
    return _cproton.pn_delivery_link(delivery)
pn_delivery_link = _cproton.pn_delivery_link

def pn_delivery_local(delivery):
    return _cproton.pn_delivery_local(delivery)
pn_delivery_local = _cproton.pn_delivery_local

def pn_delivery_local_state(delivery):
    return _cproton.pn_delivery_local_state(delivery)
pn_delivery_local_state = _cproton.pn_delivery_local_state

def pn_delivery_remote(delivery):
    return _cproton.pn_delivery_remote(delivery)
pn_delivery_remote = _cproton.pn_delivery_remote

def pn_delivery_remote_state(delivery):
    return _cproton.pn_delivery_remote_state(delivery)
pn_delivery_remote_state = _cproton.pn_delivery_remote_state

def pn_delivery_settled(delivery):
    return _cproton.pn_delivery_settled(delivery)
pn_delivery_settled = _cproton.pn_delivery_settled

def pn_delivery_pending(delivery):
    return _cproton.pn_delivery_pending(delivery)
pn_delivery_pending = _cproton.pn_delivery_pending

def pn_delivery_partial(delivery):
    return _cproton.pn_delivery_partial(delivery)
pn_delivery_partial = _cproton.pn_delivery_partial

def pn_delivery_aborted(delivery):
    return _cproton.pn_delivery_aborted(delivery)
pn_delivery_aborted = _cproton.pn_delivery_aborted

def pn_delivery_writable(delivery):
    return _cproton.pn_delivery_writable(delivery)
pn_delivery_writable = _cproton.pn_delivery_writable

def pn_delivery_readable(delivery):
    return _cproton.pn_delivery_readable(delivery)
pn_delivery_readable = _cproton.pn_delivery_readable

def pn_delivery_updated(delivery):
    return _cproton.pn_delivery_updated(delivery)
pn_delivery_updated = _cproton.pn_delivery_updated

def pn_delivery_update(delivery, state):
    return _cproton.pn_delivery_update(delivery, state)
pn_delivery_update = _cproton.pn_delivery_update

def pn_delivery_clear(delivery):
    return _cproton.pn_delivery_clear(delivery)
pn_delivery_clear = _cproton.pn_delivery_clear

def pn_delivery_current(delivery):
    return _cproton.pn_delivery_current(delivery)
pn_delivery_current = _cproton.pn_delivery_current

def pn_delivery_abort(delivery):
    return _cproton.pn_delivery_abort(delivery)
pn_delivery_abort = _cproton.pn_delivery_abort

def pn_delivery_settle(delivery):
    return _cproton.pn_delivery_settle(delivery)
pn_delivery_settle = _cproton.pn_delivery_settle

def pn_delivery_dump(delivery):
    return _cproton.pn_delivery_dump(delivery)
pn_delivery_dump = _cproton.pn_delivery_dump

def pn_delivery_buffered(delivery):
    return _cproton.pn_delivery_buffered(delivery)
pn_delivery_buffered = _cproton.pn_delivery_buffered

def pn_work_head(connection):
    return _cproton.pn_work_head(connection)
pn_work_head = _cproton.pn_work_head

def pn_work_next(delivery):
    return _cproton.pn_work_next(delivery)
pn_work_next = _cproton.pn_work_next
PROTON_DISPOSITION_H = _cproton.PROTON_DISPOSITION_H
PN_RECEIVED = _cproton.PN_RECEIVED
PN_ACCEPTED = _cproton.PN_ACCEPTED
PN_REJECTED = _cproton.PN_REJECTED
PN_RELEASED = _cproton.PN_RELEASED
PN_MODIFIED = _cproton.PN_MODIFIED

def pn_disposition_type(disposition):
    return _cproton.pn_disposition_type(disposition)
pn_disposition_type = _cproton.pn_disposition_type

def pn_disposition_type_name(disposition_type):
    return _cproton.pn_disposition_type_name(disposition_type)
pn_disposition_type_name = _cproton.pn_disposition_type_name

def pn_disposition_condition(disposition):
    return _cproton.pn_disposition_condition(disposition)
pn_disposition_condition = _cproton.pn_disposition_condition

def pn_disposition_data(disposition):
    return _cproton.pn_disposition_data(disposition)
pn_disposition_data = _cproton.pn_disposition_data

def pn_disposition_get_section_number(disposition):
    return _cproton.pn_disposition_get_section_number(disposition)
pn_disposition_get_section_number = _cproton.pn_disposition_get_section_number

def pn_disposition_set_section_number(disposition, section_number):
    return _cproton.pn_disposition_set_section_number(disposition, section_number)
pn_disposition_set_section_number = _cproton.pn_disposition_set_section_number

def pn_disposition_get_section_offset(disposition):
    return _cproton.pn_disposition_get_section_offset(disposition)
pn_disposition_get_section_offset = _cproton.pn_disposition_get_section_offset

def pn_disposition_set_section_offset(disposition, section_offset):
    return _cproton.pn_disposition_set_section_offset(disposition, section_offset)
pn_disposition_set_section_offset = _cproton.pn_disposition_set_section_offset

def pn_disposition_is_failed(disposition):
    return _cproton.pn_disposition_is_failed(disposition)
pn_disposition_is_failed = _cproton.pn_disposition_is_failed

def pn_disposition_set_failed(disposition, failed):
    return _cproton.pn_disposition_set_failed(disposition, failed)
pn_disposition_set_failed = _cproton.pn_disposition_set_failed

def pn_disposition_is_undeliverable(disposition):
    return _cproton.pn_disposition_is_undeliverable(disposition)
pn_disposition_is_undeliverable = _cproton.pn_disposition_is_undeliverable

def pn_disposition_set_undeliverable(disposition, undeliverable):
    return _cproton.pn_disposition_set_undeliverable(disposition, undeliverable)
pn_disposition_set_undeliverable = _cproton.pn_disposition_set_undeliverable

def pn_disposition_annotations(disposition):
    return _cproton.pn_disposition_annotations(disposition)
pn_disposition_annotations = _cproton.pn_disposition_annotations
PROTON_TRANSPORT_H = _cproton.PROTON_TRANSPORT_H
PN_TRACE_OFF = _cproton.PN_TRACE_OFF
PN_TRACE_RAW = _cproton.PN_TRACE_RAW
PN_TRACE_FRM = _cproton.PN_TRACE_FRM
PN_TRACE_DRV = _cproton.PN_TRACE_DRV
PN_TRACE_EVT = _cproton.PN_TRACE_EVT

def pn_transport():
    return _cproton.pn_transport()
pn_transport = _cproton.pn_transport

def pn_transport_set_server(transport):
    return _cproton.pn_transport_set_server(transport)
pn_transport_set_server = _cproton.pn_transport_set_server

def pn_transport_free(transport):
    return _cproton.pn_transport_free(transport)
pn_transport_free = _cproton.pn_transport_free

def pn_transport_get_user(transport):
    return _cproton.pn_transport_get_user(transport)
pn_transport_get_user = _cproton.pn_transport_get_user

def pn_transport_require_auth(transport, required):
    return _cproton.pn_transport_require_auth(transport, required)
pn_transport_require_auth = _cproton.pn_transport_require_auth

def pn_transport_is_authenticated(transport):
    return _cproton.pn_transport_is_authenticated(transport)
pn_transport_is_authenticated = _cproton.pn_transport_is_authenticated

def pn_transport_require_encryption(transport, required):
    return _cproton.pn_transport_require_encryption(transport, required)
pn_transport_require_encryption = _cproton.pn_transport_require_encryption

def pn_transport_is_encrypted(transport):
    return _cproton.pn_transport_is_encrypted(transport)
pn_transport_is_encrypted = _cproton.pn_transport_is_encrypted

def pn_transport_condition(transport):
    return _cproton.pn_transport_condition(transport)
pn_transport_condition = _cproton.pn_transport_condition

def pn_transport_logger(transport):
    return _cproton.pn_transport_logger(transport)
pn_transport_logger = _cproton.pn_transport_logger

def pn_transport_error(transport):
    return _cproton.pn_transport_error(transport)
pn_transport_error = _cproton.pn_transport_error

def pn_transport_bind(transport, connection):
    return _cproton.pn_transport_bind(transport, connection)
pn_transport_bind = _cproton.pn_transport_bind

def pn_transport_unbind(transport):
    return _cproton.pn_transport_unbind(transport)
pn_transport_unbind = _cproton.pn_transport_unbind

def pn_transport_trace(transport, trace):
    return _cproton.pn_transport_trace(transport, trace)
pn_transport_trace = _cproton.pn_transport_trace

def pn_transport_set_tracer(transport, tracer):
    return _cproton.pn_transport_set_tracer(transport, tracer)
pn_transport_set_tracer = _cproton.pn_transport_set_tracer

def pn_transport_get_tracer(transport):
    return _cproton.pn_transport_get_tracer(transport)
pn_transport_get_tracer = _cproton.pn_transport_get_tracer

def pn_transport_get_context(transport):
    return _cproton.pn_transport_get_context(transport)
pn_transport_get_context = _cproton.pn_transport_get_context

def pn_transport_set_context(transport, context):
    return _cproton.pn_transport_set_context(transport, context)
pn_transport_set_context = _cproton.pn_transport_set_context

def pn_transport_attachments(transport):
    return _cproton.pn_transport_attachments(transport)
pn_transport_attachments = _cproton.pn_transport_attachments

def pn_transport_log(transport, message):
    return _cproton.pn_transport_log(transport, message)
pn_transport_log = _cproton.pn_transport_log

def pn_transport_logf(transport, fmt):
    return _cproton.pn_transport_logf(transport, fmt)
pn_transport_logf = _cproton.pn_transport_logf

def pn_transport_get_channel_max(transport):
    return _cproton.pn_transport_get_channel_max(transport)
pn_transport_get_channel_max = _cproton.pn_transport_get_channel_max

def pn_transport_set_channel_max(transport, channel_max):
    return _cproton.pn_transport_set_channel_max(transport, channel_max)
pn_transport_set_channel_max = _cproton.pn_transport_set_channel_max

def pn_transport_remote_channel_max(transport):
    return _cproton.pn_transport_remote_channel_max(transport)
pn_transport_remote_channel_max = _cproton.pn_transport_remote_channel_max

def pn_transport_get_max_frame(transport):
    return _cproton.pn_transport_get_max_frame(transport)
pn_transport_get_max_frame = _cproton.pn_transport_get_max_frame

def pn_transport_set_max_frame(transport, size):
    return _cproton.pn_transport_set_max_frame(transport, size)
pn_transport_set_max_frame = _cproton.pn_transport_set_max_frame

def pn_transport_get_remote_max_frame(transport):
    return _cproton.pn_transport_get_remote_max_frame(transport)
pn_transport_get_remote_max_frame = _cproton.pn_transport_get_remote_max_frame

def pn_transport_get_idle_timeout(transport):
    return _cproton.pn_transport_get_idle_timeout(transport)
pn_transport_get_idle_timeout = _cproton.pn_transport_get_idle_timeout

def pn_transport_set_idle_timeout(transport, timeout):
    return _cproton.pn_transport_set_idle_timeout(transport, timeout)
pn_transport_set_idle_timeout = _cproton.pn_transport_set_idle_timeout

def pn_transport_get_remote_idle_timeout(transport):
    return _cproton.pn_transport_get_remote_idle_timeout(transport)
pn_transport_get_remote_idle_timeout = _cproton.pn_transport_get_remote_idle_timeout

def pn_transport_input(transport, bytes, available):
    return _cproton.pn_transport_input(transport, bytes, available)
pn_transport_input = _cproton.pn_transport_input

def pn_transport_output(transport, bytes, size):
    return _cproton.pn_transport_output(transport, bytes, size)
pn_transport_output = _cproton.pn_transport_output

def pn_transport_capacity(transport):
    return _cproton.pn_transport_capacity(transport)
pn_transport_capacity = _cproton.pn_transport_capacity

def pn_transport_tail(transport):
    return _cproton.pn_transport_tail(transport)
pn_transport_tail = _cproton.pn_transport_tail

def pn_transport_process(transport, size):
    return _cproton.pn_transport_process(transport, size)
pn_transport_process = _cproton.pn_transport_process

def pn_transport_close_tail(transport):
    return _cproton.pn_transport_close_tail(transport)
pn_transport_close_tail = _cproton.pn_transport_close_tail

def pn_transport_pending(transport):
    return _cproton.pn_transport_pending(transport)
pn_transport_pending = _cproton.pn_transport_pending

def pn_transport_head(transport):
    return _cproton.pn_transport_head(transport)
pn_transport_head = _cproton.pn_transport_head

def pn_transport_pop(transport, size):
    return _cproton.pn_transport_pop(transport, size)
pn_transport_pop = _cproton.pn_transport_pop

def pn_transport_close_head(transport):
    return _cproton.pn_transport_close_head(transport)
pn_transport_close_head = _cproton.pn_transport_close_head

def pn_transport_quiesced(transport):
    return _cproton.pn_transport_quiesced(transport)
pn_transport_quiesced = _cproton.pn_transport_quiesced

def pn_transport_head_closed(transport):
    return _cproton.pn_transport_head_closed(transport)
pn_transport_head_closed = _cproton.pn_transport_head_closed

def pn_transport_tail_closed(transport):
    return _cproton.pn_transport_tail_closed(transport)
pn_transport_tail_closed = _cproton.pn_transport_tail_closed

def pn_transport_closed(transport):
    return _cproton.pn_transport_closed(transport)
pn_transport_closed = _cproton.pn_transport_closed

def pn_transport_tick(transport, now):
    return _cproton.pn_transport_tick(transport, now)
pn_transport_tick = _cproton.pn_transport_tick

def pn_transport_get_frames_output(transport):
    return _cproton.pn_transport_get_frames_output(transport)
pn_transport_get_frames_output = _cproton.pn_transport_get_frames_output

def pn_transport_get_frames_input(transport):
    return _cproton.pn_transport_get_frames_input(transport)
pn_transport_get_frames_input = _cproton.pn_transport_get_frames_input

def pn_transport_connection(transport):
    return _cproton.pn_transport_connection(transport)
pn_transport_connection = _cproton.pn_transport_connection
PROTON_EVENT_H = _cproton.PROTON_EVENT_H
PN_EVENT_NONE = _cproton.PN_EVENT_NONE
PN_REACTOR_INIT = _cproton.PN_REACTOR_INIT
PN_REACTOR_QUIESCED = _cproton.PN_REACTOR_QUIESCED
PN_REACTOR_FINAL = _cproton.PN_REACTOR_FINAL
PN_TIMER_TASK = _cproton.PN_TIMER_TASK
PN_CONNECTION_INIT = _cproton.PN_CONNECTION_INIT
PN_CONNECTION_BOUND = _cproton.PN_CONNECTION_BOUND
PN_CONNECTION_UNBOUND = _cproton.PN_CONNECTION_UNBOUND
PN_CONNECTION_LOCAL_OPEN = _cproton.PN_CONNECTION_LOCAL_OPEN
PN_CONNECTION_REMOTE_OPEN = _cproton.PN_CONNECTION_REMOTE_OPEN
PN_CONNECTION_LOCAL_CLOSE = _cproton.PN_CONNECTION_LOCAL_CLOSE
PN_CONNECTION_REMOTE_CLOSE = _cproton.PN_CONNECTION_REMOTE_CLOSE
PN_CONNECTION_FINAL = _cproton.PN_CONNECTION_FINAL
PN_SESSION_INIT = _cproton.PN_SESSION_INIT
PN_SESSION_LOCAL_OPEN = _cproton.PN_SESSION_LOCAL_OPEN
PN_SESSION_REMOTE_OPEN = _cproton.PN_SESSION_REMOTE_OPEN
PN_SESSION_LOCAL_CLOSE = _cproton.PN_SESSION_LOCAL_CLOSE
PN_SESSION_REMOTE_CLOSE = _cproton.PN_SESSION_REMOTE_CLOSE
PN_SESSION_FINAL = _cproton.PN_SESSION_FINAL
PN_LINK_INIT = _cproton.PN_LINK_INIT
PN_LINK_LOCAL_OPEN = _cproton.PN_LINK_LOCAL_OPEN
PN_LINK_REMOTE_OPEN = _cproton.PN_LINK_REMOTE_OPEN
PN_LINK_LOCAL_CLOSE = _cproton.PN_LINK_LOCAL_CLOSE
PN_LINK_REMOTE_CLOSE = _cproton.PN_LINK_REMOTE_CLOSE
PN_LINK_LOCAL_DETACH = _cproton.PN_LINK_LOCAL_DETACH
PN_LINK_REMOTE_DETACH = _cproton.PN_LINK_REMOTE_DETACH
PN_LINK_FLOW = _cproton.PN_LINK_FLOW
PN_LINK_FINAL = _cproton.PN_LINK_FINAL
PN_DELIVERY = _cproton.PN_DELIVERY
PN_TRANSPORT = _cproton.PN_TRANSPORT
PN_TRANSPORT_AUTHENTICATED = _cproton.PN_TRANSPORT_AUTHENTICATED
PN_TRANSPORT_ERROR = _cproton.PN_TRANSPORT_ERROR
PN_TRANSPORT_HEAD_CLOSED = _cproton.PN_TRANSPORT_HEAD_CLOSED
PN_TRANSPORT_TAIL_CLOSED = _cproton.PN_TRANSPORT_TAIL_CLOSED
PN_TRANSPORT_CLOSED = _cproton.PN_TRANSPORT_CLOSED
PN_SELECTABLE_INIT = _cproton.PN_SELECTABLE_INIT
PN_SELECTABLE_UPDATED = _cproton.PN_SELECTABLE_UPDATED
PN_SELECTABLE_READABLE = _cproton.PN_SELECTABLE_READABLE
PN_SELECTABLE_WRITABLE = _cproton.PN_SELECTABLE_WRITABLE
PN_SELECTABLE_ERROR = _cproton.PN_SELECTABLE_ERROR
PN_SELECTABLE_EXPIRED = _cproton.PN_SELECTABLE_EXPIRED
PN_SELECTABLE_FINAL = _cproton.PN_SELECTABLE_FINAL
PN_CONNECTION_WAKE = _cproton.PN_CONNECTION_WAKE
PN_LISTENER_ACCEPT = _cproton.PN_LISTENER_ACCEPT
PN_LISTENER_CLOSE = _cproton.PN_LISTENER_CLOSE
PN_PROACTOR_INTERRUPT = _cproton.PN_PROACTOR_INTERRUPT
PN_PROACTOR_TIMEOUT = _cproton.PN_PROACTOR_TIMEOUT
PN_PROACTOR_INACTIVE = _cproton.PN_PROACTOR_INACTIVE
PN_LISTENER_OPEN = _cproton.PN_LISTENER_OPEN

def pn_event_type_name(type):
    return _cproton.pn_event_type_name(type)
pn_event_type_name = _cproton.pn_event_type_name

def pn_collector():
    return _cproton.pn_collector()
pn_collector = _cproton.pn_collector

def pn_collector_free(collector):
    return _cproton.pn_collector_free(collector)
pn_collector_free = _cproton.pn_collector_free

def pn_collector_release(collector):
    return _cproton.pn_collector_release(collector)
pn_collector_release = _cproton.pn_collector_release

def pn_collector_drain(collector):
    return _cproton.pn_collector_drain(collector)
pn_collector_drain = _cproton.pn_collector_drain

def pn_collector_put(collector, clazz, context, type):
    return _cproton.pn_collector_put(collector, clazz, context, type)
pn_collector_put = _cproton.pn_collector_put

def pn_collector_peek(collector):
    return _cproton.pn_collector_peek(collector)
pn_collector_peek = _cproton.pn_collector_peek

def pn_collector_pop(collector):
    return _cproton.pn_collector_pop(collector)
pn_collector_pop = _cproton.pn_collector_pop

def pn_collector_next(collector):
    return _cproton.pn_collector_next(collector)
pn_collector_next = _cproton.pn_collector_next

def pn_collector_prev(collector):
    return _cproton.pn_collector_prev(collector)
pn_collector_prev = _cproton.pn_collector_prev

def pn_collector_more(collector):
    return _cproton.pn_collector_more(collector)
pn_collector_more = _cproton.pn_collector_more

def pn_event_type(event):
    return _cproton.pn_event_type(event)
pn_event_type = _cproton.pn_event_type

def pn_event_class(event):
    return _cproton.pn_event_class(event)
pn_event_class = _cproton.pn_event_class

def pn_event_context(event):
    return _cproton.pn_event_context(event)
pn_event_context = _cproton.pn_event_context

def pn_event_connection(event):
    return _cproton.pn_event_connection(event)
pn_event_connection = _cproton.pn_event_connection

def pn_event_session(event):
    return _cproton.pn_event_session(event)
pn_event_session = _cproton.pn_event_session

def pn_event_link(event):
    return _cproton.pn_event_link(event)
pn_event_link = _cproton.pn_event_link

def pn_event_delivery(event):
    return _cproton.pn_event_delivery(event)
pn_event_delivery = _cproton.pn_event_delivery

def pn_event_transport(event):
    return _cproton.pn_event_transport(event)
pn_event_transport = _cproton.pn_event_transport

def pn_event_attachments(event):
    return _cproton.pn_event_attachments(event)
pn_event_attachments = _cproton.pn_event_attachments

def pn_event_condition(event):
    return _cproton.pn_event_condition(event)
pn_event_condition = _cproton.pn_event_condition

def pn_event_batch_next(batch):
    return _cproton.pn_event_batch_next(batch)
pn_event_batch_next = _cproton.pn_event_batch_next

def pn_event_copy(evt):
    return _cproton.pn_event_copy(evt)
pn_event_copy = _cproton.pn_event_copy
PROTON_MESSAGE_H = _cproton.PROTON_MESSAGE_H
PN_DEFAULT_PRIORITY = _cproton.PN_DEFAULT_PRIORITY

def pn_message():
    return _cproton.pn_message()
pn_message = _cproton.pn_message

def pn_message_free(msg):
    return _cproton.pn_message_free(msg)
pn_message_free = _cproton.pn_message_free

def pn_message_clear(msg):
    return _cproton.pn_message_clear(msg)
pn_message_clear = _cproton.pn_message_clear

def pn_message_errno(msg):
    return _cproton.pn_message_errno(msg)
pn_message_errno = _cproton.pn_message_errno

def pn_message_error(msg):
    return _cproton.pn_message_error(msg)
pn_message_error = _cproton.pn_message_error

def pn_message_is_inferred(msg):
    return _cproton.pn_message_is_inferred(msg)
pn_message_is_inferred = _cproton.pn_message_is_inferred

def pn_message_set_inferred(msg, inferred):
    return _cproton.pn_message_set_inferred(msg, inferred)
pn_message_set_inferred = _cproton.pn_message_set_inferred

def pn_message_is_durable(msg):
    return _cproton.pn_message_is_durable(msg)
pn_message_is_durable = _cproton.pn_message_is_durable

def pn_message_set_durable(msg, durable):
    return _cproton.pn_message_set_durable(msg, durable)
pn_message_set_durable = _cproton.pn_message_set_durable

def pn_message_get_priority(msg):
    return _cproton.pn_message_get_priority(msg)
pn_message_get_priority = _cproton.pn_message_get_priority

def pn_message_set_priority(msg, priority):
    return _cproton.pn_message_set_priority(msg, priority)
pn_message_set_priority = _cproton.pn_message_set_priority

def pn_message_get_ttl(msg):
    return _cproton.pn_message_get_ttl(msg)
pn_message_get_ttl = _cproton.pn_message_get_ttl

def pn_message_set_ttl(msg, ttl):
    return _cproton.pn_message_set_ttl(msg, ttl)
pn_message_set_ttl = _cproton.pn_message_set_ttl

def pn_message_is_first_acquirer(msg):
    return _cproton.pn_message_is_first_acquirer(msg)
pn_message_is_first_acquirer = _cproton.pn_message_is_first_acquirer

def pn_message_set_first_acquirer(msg, first):
    return _cproton.pn_message_set_first_acquirer(msg, first)
pn_message_set_first_acquirer = _cproton.pn_message_set_first_acquirer

def pn_message_get_delivery_count(msg):
    return _cproton.pn_message_get_delivery_count(msg)
pn_message_get_delivery_count = _cproton.pn_message_get_delivery_count

def pn_message_set_delivery_count(msg, count):
    return _cproton.pn_message_set_delivery_count(msg, count)
pn_message_set_delivery_count = _cproton.pn_message_set_delivery_count

def pn_message_id(msg):
    return _cproton.pn_message_id(msg)
pn_message_id = _cproton.pn_message_id

def pn_message_get_user_id(msg):
    return _cproton.pn_message_get_user_id(msg)
pn_message_get_user_id = _cproton.pn_message_get_user_id

def pn_message_set_user_id(msg, user_id):
    return _cproton.pn_message_set_user_id(msg, user_id)
pn_message_set_user_id = _cproton.pn_message_set_user_id

def pn_message_get_address(msg):
    return _cproton.pn_message_get_address(msg)
pn_message_get_address = _cproton.pn_message_get_address

def pn_message_set_address(msg, address):
    return _cproton.pn_message_set_address(msg, address)
pn_message_set_address = _cproton.pn_message_set_address

def pn_message_get_subject(msg):
    return _cproton.pn_message_get_subject(msg)
pn_message_get_subject = _cproton.pn_message_get_subject

def pn_message_set_subject(msg, subject):
    return _cproton.pn_message_set_subject(msg, subject)
pn_message_set_subject = _cproton.pn_message_set_subject

def pn_message_get_reply_to(msg):
    return _cproton.pn_message_get_reply_to(msg)
pn_message_get_reply_to = _cproton.pn_message_get_reply_to

def pn_message_set_reply_to(msg, reply_to):
    return _cproton.pn_message_set_reply_to(msg, reply_to)
pn_message_set_reply_to = _cproton.pn_message_set_reply_to

def pn_message_correlation_id(msg):
    return _cproton.pn_message_correlation_id(msg)
pn_message_correlation_id = _cproton.pn_message_correlation_id

def pn_message_get_content_type(msg):
    return _cproton.pn_message_get_content_type(msg)
pn_message_get_content_type = _cproton.pn_message_get_content_type

def pn_message_set_content_type(msg, type):
    return _cproton.pn_message_set_content_type(msg, type)
pn_message_set_content_type = _cproton.pn_message_set_content_type

def pn_message_get_content_encoding(msg):
    return _cproton.pn_message_get_content_encoding(msg)
pn_message_get_content_encoding = _cproton.pn_message_get_content_encoding

def pn_message_set_content_encoding(msg, encoding):
    return _cproton.pn_message_set_content_encoding(msg, encoding)
pn_message_set_content_encoding = _cproton.pn_message_set_content_encoding

def pn_message_get_expiry_time(msg):
    return _cproton.pn_message_get_expiry_time(msg)
pn_message_get_expiry_time = _cproton.pn_message_get_expiry_time

def pn_message_set_expiry_time(msg, time):
    return _cproton.pn_message_set_expiry_time(msg, time)
pn_message_set_expiry_time = _cproton.pn_message_set_expiry_time

def pn_message_get_creation_time(msg):
    return _cproton.pn_message_get_creation_time(msg)
pn_message_get_creation_time = _cproton.pn_message_get_creation_time

def pn_message_set_creation_time(msg, time):
    return _cproton.pn_message_set_creation_time(msg, time)
pn_message_set_creation_time = _cproton.pn_message_set_creation_time

def pn_message_get_group_id(msg):
    return _cproton.pn_message_get_group_id(msg)
pn_message_get_group_id = _cproton.pn_message_get_group_id

def pn_message_set_group_id(msg, group_id):
    return _cproton.pn_message_set_group_id(msg, group_id)
pn_message_set_group_id = _cproton.pn_message_set_group_id

def pn_message_get_group_sequence(msg):
    return _cproton.pn_message_get_group_sequence(msg)
pn_message_get_group_sequence = _cproton.pn_message_get_group_sequence

def pn_message_set_group_sequence(msg, n):
    return _cproton.pn_message_set_group_sequence(msg, n)
pn_message_set_group_sequence = _cproton.pn_message_set_group_sequence

def pn_message_get_reply_to_group_id(msg):
    return _cproton.pn_message_get_reply_to_group_id(msg)
pn_message_get_reply_to_group_id = _cproton.pn_message_get_reply_to_group_id

def pn_message_set_reply_to_group_id(msg, reply_to_group_id):
    return _cproton.pn_message_set_reply_to_group_id(msg, reply_to_group_id)
pn_message_set_reply_to_group_id = _cproton.pn_message_set_reply_to_group_id

def pn_message_instructions(msg):
    return _cproton.pn_message_instructions(msg)
pn_message_instructions = _cproton.pn_message_instructions

def pn_message_annotations(msg):
    return _cproton.pn_message_annotations(msg)
pn_message_annotations = _cproton.pn_message_annotations

def pn_message_properties(msg):
    return _cproton.pn_message_properties(msg)
pn_message_properties = _cproton.pn_message_properties

def pn_message_body(msg):
    return _cproton.pn_message_body(msg)
pn_message_body = _cproton.pn_message_body

def pn_message_encode2(msg, buf):
    return _cproton.pn_message_encode2(msg, buf)
pn_message_encode2 = _cproton.pn_message_encode2

def pn_message_send(msg, sender, buf):
    return _cproton.pn_message_send(msg, sender, buf)
pn_message_send = _cproton.pn_message_send

def pn_message_data(msg, data):
    return _cproton.pn_message_data(msg, data)
pn_message_data = _cproton.pn_message_data
PROTON_SASL_H = _cproton.PROTON_SASL_H
PN_SASL_NONE = _cproton.PN_SASL_NONE
PN_SASL_OK = _cproton.PN_SASL_OK
PN_SASL_AUTH = _cproton.PN_SASL_AUTH
PN_SASL_SYS = _cproton.PN_SASL_SYS
PN_SASL_PERM = _cproton.PN_SASL_PERM
PN_SASL_TEMP = _cproton.PN_SASL_TEMP

def pn_sasl(transport):
    return _cproton.pn_sasl(transport)
pn_sasl = _cproton.pn_sasl

def pn_sasl_extended():
    return _cproton.pn_sasl_extended()
pn_sasl_extended = _cproton.pn_sasl_extended

def pn_sasl_done(sasl, outcome):
    return _cproton.pn_sasl_done(sasl, outcome)
pn_sasl_done = _cproton.pn_sasl_done

def pn_sasl_outcome(sasl):
    return _cproton.pn_sasl_outcome(sasl)
pn_sasl_outcome = _cproton.pn_sasl_outcome

def pn_sasl_get_user(sasl):
    return _cproton.pn_sasl_get_user(sasl)
pn_sasl_get_user = _cproton.pn_sasl_get_user

def pn_sasl_get_mech(sasl):
    return _cproton.pn_sasl_get_mech(sasl)
pn_sasl_get_mech = _cproton.pn_sasl_get_mech

def pn_sasl_allowed_mechs(sasl, mechs):
    return _cproton.pn_sasl_allowed_mechs(sasl, mechs)
pn_sasl_allowed_mechs = _cproton.pn_sasl_allowed_mechs

def pn_sasl_set_allow_insecure_mechs(sasl, insecure):
    return _cproton.pn_sasl_set_allow_insecure_mechs(sasl, insecure)
pn_sasl_set_allow_insecure_mechs = _cproton.pn_sasl_set_allow_insecure_mechs

def pn_sasl_get_allow_insecure_mechs(sasl):
    return _cproton.pn_sasl_get_allow_insecure_mechs(sasl)
pn_sasl_get_allow_insecure_mechs = _cproton.pn_sasl_get_allow_insecure_mechs

def pn_sasl_config_name(sasl, name):
    return _cproton.pn_sasl_config_name(sasl, name)
pn_sasl_config_name = _cproton.pn_sasl_config_name

def pn_sasl_config_path(sasl, path):
    return _cproton.pn_sasl_config_path(sasl, path)
pn_sasl_config_path = _cproton.pn_sasl_config_path
PROTON_SSL_H = _cproton.PROTON_SSL_H
PN_SSL_MODE_CLIENT = _cproton.PN_SSL_MODE_CLIENT
PN_SSL_MODE_SERVER = _cproton.PN_SSL_MODE_SERVER
PN_SSL_RESUME_UNKNOWN = _cproton.PN_SSL_RESUME_UNKNOWN
PN_SSL_RESUME_NEW = _cproton.PN_SSL_RESUME_NEW
PN_SSL_RESUME_REUSED = _cproton.PN_SSL_RESUME_REUSED

def pn_ssl_present():
    return _cproton.pn_ssl_present()
pn_ssl_present = _cproton.pn_ssl_present

def pn_ssl_domain(mode):
    return _cproton.pn_ssl_domain(mode)
pn_ssl_domain = _cproton.pn_ssl_domain

def pn_ssl_domain_free(domain):
    return _cproton.pn_ssl_domain_free(domain)
pn_ssl_domain_free = _cproton.pn_ssl_domain_free

def pn_ssl_domain_set_credentials(domain, credential_1, credential_2, password):
    return _cproton.pn_ssl_domain_set_credentials(domain, credential_1, credential_2, password)
pn_ssl_domain_set_credentials = _cproton.pn_ssl_domain_set_credentials

def pn_ssl_domain_set_trusted_ca_db(domain, certificate_db):
    return _cproton.pn_ssl_domain_set_trusted_ca_db(domain, certificate_db)
pn_ssl_domain_set_trusted_ca_db = _cproton.pn_ssl_domain_set_trusted_ca_db
PN_SSL_VERIFY_NULL = _cproton.PN_SSL_VERIFY_NULL
PN_SSL_VERIFY_PEER = _cproton.PN_SSL_VERIFY_PEER
PN_SSL_ANONYMOUS_PEER = _cproton.PN_SSL_ANONYMOUS_PEER
PN_SSL_VERIFY_PEER_NAME = _cproton.PN_SSL_VERIFY_PEER_NAME

def pn_ssl_domain_set_peer_authentication(domain, mode, trusted_CAs):
    return _cproton.pn_ssl_domain_set_peer_authentication(domain, mode, trusted_CAs)
pn_ssl_domain_set_peer_authentication = _cproton.pn_ssl_domain_set_peer_authentication

def pn_ssl_domain_set_protocols(domain, protocols):
    return _cproton.pn_ssl_domain_set_protocols(domain, protocols)
pn_ssl_domain_set_protocols = _cproton.pn_ssl_domain_set_protocols

def pn_ssl_domain_set_ciphers(domain, ciphers):
    return _cproton.pn_ssl_domain_set_ciphers(domain, ciphers)
pn_ssl_domain_set_ciphers = _cproton.pn_ssl_domain_set_ciphers

def pn_ssl_domain_allow_unsecured_client(domain):
    return _cproton.pn_ssl_domain_allow_unsecured_client(domain)
pn_ssl_domain_allow_unsecured_client = _cproton.pn_ssl_domain_allow_unsecured_client

def pn_ssl(transport):
    return _cproton.pn_ssl(transport)
pn_ssl = _cproton.pn_ssl

def pn_ssl_init(ssl, domain, session_id):
    return _cproton.pn_ssl_init(ssl, domain, session_id)
pn_ssl_init = _cproton.pn_ssl_init

def pn_ssl_get_ssf(ssl):
    return _cproton.pn_ssl_get_ssf(ssl)
pn_ssl_get_ssf = _cproton.pn_ssl_get_ssf

def pn_ssl_resume_status(ssl):
    return _cproton.pn_ssl_resume_status(ssl)
pn_ssl_resume_status = _cproton.pn_ssl_resume_status

def pn_ssl_set_peer_hostname(ssl, hostname):
    return _cproton.pn_ssl_set_peer_hostname(ssl, hostname)
pn_ssl_set_peer_hostname = _cproton.pn_ssl_set_peer_hostname

def pn_ssl_get_remote_subject(ssl):
    return _cproton.pn_ssl_get_remote_subject(ssl)
pn_ssl_get_remote_subject = _cproton.pn_ssl_get_remote_subject
PN_SSL_CERT_SUBJECT_COUNTRY_NAME = _cproton.PN_SSL_CERT_SUBJECT_COUNTRY_NAME
PN_SSL_CERT_SUBJECT_STATE_OR_PROVINCE = _cproton.PN_SSL_CERT_SUBJECT_STATE_OR_PROVINCE
PN_SSL_CERT_SUBJECT_CITY_OR_LOCALITY = _cproton.PN_SSL_CERT_SUBJECT_CITY_OR_LOCALITY
PN_SSL_CERT_SUBJECT_ORGANIZATION_NAME = _cproton.PN_SSL_CERT_SUBJECT_ORGANIZATION_NAME
PN_SSL_CERT_SUBJECT_ORGANIZATION_UNIT = _cproton.PN_SSL_CERT_SUBJECT_ORGANIZATION_UNIT
PN_SSL_CERT_SUBJECT_COMMON_NAME = _cproton.PN_SSL_CERT_SUBJECT_COMMON_NAME
PN_SSL_SHA1 = _cproton.PN_SSL_SHA1
PN_SSL_SHA256 = _cproton.PN_SSL_SHA256
PN_SSL_SHA512 = _cproton.PN_SSL_SHA512
PN_SSL_MD5 = _cproton.PN_SSL_MD5
PROTON_CODEC_H = _cproton.PROTON_CODEC_H
PN_NULL = _cproton.PN_NULL
PN_BOOL = _cproton.PN_BOOL
PN_UBYTE = _cproton.PN_UBYTE
PN_BYTE = _cproton.PN_BYTE
PN_USHORT = _cproton.PN_USHORT
PN_SHORT = _cproton.PN_SHORT
PN_UINT = _cproton.PN_UINT
PN_INT = _cproton.PN_INT
PN_CHAR = _cproton.PN_CHAR
PN_ULONG = _cproton.PN_ULONG
PN_LONG = _cproton.PN_LONG
PN_TIMESTAMP = _cproton.PN_TIMESTAMP
PN_FLOAT = _cproton.PN_FLOAT
PN_DOUBLE = _cproton.PN_DOUBLE
PN_DECIMAL32 = _cproton.PN_DECIMAL32
PN_DECIMAL64 = _cproton.PN_DECIMAL64
PN_DECIMAL128 = _cproton.PN_DECIMAL128
PN_UUID = _cproton.PN_UUID
PN_BINARY = _cproton.PN_BINARY
PN_STRING = _cproton.PN_STRING
PN_SYMBOL = _cproton.PN_SYMBOL
PN_DESCRIBED = _cproton.PN_DESCRIBED
PN_ARRAY = _cproton.PN_ARRAY
PN_LIST = _cproton.PN_LIST
PN_MAP = _cproton.PN_MAP
PN_INVALID = _cproton.PN_INVALID

def pn_type_name(type):
    return _cproton.pn_type_name(type)
pn_type_name = _cproton.pn_type_name

def pn_data(capacity):
    return _cproton.pn_data(capacity)
pn_data = _cproton.pn_data

def pn_data_free(data):
    return _cproton.pn_data_free(data)
pn_data_free = _cproton.pn_data_free

def pn_data_errno(data):
    return _cproton.pn_data_errno(data)
pn_data_errno = _cproton.pn_data_errno

def pn_data_error(data):
    return _cproton.pn_data_error(data)
pn_data_error = _cproton.pn_data_error

def pn_data_fill(data, fmt):
    return _cproton.pn_data_fill(data, fmt)
pn_data_fill = _cproton.pn_data_fill

def pn_data_scan(data, fmt):
    return _cproton.pn_data_scan(data, fmt)
pn_data_scan = _cproton.pn_data_scan

def pn_data_clear(data):
    return _cproton.pn_data_clear(data)
pn_data_clear = _cproton.pn_data_clear

def pn_data_size(data):
    return _cproton.pn_data_size(data)
pn_data_size = _cproton.pn_data_size

def pn_data_rewind(data):
    return _cproton.pn_data_rewind(data)
pn_data_rewind = _cproton.pn_data_rewind

def pn_data_next(data):
    return _cproton.pn_data_next(data)
pn_data_next = _cproton.pn_data_next

def pn_data_prev(data):
    return _cproton.pn_data_prev(data)
pn_data_prev = _cproton.pn_data_prev

def pn_data_enter(data):
    return _cproton.pn_data_enter(data)
pn_data_enter = _cproton.pn_data_enter

def pn_data_exit(data):
    return _cproton.pn_data_exit(data)
pn_data_exit = _cproton.pn_data_exit

def pn_data_lookup(data, name):
    return _cproton.pn_data_lookup(data, name)
pn_data_lookup = _cproton.pn_data_lookup

def pn_data_type(data):
    return _cproton.pn_data_type(data)
pn_data_type = _cproton.pn_data_type

def pn_data_print(data):
    return _cproton.pn_data_print(data)
pn_data_print = _cproton.pn_data_print

def pn_data_encoded_size(data):
    return _cproton.pn_data_encoded_size(data)
pn_data_encoded_size = _cproton.pn_data_encoded_size

def pn_data_put_list(data):
    return _cproton.pn_data_put_list(data)
pn_data_put_list = _cproton.pn_data_put_list

def pn_data_put_map(data):
    return _cproton.pn_data_put_map(data)
pn_data_put_map = _cproton.pn_data_put_map

def pn_data_put_array(data, described, type):
    return _cproton.pn_data_put_array(data, described, type)
pn_data_put_array = _cproton.pn_data_put_array

def pn_data_put_described(data):
    return _cproton.pn_data_put_described(data)
pn_data_put_described = _cproton.pn_data_put_described

def pn_data_put_null(data):
    return _cproton.pn_data_put_null(data)
pn_data_put_null = _cproton.pn_data_put_null

def pn_data_put_bool(data, b):
    return _cproton.pn_data_put_bool(data, b)
pn_data_put_bool = _cproton.pn_data_put_bool

def pn_data_put_ubyte(data, ub):
    return _cproton.pn_data_put_ubyte(data, ub)
pn_data_put_ubyte = _cproton.pn_data_put_ubyte

def pn_data_put_byte(data, b):
    return _cproton.pn_data_put_byte(data, b)
pn_data_put_byte = _cproton.pn_data_put_byte

def pn_data_put_ushort(data, us):
    return _cproton.pn_data_put_ushort(data, us)
pn_data_put_ushort = _cproton.pn_data_put_ushort

def pn_data_put_short(data, s):
    return _cproton.pn_data_put_short(data, s)
pn_data_put_short = _cproton.pn_data_put_short

def pn_data_put_uint(data, ui):
    return _cproton.pn_data_put_uint(data, ui)
pn_data_put_uint = _cproton.pn_data_put_uint

def pn_data_put_int(data, i):
    return _cproton.pn_data_put_int(data, i)
pn_data_put_int = _cproton.pn_data_put_int

def pn_data_put_char(data, c):
    return _cproton.pn_data_put_char(data, c)
pn_data_put_char = _cproton.pn_data_put_char

def pn_data_put_ulong(data, ul):
    return _cproton.pn_data_put_ulong(data, ul)
pn_data_put_ulong = _cproton.pn_data_put_ulong

def pn_data_put_long(data, l):
    return _cproton.pn_data_put_long(data, l)
pn_data_put_long = _cproton.pn_data_put_long

def pn_data_put_timestamp(data, t):
    return _cproton.pn_data_put_timestamp(data, t)
pn_data_put_timestamp = _cproton.pn_data_put_timestamp

def pn_data_put_float(data, f):
    return _cproton.pn_data_put_float(data, f)
pn_data_put_float = _cproton.pn_data_put_float

def pn_data_put_double(data, d):
    return _cproton.pn_data_put_double(data, d)
pn_data_put_double = _cproton.pn_data_put_double

def pn_data_put_decimal32(data, d):
    return _cproton.pn_data_put_decimal32(data, d)
pn_data_put_decimal32 = _cproton.pn_data_put_decimal32

def pn_data_put_decimal64(data, d):
    return _cproton.pn_data_put_decimal64(data, d)
pn_data_put_decimal64 = _cproton.pn_data_put_decimal64

def pn_data_put_decimal128(data, d):
    return _cproton.pn_data_put_decimal128(data, d)
pn_data_put_decimal128 = _cproton.pn_data_put_decimal128

def pn_data_put_uuid(data, u):
    return _cproton.pn_data_put_uuid(data, u)
pn_data_put_uuid = _cproton.pn_data_put_uuid

def pn_data_put_binary(data, bytes):
    return _cproton.pn_data_put_binary(data, bytes)
pn_data_put_binary = _cproton.pn_data_put_binary

def pn_data_put_string(data, string):
    return _cproton.pn_data_put_string(data, string)
pn_data_put_string = _cproton.pn_data_put_string

def pn_data_put_symbol(data, symbol):
    return _cproton.pn_data_put_symbol(data, symbol)
pn_data_put_symbol = _cproton.pn_data_put_symbol

def pn_data_get_list(data):
    return _cproton.pn_data_get_list(data)
pn_data_get_list = _cproton.pn_data_get_list

def pn_data_get_map(data):
    return _cproton.pn_data_get_map(data)
pn_data_get_map = _cproton.pn_data_get_map

def pn_data_get_array(data):
    return _cproton.pn_data_get_array(data)
pn_data_get_array = _cproton.pn_data_get_array

def pn_data_is_array_described(data):
    return _cproton.pn_data_is_array_described(data)
pn_data_is_array_described = _cproton.pn_data_is_array_described

def pn_data_get_array_type(data):
    return _cproton.pn_data_get_array_type(data)
pn_data_get_array_type = _cproton.pn_data_get_array_type

def pn_data_is_described(data):
    return _cproton.pn_data_is_described(data)
pn_data_is_described = _cproton.pn_data_is_described

def pn_data_is_null(data):
    return _cproton.pn_data_is_null(data)
pn_data_is_null = _cproton.pn_data_is_null

def pn_data_get_bool(data):
    return _cproton.pn_data_get_bool(data)
pn_data_get_bool = _cproton.pn_data_get_bool

def pn_data_get_ubyte(data):
    return _cproton.pn_data_get_ubyte(data)
pn_data_get_ubyte = _cproton.pn_data_get_ubyte

def pn_data_get_byte(data):
    return _cproton.pn_data_get_byte(data)
pn_data_get_byte = _cproton.pn_data_get_byte

def pn_data_get_ushort(data):
    return _cproton.pn_data_get_ushort(data)
pn_data_get_ushort = _cproton.pn_data_get_ushort

def pn_data_get_short(data):
    return _cproton.pn_data_get_short(data)
pn_data_get_short = _cproton.pn_data_get_short

def pn_data_get_uint(data):
    return _cproton.pn_data_get_uint(data)
pn_data_get_uint = _cproton.pn_data_get_uint

def pn_data_get_int(data):
    return _cproton.pn_data_get_int(data)
pn_data_get_int = _cproton.pn_data_get_int

def pn_data_get_char(data):
    return _cproton.pn_data_get_char(data)
pn_data_get_char = _cproton.pn_data_get_char

def pn_data_get_ulong(data):
    return _cproton.pn_data_get_ulong(data)
pn_data_get_ulong = _cproton.pn_data_get_ulong

def pn_data_get_long(data):
    return _cproton.pn_data_get_long(data)
pn_data_get_long = _cproton.pn_data_get_long

def pn_data_get_timestamp(data):
    return _cproton.pn_data_get_timestamp(data)
pn_data_get_timestamp = _cproton.pn_data_get_timestamp

def pn_data_get_float(data):
    return _cproton.pn_data_get_float(data)
pn_data_get_float = _cproton.pn_data_get_float

def pn_data_get_double(data):
    return _cproton.pn_data_get_double(data)
pn_data_get_double = _cproton.pn_data_get_double

def pn_data_get_decimal32(data):
    return _cproton.pn_data_get_decimal32(data)
pn_data_get_decimal32 = _cproton.pn_data_get_decimal32

def pn_data_get_decimal64(data):
    return _cproton.pn_data_get_decimal64(data)
pn_data_get_decimal64 = _cproton.pn_data_get_decimal64

def pn_data_get_decimal128(data):
    return _cproton.pn_data_get_decimal128(data)
pn_data_get_decimal128 = _cproton.pn_data_get_decimal128

def pn_data_get_uuid(data):
    return _cproton.pn_data_get_uuid(data)
pn_data_get_uuid = _cproton.pn_data_get_uuid

def pn_data_get_binary(data):
    return _cproton.pn_data_get_binary(data)
pn_data_get_binary = _cproton.pn_data_get_binary

def pn_data_get_string(data):
    return _cproton.pn_data_get_string(data)
pn_data_get_string = _cproton.pn_data_get_string

def pn_data_get_symbol(data):
    return _cproton.pn_data_get_symbol(data)
pn_data_get_symbol = _cproton.pn_data_get_symbol

def pn_data_get_bytes(data):
    return _cproton.pn_data_get_bytes(data)
pn_data_get_bytes = _cproton.pn_data_get_bytes

def pn_data_copy(data, src):
    return _cproton.pn_data_copy(data, src)
pn_data_copy = _cproton.pn_data_copy

def pn_data_append(data, src):
    return _cproton.pn_data_append(data, src)
pn_data_append = _cproton.pn_data_append

def pn_data_appendn(data, src, limit):
    return _cproton.pn_data_appendn(data, src, limit)
pn_data_appendn = _cproton.pn_data_appendn

def pn_data_narrow(data):
    return _cproton.pn_data_narrow(data)
pn_data_narrow = _cproton.pn_data_narrow

def pn_data_widen(data):
    return _cproton.pn_data_widen(data)
pn_data_widen = _cproton.pn_data_widen

def pn_data_point(data):
    return _cproton.pn_data_point(data)
pn_data_point = _cproton.pn_data_point

def pn_data_restore(data, point):
    return _cproton.pn_data_restore(data, point)
pn_data_restore = _cproton.pn_data_restore

def pn_data_dump(data):
    return _cproton.pn_data_dump(data)
pn_data_dump = _cproton.pn_data_dump

def pn_cast_pn_connection(x):
    return _cproton.pn_cast_pn_connection(x)
pn_cast_pn_connection = _cproton.pn_cast_pn_connection

def pn_cast_pn_session(x):
    return _cproton.pn_cast_pn_session(x)
pn_cast_pn_session = _cproton.pn_cast_pn_session

def pn_cast_pn_link(x):
    return _cproton.pn_cast_pn_link(x)
pn_cast_pn_link = _cproton.pn_cast_pn_link

def pn_cast_pn_delivery(x):
    return _cproton.pn_cast_pn_delivery(x)
pn_cast_pn_delivery = _cproton.pn_cast_pn_delivery

def pn_cast_pn_transport(x):
    return _cproton.pn_cast_pn_transport(x)
pn_cast_pn_transport = _cproton.pn_cast_pn_transport
PROTON_CONNECTION_DRIVER_H = _cproton.PROTON_CONNECTION_DRIVER_H

def pn_connection_driver_init(arg1, arg2, arg3):
    return _cproton.pn_connection_driver_init(arg1, arg2, arg3)
pn_connection_driver_init = _cproton.pn_connection_driver_init

def pn_connection_driver_bind(d):
    return _cproton.pn_connection_driver_bind(d)
pn_connection_driver_bind = _cproton.pn_connection_driver_bind

def pn_connection_driver_destroy(arg1):
    return _cproton.pn_connection_driver_destroy(arg1)
pn_connection_driver_destroy = _cproton.pn_connection_driver_destroy

def pn_connection_driver_release_connection(d):
    return _cproton.pn_connection_driver_release_connection(d)
pn_connection_driver_release_connection = _cproton.pn_connection_driver_release_connection

def pn_connection_driver_read_buffer(arg1):
    return _cproton.pn_connection_driver_read_buffer(arg1)
pn_connection_driver_read_buffer = _cproton.pn_connection_driver_read_buffer

def pn_connection_driver_read_done(arg1, n):
    return _cproton.pn_connection_driver_read_done(arg1, n)
pn_connection_driver_read_done = _cproton.pn_connection_driver_read_done

def pn_connection_driver_read_close(arg1):
    return _cproton.pn_connection_driver_read_close(arg1)
pn_connection_driver_read_close = _cproton.pn_connection_driver_read_close

def pn_connection_driver_read_closed(arg1):
    return _cproton.pn_connection_driver_read_closed(arg1)
pn_connection_driver_read_closed = _cproton.pn_connection_driver_read_closed

def pn_connection_driver_write_buffer(arg1):
    return _cproton.pn_connection_driver_write_buffer(arg1)
pn_connection_driver_write_buffer = _cproton.pn_connection_driver_write_buffer

def pn_connection_driver_write_done(arg1, n):
    return _cproton.pn_connection_driver_write_done(arg1, n)
pn_connection_driver_write_done = _cproton.pn_connection_driver_write_done

def pn_connection_driver_write_close(arg1):
    return _cproton.pn_connection_driver_write_close(arg1)
pn_connection_driver_write_close = _cproton.pn_connection_driver_write_close

def pn_connection_driver_write_closed(arg1):
    return _cproton.pn_connection_driver_write_closed(arg1)
pn_connection_driver_write_closed = _cproton.pn_connection_driver_write_closed

def pn_connection_driver_close(c):
    return _cproton.pn_connection_driver_close(c)
pn_connection_driver_close = _cproton.pn_connection_driver_close

def pn_connection_driver_next_event(arg1):
    return _cproton.pn_connection_driver_next_event(arg1)
pn_connection_driver_next_event = _cproton.pn_connection_driver_next_event

def pn_connection_driver_has_event(arg1):
    return _cproton.pn_connection_driver_has_event(arg1)
pn_connection_driver_has_event = _cproton.pn_connection_driver_has_event

def pn_connection_driver_finished(arg1):
    return _cproton.pn_connection_driver_finished(arg1)
pn_connection_driver_finished = _cproton.pn_connection_driver_finished

def pn_connection_driver_errorf(d, name, fmt):
    return _cproton.pn_connection_driver_errorf(d, name, fmt)
pn_connection_driver_errorf = _cproton.pn_connection_driver_errorf

def pn_event_batch_connection_driver(batch):
    return _cproton.pn_event_batch_connection_driver(batch)
pn_event_batch_connection_driver = _cproton.pn_event_batch_connection_driver

def pn_connection_driver_log(d, msg):
    return _cproton.pn_connection_driver_log(d, msg)
pn_connection_driver_log = _cproton.pn_connection_driver_log

def pn_connection_driver_ptr(connection):
    return _cproton.pn_connection_driver_ptr(connection)
pn_connection_driver_ptr = _cproton.pn_connection_driver_ptr
PROTON_CID_H = _cproton.PROTON_CID_H
CID_pn_object = _cproton.CID_pn_object
CID_pn_void = _cproton.CID_pn_void
CID_pn_weakref = _cproton.CID_pn_weakref
CID_pn_string = _cproton.CID_pn_string
CID_pn_list = _cproton.CID_pn_list
CID_pn_map = _cproton.CID_pn_map
CID_pn_hash = _cproton.CID_pn_hash
CID_pn_record = _cproton.CID_pn_record
CID_pn_collector = _cproton.CID_pn_collector
CID_pn_event = _cproton.CID_pn_event
CID_pn_buffer = _cproton.CID_pn_buffer
CID_pn_error = _cproton.CID_pn_error
CID_pn_data = _cproton.CID_pn_data
CID_pn_connection = _cproton.CID_pn_connection
CID_pn_session = _cproton.CID_pn_session
CID_pn_link = _cproton.CID_pn_link
CID_pn_delivery = _cproton.CID_pn_delivery
CID_pn_transport = _cproton.CID_pn_transport
CID_pn_message = _cproton.CID_pn_message
CID_pn_reactor = _cproton.CID_pn_reactor
CID_pn_handler = _cproton.CID_pn_handler
CID_pn_timer = _cproton.CID_pn_timer
CID_pn_task = _cproton.CID_pn_task
CID_pn_io = _cproton.CID_pn_io
CID_pn_selector = _cproton.CID_pn_selector
CID_pn_selectable = _cproton.CID_pn_selectable
CID_pn_url = _cproton.CID_pn_url
CID_pn_strdup = _cproton.CID_pn_strdup
CID_pn_listener = _cproton.CID_pn_listener
CID_pn_proactor = _cproton.CID_pn_proactor
CID_pn_listener_socket = _cproton.CID_pn_listener_socket
# This file is compatible with both classic and new-style classes.

cvar = _cproton.cvar
PN_PYREF = cvar.PN_PYREF
pn_bytes_null = cvar.pn_bytes_null
pn_rwbytes_null = cvar.pn_rwbytes_null
PN_OBJECT = cvar.PN_OBJECT
PN_VOID = cvar.PN_VOID
PN_WEAKREF = cvar.PN_WEAKREF

