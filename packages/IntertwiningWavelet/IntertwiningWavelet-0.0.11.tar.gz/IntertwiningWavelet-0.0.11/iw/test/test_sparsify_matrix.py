import unittest


import numpy as np
import scipy.sparse as sp

from iw.multiresolution.sparsify_matrix import  sparsify_matrix


class SparsifyTest(unittest.TestCase):

    def test_sparsify(self):
#         M_full = np.array(
#              [[ -2.00000 ,  1.00000  , 0.00000],
#               [  1.00000 , -2.00000  , 0.07000],
#               [  0.00000 ,  0.07000  ,-1.07143]])

        M_full = np.array(
             [[ -2.0 ,  1.0 ,  0 , 0  , 0  , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0  , 0 , 0],
          [  1.0 , -2.0 ,  1.0 , 0  , 0  , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0  , 0 , 0],
          [  0.0 ,  0.6 , -2.0 , 0.6  , 0  , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0  , 0 , 0],
          [  0.0 ,  0.0 ,  1.0 , -2.0 ,  1.0 , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 1.0  , -1.7 , 0.7 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.7  ,-1.7 , 1.0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 1.0 , -2.0 , 1.0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  1.0 , -2 , 1.0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  1.0 ,-2.0  , 1.0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 1.0  , -2.0 , 1.0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 1.0  , -2.0 , 1.0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 1.0  , -2.0,  1.0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 1.0 , -2.0 ,  1 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 0.0 ,  1.0 , -2.0 ,  1.0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 0.0 ,  0.0 ,  1.0 , -2.0 , 1],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 ,  1.0 ,-2.0]])

        Ms = sp.coo_matrix(M_full)
        M = Ms.data
        col = Ms.col.astype(np.int_)
        row = Ms.row.astype(np.int_)
        shape = Ms.shape[0]

        threshold = np.array([0.8, 1.0, 0.01,0.8 ,0.8,0.8,0.8,0.8,0.8,0.8,0.8, 0.8,0.8,0.8,0.8,0.8])

        data_s, row_s, col_s, shape_s = sparsify_matrix(M, row, col, shape, threshold)
        Ms_result = sp.coo_matrix((data_s, (row_s, col_s)), shape=(shape_s, shape_s))
        Ms_result = Ms_result.toarray()

        M_expected = np.array(
             [[ -2.0 ,  1.0 ,  0 , 0  , 0  , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0  , 0 , 0],
          [  1.0 , -2.0 ,  1.0 , 0  , 0  , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0  , 0 , 0],
          [  0.0 ,  0.6 , -2.0 , 0.6  , 0  , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0  , 0 , 0],
          [  0.0 ,  0.0 ,  1.0 , -2.0 ,  1.0 , 0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 1.0  , -1., 0.0 , 0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  ,-1.0 , 1.0  , 0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 1.0 , -2.0 , 1.0  , 0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  1.0 , -2 , 1.0  , 0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  1.0 ,-2.0  , 1.0  , 0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 1.0  , -2.0 , 1.0  , 0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 1.0  , -2.0 , 1.0 ,  0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 1.0  , -2.0,  1.0 ,  0 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 1.0 , -2.0 ,  1 ,  0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 0.0 ,  1.0 , -2.0 ,  1.0 , 0],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 0.0 ,  0.0 ,  1.0 , -2.0 , 1],
          [  0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 , 0.0  , 0.0  , 0.0  , 0.0 ,  0.0 ,  0.0 ,  1.0 ,-2.0]])

        for i in range(M_expected.shape[0]):
            np.testing.assert_equal(M_expected[i, :], Ms_result[i, :])


        M_full = np.array(
            [[-10., 1., 2., 3., 5.],
             [5., -26. ,6, 7., 8.],
             [9., 10., -42, 11., 12.],
             [13., 14., 15., -58., 16. ], 
             [17., 18., 19., 20.,-74.]])

        Ms = sp.coo_matrix(M_full)
        M = Ms.data

        col = Ms.col.astype(np.int_)

        row = Ms.row.astype(np.int_)

        shape = Ms.shape[0]
        threshold = np.array([10., 10., 10., 10., 10.])

        data_s, row_s, col_s, shape_s = sparsify_matrix(M, row, col, shape, threshold)

        Ms_result = sp.coo_matrix((data_s, (row_s, col_s)), shape=(shape_s, shape_s))
        Ms_result = Ms_result.toarray()


        Ms_expected =  np.array(
            [[-7., 0., 0., 3., 5.],
             [0., -21., 6, 7., 8.],
             [0., 10., -33, 11., 12.],
             [13., 14., 15., -58., 16.],
             [17., 18., 19., 20., -74.]])

        for i in range(Ms_expected.shape[0]):
            np.testing.assert_equal(Ms_expected[i, :], Ms_result[i, :])


if __name__ == '__main__':
    # unittest.main()
    suite = unittest.TestLoader().loadTestsFromTestCase(SparsifyTest)
    unittest.TextTestRunner(verbosity=2).run(suite)