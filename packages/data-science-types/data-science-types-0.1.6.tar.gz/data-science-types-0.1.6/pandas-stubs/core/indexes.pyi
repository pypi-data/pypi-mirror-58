from typing import List, Iterator, Type, Generic, TypeVar, Iterable, overload, Tuple
import numpy as _np

from .series import Series

_T = TypeVar("_T", str, int)

class Index(Generic[_T]):
    # magic methods
    def __init__(self, data: Iterable[_T]): ...
    def __eq__(self, other: object) -> Series: ...  # type: ignore
    @overload
    def __getitem__(self, idx: int) -> _T: ...
    @overload
    def __getitem__(self, idx: Tuple[_np.ndarray[_np.int64], ...]) -> _T: ...
    def __iter__(self) -> Iterator: ...
    #
    # properties
    @property
    def names(self) -> List[str]: ...
    @property
    def values(self) -> _np.ndarray: ...
    #
    # methods
    def astype(self, dtype: Type) -> Index: ...
    def get_level_values(self, level: str) -> Index: ...
    def to_frame(self) -> DataFrame: ...
    def tolist(self) -> List[_T]: ...
