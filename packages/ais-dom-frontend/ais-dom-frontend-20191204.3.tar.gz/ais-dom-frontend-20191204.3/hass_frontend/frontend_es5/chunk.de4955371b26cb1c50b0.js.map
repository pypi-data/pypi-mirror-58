{"version":3,"sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/panels/config/ais_dom/ha-config-ais-dom-config-update.js"],"names":["MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","_MwcSwitch2","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","F","d","kind","decorators","query","key","value","_get","prototype","style","setProperty","classList","toggle","Boolean","_slot","assignedNodes","static","css","_templateObject","HaConfigAisDomControl","PolymerElement","html","hass","Object","isWide","showAdvanced","aisVersionInfo","type","String","computed","aisAutoUpdateInfo","aisAutoUpdateIcon","aisAutoUpdatFullInfo","aisButtonVersionCheckUpgrade","aisUpdateSystemData","say","autoUpdateMode","versionInfo","states","versionInfoAttr","attributes","push","name","update_check_time","icon","getVersionName","update_status","getVersionIcon","dom_app_current_version","new_value","dom_app_newest_version","reinstall_dom_app","android_app_current_version","android_app_newest_version","reinstall_android_app","linux_apt_current_version","linux_apt_newest_version","reinstall_linux_apt","state","status","retS","attr","callService","entity_id","define"],"mappings":"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","file":"chunk.de4955371b26cb1c50b0.js","sourcesContent":["import { customElement, CSSResult, css, query } from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\nimport { Constructor } from \"../types\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-navigation\";\nimport \"../../../components/ha-switch\";\n\n/*\n *\n */\nclass HaConfigAisDomControl extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex ha-style\">\n        .content {\n          padding-bottom: 32px;\n        }\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        table {\n          width: 100%;\n        }\n\n        td:first-child {\n          width: 33%;\n        }\n      </style>\n\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div class$=\"[[computeClasses(isWide)]]\">\n          <ha-config-section is-wide=\"[[isWide]]\">\n            <span slot=\"header\">Oprogramowanie bramki</span>\n            <span slot=\"introduction\"\n              >Możesz zaktualizować system do najnowszej wersji i\n              zsynchronizować bramkę z Portalem Integratora</span\n            >\n            <ha-card header=\"Wersja systemu Asystent domowy\">\n              <div class=\"card-content\">\n                [[aisVersionInfo]]\n                <div>\n                  <div style=\"margin-top:30px;\" id=\"ha-switch-id\">\n                    <ha-switch\n                      checked=\"{{autoUpdateMode}}\"\n                      on-change=\"changeAutoUpdateMode\"\n                      style=\"position: absolute; right: 20px;\"\n                    ></ha-switch\n                    ><span\n                      ><h3>\n                        Autoaktualizacja\n                        <iron-icon icon=\"[[aisAutoUpdateIcon]]\"></iron-icon></h3\n                    ></span>\n                  </div>\n                </div>\n\n                <div style=\"display: inline-block;\">\n                  <div>\n                    [[aisAutoUpdateInfo]]\n                  </div>\n                  <div style=\"margin-top: 15px;\">\n                    Aktualizacje dostarczają najnowsze funkcjonalności oraz\n                    poprawki zapewniające bezpieczeństwo i stabilność działania\n                    systemu.\n                    <table style=\"margin-top: 10px;\">\n                      <template\n                        is=\"dom-repeat\"\n                        items=\"[[aisAutoUpdatFullInfo]]\"\n                      >\n                        <tr>\n                          <td>[[item.name]]</td>\n                          <td>[[item.value]]</td>\n                          <td>[[item.new_value]]</td>\n                          <td><iron-icon icon=\"[[item.icon]]\"></iron-icon></td>\n                        </tr>\n                      </template>\n                    </table>\n                  </div>\n                </div>\n                <div class=\"center-container\">\n                  <ha-call-service-button\n                    class=\"warning\"\n                    hass=\"[[hass]]\"\n                    domain=\"ais_updater\"\n                    service=\"execute_upgrade\"\n                    service-data=\"[[aisUpdateSystemData]]\"\n                    >[[aisButtonVersionCheckUpgrade]]\n                  </ha-call-service-button>\n                </div>\n              </div>\n            </ha-card>\n\n            <ha-card header=\"Synchronizacja z Portalem Integratora\">\n              <div class=\"card-content\">\n                Jeśli ostatnio wprowadzałeś zmiany w Portalu Integratora, takie\n                jak dodanie nowych typów audio czy też dostęp do zewnętrznych\n                serwisów, to przyciskiem poniżej możesz uruchomić natychmiastowe\n                pobranie tych zmian na bramkę bez czekania na automatyczną\n                synchronizację.\n                <div class=\"center-container\">\n                  <ha-call-service-button\n                    class=\"warning\"\n                    hass=\"[[hass]]\"\n                    domain=\"script\"\n                    service=\"ais_cloud_sync\"\n                    >Synchronizuj z Portalem Integratora\n                  </ha-call-service-button>\n                </div>\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      isWide: Boolean,\n      showAdvanced: Boolean,\n      aisVersionInfo: {\n        type: String,\n        computed: \"_computeAisVersionInfo(hass)\",\n      },\n\n      aisAutoUpdateInfo: { type: String },\n      aisAutoUpdateIcon: { type: String },\n      aisAutoUpdatFullInfo: {\n        type: Array,\n        value: [],\n      },\n      aisButtonVersionCheckUpgrade: {\n        type: String,\n        computed: \"_computeAisButtonVersionCheckUpgrade(hass)\",\n      },\n      aisUpdateSystemData: {\n        type: Object,\n        value: { say: true },\n      },\n      autoUpdateMode: {\n        type: Boolean,\n        computed: \"_computeAutoUpdateMode(hass)\",\n      },\n    };\n  }\n\n  computeClasses(isWide) {\n    return isWide ? \"content\" : \"content narrow\";\n  }\n\n  _computeAisVersionInfo(hass) {\n    var versionInfo = hass.states[\"sensor.version_info\"];\n    var versionInfoAttr = versionInfo.attributes;\n    this.aisAutoUpdatFullInfo = [];\n\n    if (\"update_check_time\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Sprawdzono o\",\n        value: versionInfoAttr.update_check_time,\n        icon: \"\",\n      });\n    }\n\n    if (\"update_status\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Status\",\n        value: this.getVersionName(versionInfoAttr.update_status),\n        icon: this.getVersionIcon(versionInfoAttr.update_status),\n      });\n    }\n\n    if (\"dom_app_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Asystent domowy\",\n        value: versionInfoAttr.dom_app_current_version,\n        new_value: versionInfoAttr.dom_app_newest_version,\n        icon: versionInfoAttr.reinstall_dom_app ? \"hass:alert\" : \"hass:check\",\n      });\n    }\n    if (\"android_app_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Android\",\n        value: versionInfoAttr.android_app_current_version,\n        new_value: versionInfoAttr.android_app_newest_version,\n        icon: versionInfoAttr.reinstall_android_app\n          ? \"hass:alert\"\n          : \"hass:check\",\n      });\n    }\n    if (\"linux_apt_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Linux\",\n        value: versionInfoAttr.linux_apt_current_version,\n        new_value: versionInfoAttr.linux_apt_newest_version,\n        icon: versionInfoAttr.reinstall_linux_apt ? \"hass:alert\" : \"hass:check\",\n      });\n    }\n\n    return versionInfo.state;\n  }\n\n  getVersionName(status) {\n    var retS = status;\n    if (status === \"checking\") {\n      retS = \"Sprawdzanie\";\n    } else if (status === \"outdated\") {\n      retS = \"Nieaktualny\";\n    } else if (status === \"downloading\") {\n      retS = \"Pobieranie\";\n    } else if (status === \"installing\") {\n      retS = \"Instalowanie\";\n    } else if (status === \"updated\") {\n      retS = \"Aktualny\";\n    } else if (status === \"unknown\") {\n      retS = \"Nieznany\";\n    } else if (status === \"restart\") {\n      retS = \"Restartowanie\";\n    }\n    return retS;\n  }\n\n  getVersionIcon(status) {\n    var retS = \"\";\n    if (status === \"checking\") {\n      retS = \"mdi:cloud-sync\";\n    } else if (status === \"outdated\") {\n      retS = \"\";\n    } else if (status === \"downloading\") {\n      retS = \"mdi:progress-download\";\n    } else if (status === \"installing\") {\n      retS = \"mdi:progress-wrench\";\n    } else if (status === \"updated\") {\n      retS = \"mdi:emoticon-happy-outline\";\n    } else if (status === \"unknown\") {\n      retS = \"mdi:help-circle-outline\";\n    } else if (status === \"restart\") {\n      retS = \"mdi:restart-alert\";\n    }\n    return retS;\n  }\n\n  _computeAisButtonVersionCheckUpgrade(hass) {\n    var attr = hass.states[\"sensor.version_info\"].attributes;\n    if (\n      attr.reinstall_dom_app ||\n      attr.reinstall_android_app ||\n      attr.reinstall_linux_apt\n    ) {\n      if (attr.update_status === \"outdated\") {\n        return \"Zainstaluj teraz aktualizację\";\n      }\n      if (attr.update_status === \"unknown\") {\n        return \"Spróbuj ponownie\";\n      }\n      return \"Aktualizacja -> \" + this.getVersionName(attr.update_status);\n    }\n    return \"Sprawdz dostępność aktualizacji\";\n  }\n\n  _computeAutoUpdateMode(hass) {\n    if (hass.states[\"input_boolean.ais_auto_update\"].state === \"off\") {\n      this.aisAutoUpdateIcon = \"mdi:sync-off\";\n      this.aisAutoUpdateInfo =\n        \"Możesz aktualizować system samodzielnie w dogodnym dla Ciebie czasie lub włączyć aktualizację automatyczną.\";\n      return false;\n    }\n    this.aisAutoUpdateIcon = \"mdi:sync\";\n    this.aisAutoUpdateInfo =\n      \"Codziennie sprawdzimy i automatycznie zainstalujemy dostępne aktualizacje.\";\n    return true;\n  }\n\n  changeAutoUpdateMode() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_auto_update\",\n    });\n  }\n}\n\ncustomElements.define(\"ha-config-ais-dom-config-update\", HaConfigAisDomControl);\n"],"sourceRoot":""}