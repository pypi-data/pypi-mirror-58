# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class ModelOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'convert_to_meters': 'float',
        'face_count': 'int',
        'created_at': 'datetime',
        'url': 'str',
        'faces_url': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'convert_to_meters': 'convert_to_meters',
        'face_count': 'face_count',
        'created_at': 'created_at',
        'url': 'url',
        'faces_url': 'faces_url'
    }

    def __init__(self, type=None, id=None, name=None, convert_to_meters=1, face_count=None, created_at=None, url=None, faces_url=None, local_vars_configuration=None):  # noqa: E501
        """ModelOut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._id = None
        self._name = None
        self._convert_to_meters = None
        self._face_count = None
        self._created_at = None
        self._url = None
        self._faces_url = None
        self.discriminator = None

        self.type = type
        if id is not None:
            self.id = id
        self.name = name
        if convert_to_meters is not None:
            self.convert_to_meters = convert_to_meters
        self.face_count = face_count
        self.created_at = created_at
        self.url = url
        self.faces_url = faces_url

    @property
    def type(self):
        """Gets the type of this ModelOut.  # noqa: E501


        :return: The type of this ModelOut.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelOut.


        :param type: The type of this ModelOut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Model"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this ModelOut.  # noqa: E501

        Unique UUID value.  # noqa: E501

        :return: The id of this ModelOut.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelOut.

        Unique UUID value.  # noqa: E501

        :param id: The id of this ModelOut.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelOut.  # noqa: E501

        Model name  # noqa: E501

        :return: The name of this ModelOut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelOut.

        Model name  # noqa: E501

        :param name: The name of this ModelOut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[.A-Za-z0-9_-]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[.A-Za-z0-9_-]*$/`")  # noqa: E501

        self._name = name

    @property
    def convert_to_meters(self):
        """Gets the convert_to_meters of this ModelOut.  # noqa: E501

        Value to use to convert the current model into meters  # noqa: E501

        :return: The convert_to_meters of this ModelOut.  # noqa: E501
        :rtype: float
        """
        return self._convert_to_meters

    @convert_to_meters.setter
    def convert_to_meters(self, convert_to_meters):
        """Sets the convert_to_meters of this ModelOut.

        Value to use to convert the current model into meters  # noqa: E501

        :param convert_to_meters: The convert_to_meters of this ModelOut.  # noqa: E501
        :type: float
        """

        self._convert_to_meters = convert_to_meters

    @property
    def face_count(self):
        """Gets the face_count of this ModelOut.  # noqa: E501

        Number of faces attached to this model  # noqa: E501

        :return: The face_count of this ModelOut.  # noqa: E501
        :rtype: int
        """
        return self._face_count

    @face_count.setter
    def face_count(self, face_count):
        """Sets the face_count of this ModelOut.

        Number of faces attached to this model  # noqa: E501

        :param face_count: The face_count of this ModelOut.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and face_count is None:  # noqa: E501
            raise ValueError("Invalid value for `face_count`, must not be `None`")  # noqa: E501

        self._face_count = face_count

    @property
    def created_at(self):
        """Gets the created_at of this ModelOut.  # noqa: E501

        Model creation time.  # noqa: E501

        :return: The created_at of this ModelOut.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelOut.

        Model creation time.  # noqa: E501

        :param created_at: The created_at of this ModelOut.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def url(self):
        """Gets the url of this ModelOut.  # noqa: E501

        URL to the model  # noqa: E501

        :return: The url of this ModelOut.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ModelOut.

        URL to the model  # noqa: E501

        :param url: The url of this ModelOut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 65536):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `65536`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def faces_url(self):
        """Gets the faces_url of this ModelOut.  # noqa: E501

        URL to get faces from this model.  # noqa: E501

        :return: The faces_url of this ModelOut.  # noqa: E501
        :rtype: str
        """
        return self._faces_url

    @faces_url.setter
    def faces_url(self, faces_url):
        """Sets the faces_url of this ModelOut.

        URL to get faces from this model.  # noqa: E501

        :param faces_url: The faces_url of this ModelOut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and faces_url is None:  # noqa: E501
            raise ValueError("Invalid value for `faces_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                faces_url is not None and len(faces_url) > 65536):
            raise ValueError("Invalid value for `faces_url`, length must be less than or equal to `65536`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                faces_url is not None and len(faces_url) < 1):
            raise ValueError("Invalid value for `faces_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._faces_url = faces_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelOut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelOut):
            return True

        return self.to_dict() != other.to_dict()
