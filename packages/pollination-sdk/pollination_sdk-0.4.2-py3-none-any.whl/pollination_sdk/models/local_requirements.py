# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class LocalRequirements(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'platform': 'list[str]',
        'language': 'list[Language]',
        'app': 'list[App]',
        'pip': 'list[Package]',
        'npm': 'list[Package]'
    }

    attribute_map = {
        'type': 'type',
        'platform': 'platform',
        'language': 'language',
        'app': 'app',
        'pip': 'pip',
        'npm': 'npm'
    }

    def __init__(self, type='operator', platform=["linux","windows","mac"], language=None, app=None, pip=None, npm=None, local_vars_configuration=None):  # noqa: E501
        """LocalRequirements - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._platform = None
        self._language = None
        self._app = None
        self._pip = None
        self._npm = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if platform is not None:
            self.platform = platform
        if language is not None:
            self.language = language
        if app is not None:
            self.app = app
        if pip is not None:
            self.pip = pip
        if npm is not None:
            self.npm = npm

    @property
    def type(self):
        """Gets the type of this LocalRequirements.  # noqa: E501


        :return: The type of this LocalRequirements.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LocalRequirements.


        :param type: The type of this LocalRequirements.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                type is not None and not re.search(r'^operator$', type)):  # noqa: E501
            raise ValueError(r"Invalid value for `type`, must be a follow pattern or equal to `/^operator$/`")  # noqa: E501

        self._type = type

    @property
    def platform(self):
        """Gets the platform of this LocalRequirements.  # noqa: E501

        List of valid platforms that operator can execute the commands.  # noqa: E501

        :return: The platform of this LocalRequirements.  # noqa: E501
        :rtype: list[str]
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this LocalRequirements.

        List of valid platforms that operator can execute the commands.  # noqa: E501

        :param platform: The platform of this LocalRequirements.  # noqa: E501
        :type: list[str]
        """

        self._platform = platform

    @property
    def language(self):
        """Gets the language of this LocalRequirements.  # noqa: E501

        List of required programming languages to execute the commands with an operator.  # noqa: E501

        :return: The language of this LocalRequirements.  # noqa: E501
        :rtype: list[Language]
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LocalRequirements.

        List of required programming languages to execute the commands with an operator.  # noqa: E501

        :param language: The language of this LocalRequirements.  # noqa: E501
        :type: list[Language]
        """

        self._language = language

    @property
    def app(self):
        """Gets the app of this LocalRequirements.  # noqa: E501

        List of applications that are required for operator to execute the commands locally. You must follow pip requirement specifiers: https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers For instance use rtrace>=5.2 for radiance 5.2 or newer. Command will run  rtrace --version and tries to parse version from command.  # noqa: E501

        :return: The app of this LocalRequirements.  # noqa: E501
        :rtype: list[App]
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this LocalRequirements.

        List of applications that are required for operator to execute the commands locally. You must follow pip requirement specifiers: https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers For instance use rtrace>=5.2 for radiance 5.2 or newer. Command will run  rtrace --version and tries to parse version from command.  # noqa: E501

        :param app: The app of this LocalRequirements.  # noqa: E501
        :type: list[App]
        """

        self._app = app

    @property
    def pip(self):
        """Gets the pip of this LocalRequirements.  # noqa: E501

        List of Python packages that are required for operator to execute the commands locally. You must follow pip requirement specifiers: https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers  # noqa: E501

        :return: The pip of this LocalRequirements.  # noqa: E501
        :rtype: list[Package]
        """
        return self._pip

    @pip.setter
    def pip(self, pip):
        """Sets the pip of this LocalRequirements.

        List of Python packages that are required for operator to execute the commands locally. You must follow pip requirement specifiers: https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers  # noqa: E501

        :param pip: The pip of this LocalRequirements.  # noqa: E501
        :type: list[Package]
        """

        self._pip = pip

    @property
    def npm(self):
        """Gets the npm of this LocalRequirements.  # noqa: E501

        List of npm packages that are required for operator to execute the commands locally. You must follow npm install requirements: https://docs.npmjs.com/cli/install#synopsis  # noqa: E501

        :return: The npm of this LocalRequirements.  # noqa: E501
        :rtype: list[Package]
        """
        return self._npm

    @npm.setter
    def npm(self, npm):
        """Sets the npm of this LocalRequirements.

        List of npm packages that are required for operator to execute the commands locally. You must follow npm install requirements: https://docs.npmjs.com/cli/install#synopsis  # noqa: E501

        :param npm: The npm of this LocalRequirements.  # noqa: E501
        :type: list[Package]
        """

        self._npm = npm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalRequirements):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalRequirements):
            return True

        return self.to_dict() != other.to_dict()
