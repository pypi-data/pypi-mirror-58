# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class LoopControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'loop_var': 'str',
        'pause': 'int',
        'iterable_type': 'str',
        'parallel': 'bool'
    }

    attribute_map = {
        'loop_var': 'loop_var',
        'pause': 'pause',
        'iterable_type': 'iterable_type',
        'parallel': 'parallel'
    }

    def __init__(self, loop_var='item', pause=None, iterable_type='list', parallel=True, local_vars_configuration=None):  # noqa: E501
        """LoopControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._loop_var = None
        self._pause = None
        self._iterable_type = None
        self._parallel = None
        self.discriminator = None

        if loop_var is not None:
            self.loop_var = loop_var
        if pause is not None:
            self.pause = pause
        if iterable_type is not None:
            self.iterable_type = iterable_type
        if parallel is not None:
            self.parallel = parallel

    @property
    def loop_var(self):
        """Gets the loop_var of this LoopControl.  # noqa: E501

        Name of variable which will be referenced in task.  # noqa: E501

        :return: The loop_var of this LoopControl.  # noqa: E501
        :rtype: str
        """
        return self._loop_var

    @loop_var.setter
    def loop_var(self, loop_var):
        """Sets the loop_var of this LoopControl.

        Name of variable which will be referenced in task.  # noqa: E501

        :param loop_var: The loop_var of this LoopControl.  # noqa: E501
        :type: str
        """

        self._loop_var = loop_var

    @property
    def pause(self):
        """Gets the pause of this LoopControl.  # noqa: E501

        Number of seconds to pause between the loops.  # noqa: E501

        :return: The pause of this LoopControl.  # noqa: E501
        :rtype: int
        """
        return self._pause

    @pause.setter
    def pause(self, pause):
        """Sets the pause of this LoopControl.

        Number of seconds to pause between the loops.  # noqa: E501

        :param pause: The pause of this LoopControl.  # noqa: E501
        :type: int
        """

        self._pause = pause

    @property
    def iterable_type(self):
        """Gets the iterable_type of this LoopControl.  # noqa: E501

        Iterable object type: list | object  # noqa: E501

        :return: The iterable_type of this LoopControl.  # noqa: E501
        :rtype: str
        """
        return self._iterable_type

    @iterable_type.setter
    def iterable_type(self, iterable_type):
        """Sets the iterable_type of this LoopControl.

        Iterable object type: list | object  # noqa: E501

        :param iterable_type: The iterable_type of this LoopControl.  # noqa: E501
        :type: str
        """

        self._iterable_type = iterable_type

    @property
    def parallel(self):
        """Gets the parallel of this LoopControl.  # noqa: E501

        A switch to indicate if loops should be executed in serial or parallel.  # noqa: E501

        :return: The parallel of this LoopControl.  # noqa: E501
        :rtype: bool
        """
        return self._parallel

    @parallel.setter
    def parallel(self, parallel):
        """Sets the parallel of this LoopControl.

        A switch to indicate if loops should be executed in serial or parallel.  # noqa: E501

        :param parallel: The parallel of this LoopControl.  # noqa: E501
        :type: bool
        """

        self._parallel = parallel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoopControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoopControl):
            return True

        return self.to_dict() != other.to_dict()
