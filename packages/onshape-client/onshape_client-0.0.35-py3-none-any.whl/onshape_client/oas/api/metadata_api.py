# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.oas.api_client import ApiClient
from onshape_client.oas.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MetadataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_veop_standard_content_metadata(self, did, vid, eid, otype, oid, pid, **kwargs):  # noqa: E501
        """get_veop_standard_content_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_veop_standard_content_metadata(did, vid, eid, otype, oid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str vid: (required)
        :param str eid: (required)
        :param str otype: (required)
        :param str oid: (required)
        :param str pid: (required)
        :param str configuration:
        :param str link_document_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_veop_standard_content_metadata_with_http_info(did, vid, eid, otype, oid, pid, **kwargs)  # noqa: E501

    def get_veop_standard_content_metadata_with_http_info(self, did, vid, eid, otype, oid, pid, **kwargs):  # noqa: E501
        """get_veop_standard_content_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_veop_standard_content_metadata_with_http_info(did, vid, eid, otype, oid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str vid: (required)
        :param str eid: (required)
        :param str otype: (required)
        :param str oid: (required)
        :param str pid: (required)
        :param str configuration:
        :param str link_document_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'vid', 'eid', 'otype', 'oid', 'pid', 'configuration', 'link_document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_veop_standard_content_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_veop_standard_content_metadata`")  # noqa: E501
        # verify the required parameter 'vid' is set
        if self.api_client.client_side_validation and ('vid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vid` when calling `get_veop_standard_content_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `get_veop_standard_content_metadata`")  # noqa: E501
        # verify the required parameter 'otype' is set
        if self.api_client.client_side_validation and ('otype' not in local_var_params or  # noqa: E501
                                                        local_var_params['otype'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `otype` when calling `get_veop_standard_content_metadata`")  # noqa: E501
        # verify the required parameter 'oid' is set
        if self.api_client.client_side_validation and ('oid' not in local_var_params or  # noqa: E501
                                                        local_var_params['oid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `oid` when calling `get_veop_standard_content_metadata`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if self.api_client.client_side_validation and ('pid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pid` when calling `get_veop_standard_content_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'vid' in local_var_params:
            path_params['vid'] = local_var_params['vid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501
        if 'otype' in local_var_params:
            path_params['otype'] = local_var_params['otype']  # noqa: E501
        if 'oid' in local_var_params:
            path_params['oid'] = local_var_params['oid']  # noqa: E501
        if 'pid' in local_var_params:
            path_params['pid'] = local_var_params['pid']  # noqa: E501

        query_params = []
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/p/{pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wmve_ps_metadata(self, did, wvm, wvmid, eid, **kwargs):  # noqa: E501
        """get_wmve_ps_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmve_ps_metadata(did, wvm, wvmid, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str configuration:
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_wmve_ps_metadata_with_http_info(did, wvm, wvmid, eid, **kwargs)  # noqa: E501

    def get_wmve_ps_metadata_with_http_info(self, did, wvm, wvmid, eid, **kwargs):  # noqa: E501
        """get_wmve_ps_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmve_ps_metadata_with_http_info(did, wvm, wvmid, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str configuration:
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wvm', 'wvmid', 'eid', 'configuration', 'link_document_id', 'infer_metadata_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wmve_ps_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_wmve_ps_metadata`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if self.api_client.client_side_validation and ('wvm' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvm` when calling `get_wmve_ps_metadata`")  # noqa: E501
        # verify the required parameter 'wvmid' is set
        if self.api_client.client_side_validation and ('wvmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvmid` when calling `get_wmve_ps_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `get_wmve_ps_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wvm' in local_var_params:
            path_params['wvm'] = local_var_params['wvm']  # noqa: E501
        if 'wvmid' in local_var_params:
            path_params['wvmid'] = local_var_params['wvmid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501

        query_params = []
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501
        if 'infer_metadata_owner' in local_var_params and local_var_params['infer_metadata_owner'] is not None:  # noqa: E501
            query_params.append(('inferMetadataOwner', local_var_params['infer_metadata_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wmvep_metadata(self, did, wvm, wvmid, eid, pid, **kwargs):  # noqa: E501
        """get_wmvep_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmvep_metadata(did, wvm, wvmid, eid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str pid: (required)
        :param str configuration:
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_wmvep_metadata_with_http_info(did, wvm, wvmid, eid, pid, **kwargs)  # noqa: E501

    def get_wmvep_metadata_with_http_info(self, did, wvm, wvmid, eid, pid, **kwargs):  # noqa: E501
        """get_wmvep_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wmvep_metadata_with_http_info(did, wvm, wvmid, eid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str pid: (required)
        :param str configuration:
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wvm', 'wvmid', 'eid', 'pid', 'configuration', 'link_document_id', 'infer_metadata_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wmvep_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_wmvep_metadata`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if self.api_client.client_side_validation and ('wvm' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvm` when calling `get_wmvep_metadata`")  # noqa: E501
        # verify the required parameter 'wvmid' is set
        if self.api_client.client_side_validation and ('wvmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvmid` when calling `get_wmvep_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `get_wmvep_metadata`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if self.api_client.client_side_validation and ('pid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pid` when calling `get_wmvep_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wvm' in local_var_params:
            path_params['wvm'] = local_var_params['wvm']  # noqa: E501
        if 'wvmid' in local_var_params:
            path_params['wvmid'] = local_var_params['wvmid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501
        if 'pid' in local_var_params:
            path_params['pid'] = local_var_params['pid']  # noqa: E501

        query_params = []
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501
        if 'infer_metadata_owner' in local_var_params and local_var_params['infer_metadata_owner'] is not None:  # noqa: E501
            query_params.append(('inferMetadataOwner', local_var_params['infer_metadata_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p/{pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wv_es_metadata(self, did, wv, wvid, **kwargs):  # noqa: E501
        """get_wv_es_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wv_es_metadata(did, wv, wvid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_wv_es_metadata_with_http_info(did, wv, wvid, **kwargs)  # noqa: E501

    def get_wv_es_metadata_with_http_info(self, did, wv, wvid, **kwargs):  # noqa: E501
        """get_wv_es_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wv_es_metadata_with_http_info(did, wv, wvid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wv', 'wvid', 'link_document_id', 'infer_metadata_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wv_es_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_wv_es_metadata`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if self.api_client.client_side_validation and ('wv' not in local_var_params or  # noqa: E501
                                                        local_var_params['wv'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wv` when calling `get_wv_es_metadata`")  # noqa: E501
        # verify the required parameter 'wvid' is set
        if self.api_client.client_side_validation and ('wvid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvid` when calling `get_wv_es_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wv' in local_var_params:
            path_params['wv'] = local_var_params['wv']  # noqa: E501
        if 'wvid' in local_var_params:
            path_params['wvid'] = local_var_params['wvid']  # noqa: E501

        query_params = []
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501
        if 'infer_metadata_owner' in local_var_params and local_var_params['infer_metadata_owner'] is not None:  # noqa: E501
            query_params.append(('inferMetadataOwner', local_var_params['infer_metadata_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wv}/{wvid}/e', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wv_metadata(self, did, wv, wvid, **kwargs):  # noqa: E501
        """get_wv_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wv_metadata(did, wv, wvid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_wv_metadata_with_http_info(did, wv, wvid, **kwargs)  # noqa: E501

    def get_wv_metadata_with_http_info(self, did, wv, wvid, **kwargs):  # noqa: E501
        """get_wv_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wv_metadata_with_http_info(did, wv, wvid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wv', 'wvid', 'link_document_id', 'infer_metadata_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wv_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_wv_metadata`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if self.api_client.client_side_validation and ('wv' not in local_var_params or  # noqa: E501
                                                        local_var_params['wv'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wv` when calling `get_wv_metadata`")  # noqa: E501
        # verify the required parameter 'wvid' is set
        if self.api_client.client_side_validation and ('wvid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvid` when calling `get_wv_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wv' in local_var_params:
            path_params['wv'] = local_var_params['wv']  # noqa: E501
        if 'wvid' in local_var_params:
            path_params['wvid'] = local_var_params['wvid']  # noqa: E501

        query_params = []
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501
        if 'infer_metadata_owner' in local_var_params and local_var_params['infer_metadata_owner'] is not None:  # noqa: E501
            query_params.append(('inferMetadataOwner', local_var_params['infer_metadata_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wv}/{wvid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wve_metadata(self, did, wv, wvid, eid, **kwargs):  # noqa: E501
        """get_wve_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wve_metadata(did, wv, wvid, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str eid: (required)
        :param str configuration:
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_wve_metadata_with_http_info(did, wv, wvid, eid, **kwargs)  # noqa: E501

    def get_wve_metadata_with_http_info(self, did, wv, wvid, eid, **kwargs):  # noqa: E501
        """get_wve_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wve_metadata_with_http_info(did, wv, wvid, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str eid: (required)
        :param str configuration:
        :param str link_document_id:
        :param bool infer_metadata_owner:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wv', 'wvid', 'eid', 'configuration', 'link_document_id', 'infer_metadata_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wve_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_wve_metadata`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if self.api_client.client_side_validation and ('wv' not in local_var_params or  # noqa: E501
                                                        local_var_params['wv'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wv` when calling `get_wve_metadata`")  # noqa: E501
        # verify the required parameter 'wvid' is set
        if self.api_client.client_side_validation and ('wvid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvid` when calling `get_wve_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `get_wve_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wv' in local_var_params:
            path_params['wv'] = local_var_params['wv']  # noqa: E501
        if 'wvid' in local_var_params:
            path_params['wvid'] = local_var_params['wvid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501

        query_params = []
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501
        if 'infer_metadata_owner' in local_var_params and local_var_params['infer_metadata_owner'] is not None:  # noqa: E501
            query_params.append(('inferMetadataOwner', local_var_params['infer_metadata_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wv}/{wvid}/e/{eid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_veop_standard_content_part_metadata(self, did, vid, eid, otype, oid, pid, body, **kwargs):  # noqa: E501
        """update_veop_standard_content_part_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_veop_standard_content_part_metadata(did, vid, eid, otype, oid, pid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str vid: (required)
        :param str eid: (required)
        :param str otype: (required)
        :param str oid: (required)
        :param str pid: (required)
        :param str body: (required)
        :param str link_document_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_veop_standard_content_part_metadata_with_http_info(did, vid, eid, otype, oid, pid, body, **kwargs)  # noqa: E501

    def update_veop_standard_content_part_metadata_with_http_info(self, did, vid, eid, otype, oid, pid, body, **kwargs):  # noqa: E501
        """update_veop_standard_content_part_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_veop_standard_content_part_metadata_with_http_info(did, vid, eid, otype, oid, pid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str vid: (required)
        :param str eid: (required)
        :param str otype: (required)
        :param str oid: (required)
        :param str pid: (required)
        :param str body: (required)
        :param str link_document_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'vid', 'eid', 'otype', 'oid', 'pid', 'body', 'link_document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_veop_standard_content_part_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `update_veop_standard_content_part_metadata`")  # noqa: E501
        # verify the required parameter 'vid' is set
        if self.api_client.client_side_validation and ('vid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vid` when calling `update_veop_standard_content_part_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `update_veop_standard_content_part_metadata`")  # noqa: E501
        # verify the required parameter 'otype' is set
        if self.api_client.client_side_validation and ('otype' not in local_var_params or  # noqa: E501
                                                        local_var_params['otype'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `otype` when calling `update_veop_standard_content_part_metadata`")  # noqa: E501
        # verify the required parameter 'oid' is set
        if self.api_client.client_side_validation and ('oid' not in local_var_params or  # noqa: E501
                                                        local_var_params['oid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `oid` when calling `update_veop_standard_content_part_metadata`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if self.api_client.client_side_validation and ('pid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pid` when calling `update_veop_standard_content_part_metadata`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `update_veop_standard_content_part_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'vid' in local_var_params:
            path_params['vid'] = local_var_params['vid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501
        if 'otype' in local_var_params:
            path_params['otype'] = local_var_params['otype']  # noqa: E501
        if 'oid' in local_var_params:
            path_params['oid'] = local_var_params['oid']  # noqa: E501
        if 'pid' in local_var_params:
            path_params['pid'] = local_var_params['pid']  # noqa: E501

        query_params = []
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/p/{pid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_wv_metadata(self, did, wv, wvid, body, **kwargs):  # noqa: E501
        """update_wv_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wv_metadata(did, wv, wvid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_wv_metadata_with_http_info(did, wv, wvid, body, **kwargs)  # noqa: E501

    def update_wv_metadata_with_http_info(self, did, wv, wvid, body, **kwargs):  # noqa: E501
        """update_wv_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wv_metadata_with_http_info(did, wv, wvid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wv', 'wvid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_wv_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `update_wv_metadata`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if self.api_client.client_side_validation and ('wv' not in local_var_params or  # noqa: E501
                                                        local_var_params['wv'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wv` when calling `update_wv_metadata`")  # noqa: E501
        # verify the required parameter 'wvid' is set
        if self.api_client.client_side_validation and ('wvid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvid` when calling `update_wv_metadata`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `update_wv_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wv' in local_var_params:
            path_params['wv'] = local_var_params['wv']  # noqa: E501
        if 'wvid' in local_var_params:
            path_params['wvid'] = local_var_params['wvid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wv}/{wvid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_wve_metadata(self, did, wv, wvid, eid, body, **kwargs):  # noqa: E501
        """update_wve_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wve_metadata(did, wv, wvid, eid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str eid: (required)
        :param str body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_wve_metadata_with_http_info(did, wv, wvid, eid, body, **kwargs)  # noqa: E501

    def update_wve_metadata_with_http_info(self, did, wv, wvid, eid, body, **kwargs):  # noqa: E501
        """update_wve_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wve_metadata_with_http_info(did, wv, wvid, eid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wv: (required)
        :param str wvid: (required)
        :param str eid: (required)
        :param str body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wv', 'wvid', 'eid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_wve_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `update_wve_metadata`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if self.api_client.client_side_validation and ('wv' not in local_var_params or  # noqa: E501
                                                        local_var_params['wv'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wv` when calling `update_wve_metadata`")  # noqa: E501
        # verify the required parameter 'wvid' is set
        if self.api_client.client_side_validation and ('wvid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvid` when calling `update_wve_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `update_wve_metadata`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `update_wve_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wv' in local_var_params:
            path_params['wv'] = local_var_params['wv']  # noqa: E501
        if 'wvid' in local_var_params:
            path_params['wvid'] = local_var_params['wvid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wv}/{wvid}/e/{eid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_wvep_metadata(self, did, wvm, wvmid, eid, pid, sub_resource, body, **kwargs):  # noqa: E501
        """update_wvep_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wvep_metadata(did, wvm, wvmid, eid, pid, sub_resource, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str pid: (required)
        :param str sub_resource: (required)
        :param str body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_wvep_metadata_with_http_info(did, wvm, wvmid, eid, pid, sub_resource, body, **kwargs)  # noqa: E501

    def update_wvep_metadata_with_http_info(self, did, wvm, wvmid, eid, pid, sub_resource, body, **kwargs):  # noqa: E501
        """update_wvep_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wvep_metadata_with_http_info(did, wvm, wvmid, eid, pid, sub_resource, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str pid: (required)
        :param str sub_resource: (required)
        :param str body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wvm', 'wvmid', 'eid', 'pid', 'sub_resource', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_wvep_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `update_wvep_metadata`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if self.api_client.client_side_validation and ('wvm' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvm` when calling `update_wvep_metadata`")  # noqa: E501
        # verify the required parameter 'wvmid' is set
        if self.api_client.client_side_validation and ('wvmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvmid` when calling `update_wvep_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `update_wvep_metadata`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if self.api_client.client_side_validation and ('pid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pid` when calling `update_wvep_metadata`")  # noqa: E501
        # verify the required parameter 'sub_resource' is set
        if self.api_client.client_side_validation and ('sub_resource' not in local_var_params or  # noqa: E501
                                                        local_var_params['sub_resource'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sub_resource` when calling `update_wvep_metadata`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `update_wvep_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wvm' in local_var_params:
            path_params['wvm'] = local_var_params['wvm']  # noqa: E501
        if 'wvmid' in local_var_params:
            path_params['wvmid'] = local_var_params['wvmid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501
        if 'pid' in local_var_params:
            path_params['pid'] = local_var_params['pid']  # noqa: E501
        if 'sub_resource' in local_var_params:
            path_params['subResource'] = local_var_params['sub_resource']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p/{pid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
