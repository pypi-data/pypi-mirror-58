# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTPExpressionFunctionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'BTPStatementBlock',
        'arguments': 'list[BTPArgumentDeclaration]',
        'space_after_function': 'BTPSpace',
        'precondition': 'BTPStatement',
        'space_after_arglist': 'BTPSpace',
        'space_in_empty_list': 'BTPSpace',
        'return_type': 'BTPTypeName'
    }

    attribute_map = {
        'body': 'body',
        'arguments': 'arguments',
        'space_after_function': 'spaceAfterFunction',
        'precondition': 'precondition',
        'space_after_arglist': 'spaceAfterArglist',
        'space_in_empty_list': 'spaceInEmptyList',
        'return_type': 'returnType'
    }

    def __init__(self, body=None, arguments=None, space_after_function=None, precondition=None, space_after_arglist=None, space_in_empty_list=None, return_type=None):  # noqa: E501
        """BTPExpressionFunctionAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._body = None
        self._arguments = None
        self._space_after_function = None
        self._precondition = None
        self._space_after_arglist = None
        self._space_in_empty_list = None
        self._return_type = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if arguments is not None:
            self.arguments = arguments
        if space_after_function is not None:
            self.space_after_function = space_after_function
        if precondition is not None:
            self.precondition = precondition
        if space_after_arglist is not None:
            self.space_after_arglist = space_after_arglist
        if space_in_empty_list is not None:
            self.space_in_empty_list = space_in_empty_list
        if return_type is not None:
            self.return_type = return_type

    @property
    def body(self):
        """Gets the body of this BTPExpressionFunctionAllOf.  # noqa: E501


        :return: The body of this BTPExpressionFunctionAllOf.  # noqa: E501
        :rtype: BTPStatementBlock
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this BTPExpressionFunctionAllOf.


        :param body: The body of this BTPExpressionFunctionAllOf.  # noqa: E501
        :type: BTPStatementBlock
        """

        self._body = body

    @property
    def arguments(self):
        """Gets the arguments of this BTPExpressionFunctionAllOf.  # noqa: E501


        :return: The arguments of this BTPExpressionFunctionAllOf.  # noqa: E501
        :rtype: list[BTPArgumentDeclaration]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this BTPExpressionFunctionAllOf.


        :param arguments: The arguments of this BTPExpressionFunctionAllOf.  # noqa: E501
        :type: list[BTPArgumentDeclaration]
        """

        self._arguments = arguments

    @property
    def space_after_function(self):
        """Gets the space_after_function of this BTPExpressionFunctionAllOf.  # noqa: E501


        :return: The space_after_function of this BTPExpressionFunctionAllOf.  # noqa: E501
        :rtype: BTPSpace
        """
        return self._space_after_function

    @space_after_function.setter
    def space_after_function(self, space_after_function):
        """Sets the space_after_function of this BTPExpressionFunctionAllOf.


        :param space_after_function: The space_after_function of this BTPExpressionFunctionAllOf.  # noqa: E501
        :type: BTPSpace
        """

        self._space_after_function = space_after_function

    @property
    def precondition(self):
        """Gets the precondition of this BTPExpressionFunctionAllOf.  # noqa: E501


        :return: The precondition of this BTPExpressionFunctionAllOf.  # noqa: E501
        :rtype: BTPStatement
        """
        return self._precondition

    @precondition.setter
    def precondition(self, precondition):
        """Sets the precondition of this BTPExpressionFunctionAllOf.


        :param precondition: The precondition of this BTPExpressionFunctionAllOf.  # noqa: E501
        :type: BTPStatement
        """

        self._precondition = precondition

    @property
    def space_after_arglist(self):
        """Gets the space_after_arglist of this BTPExpressionFunctionAllOf.  # noqa: E501


        :return: The space_after_arglist of this BTPExpressionFunctionAllOf.  # noqa: E501
        :rtype: BTPSpace
        """
        return self._space_after_arglist

    @space_after_arglist.setter
    def space_after_arglist(self, space_after_arglist):
        """Sets the space_after_arglist of this BTPExpressionFunctionAllOf.


        :param space_after_arglist: The space_after_arglist of this BTPExpressionFunctionAllOf.  # noqa: E501
        :type: BTPSpace
        """

        self._space_after_arglist = space_after_arglist

    @property
    def space_in_empty_list(self):
        """Gets the space_in_empty_list of this BTPExpressionFunctionAllOf.  # noqa: E501


        :return: The space_in_empty_list of this BTPExpressionFunctionAllOf.  # noqa: E501
        :rtype: BTPSpace
        """
        return self._space_in_empty_list

    @space_in_empty_list.setter
    def space_in_empty_list(self, space_in_empty_list):
        """Sets the space_in_empty_list of this BTPExpressionFunctionAllOf.


        :param space_in_empty_list: The space_in_empty_list of this BTPExpressionFunctionAllOf.  # noqa: E501
        :type: BTPSpace
        """

        self._space_in_empty_list = space_in_empty_list

    @property
    def return_type(self):
        """Gets the return_type of this BTPExpressionFunctionAllOf.  # noqa: E501


        :return: The return_type of this BTPExpressionFunctionAllOf.  # noqa: E501
        :rtype: BTPTypeName
        """
        return self._return_type

    @return_type.setter
    def return_type(self, return_type):
        """Sets the return_type of this BTPExpressionFunctionAllOf.


        :param return_type: The return_type of this BTPExpressionFunctionAllOf.  # noqa: E501
        :type: BTPTypeName
        """

        self._return_type = return_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTPExpressionFunctionAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
