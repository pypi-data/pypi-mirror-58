# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTPStatementIfAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'condition': 'BTPExpression',
        'space_after_if': 'BTPSpace',
        'then_body': 'BTPStatement',
        'else_body': 'BTPStatement'
    }

    attribute_map = {
        'condition': 'condition',
        'space_after_if': 'spaceAfterIf',
        'then_body': 'thenBody',
        'else_body': 'elseBody'
    }

    def __init__(self, condition=None, space_after_if=None, then_body=None, else_body=None):  # noqa: E501
        """BTPStatementIfAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._condition = None
        self._space_after_if = None
        self._then_body = None
        self._else_body = None
        self.discriminator = None

        if condition is not None:
            self.condition = condition
        if space_after_if is not None:
            self.space_after_if = space_after_if
        if then_body is not None:
            self.then_body = then_body
        if else_body is not None:
            self.else_body = else_body

    @property
    def condition(self):
        """Gets the condition of this BTPStatementIfAllOf.  # noqa: E501


        :return: The condition of this BTPStatementIfAllOf.  # noqa: E501
        :rtype: BTPExpression
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this BTPStatementIfAllOf.


        :param condition: The condition of this BTPStatementIfAllOf.  # noqa: E501
        :type: BTPExpression
        """

        self._condition = condition

    @property
    def space_after_if(self):
        """Gets the space_after_if of this BTPStatementIfAllOf.  # noqa: E501


        :return: The space_after_if of this BTPStatementIfAllOf.  # noqa: E501
        :rtype: BTPSpace
        """
        return self._space_after_if

    @space_after_if.setter
    def space_after_if(self, space_after_if):
        """Sets the space_after_if of this BTPStatementIfAllOf.


        :param space_after_if: The space_after_if of this BTPStatementIfAllOf.  # noqa: E501
        :type: BTPSpace
        """

        self._space_after_if = space_after_if

    @property
    def then_body(self):
        """Gets the then_body of this BTPStatementIfAllOf.  # noqa: E501


        :return: The then_body of this BTPStatementIfAllOf.  # noqa: E501
        :rtype: BTPStatement
        """
        return self._then_body

    @then_body.setter
    def then_body(self, then_body):
        """Sets the then_body of this BTPStatementIfAllOf.


        :param then_body: The then_body of this BTPStatementIfAllOf.  # noqa: E501
        :type: BTPStatement
        """

        self._then_body = then_body

    @property
    def else_body(self):
        """Gets the else_body of this BTPStatementIfAllOf.  # noqa: E501


        :return: The else_body of this BTPStatementIfAllOf.  # noqa: E501
        :rtype: BTPStatement
        """
        return self._else_body

    @else_body.setter
    def else_body(self, else_body):
        """Sets the else_body of this BTPStatementIfAllOf.


        :param else_body: The else_body of this BTPStatementIfAllOf.  # noqa: E501
        :type: BTPStatement
        """

        self._else_body = else_body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTPStatementIfAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
