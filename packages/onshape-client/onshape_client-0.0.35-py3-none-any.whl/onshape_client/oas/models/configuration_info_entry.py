# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class ConfigurationInfoEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parameter_id': 'str',
        'parameter_value': 'str',
        'explicit': 'bool',
        'parameter_name': 'str',
        'parameter_display_value': 'str'
    }

    attribute_map = {
        'parameter_id': 'parameterId',
        'parameter_value': 'parameterValue',
        'explicit': 'explicit',
        'parameter_name': 'parameterName',
        'parameter_display_value': 'parameterDisplayValue'
    }

    def __init__(self, parameter_id=None, parameter_value=None, explicit=None, parameter_name=None, parameter_display_value=None, local_vars_configuration=None):  # noqa: E501
        """ConfigurationInfoEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parameter_id = None
        self._parameter_value = None
        self._explicit = None
        self._parameter_name = None
        self._parameter_display_value = None
        self.discriminator = None

        if parameter_id is not None:
            self.parameter_id = parameter_id
        if parameter_value is not None:
            self.parameter_value = parameter_value
        if explicit is not None:
            self.explicit = explicit
        if parameter_name is not None:
            self.parameter_name = parameter_name
        if parameter_display_value is not None:
            self.parameter_display_value = parameter_display_value

    @property
    def parameter_id(self):
        """Gets the parameter_id of this ConfigurationInfoEntry.  # noqa: E501


        :return: The parameter_id of this ConfigurationInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this ConfigurationInfoEntry.


        :param parameter_id: The parameter_id of this ConfigurationInfoEntry.  # noqa: E501
        :type: str
        """

        self._parameter_id = parameter_id

    @property
    def parameter_value(self):
        """Gets the parameter_value of this ConfigurationInfoEntry.  # noqa: E501


        :return: The parameter_value of this ConfigurationInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._parameter_value

    @parameter_value.setter
    def parameter_value(self, parameter_value):
        """Sets the parameter_value of this ConfigurationInfoEntry.


        :param parameter_value: The parameter_value of this ConfigurationInfoEntry.  # noqa: E501
        :type: str
        """

        self._parameter_value = parameter_value

    @property
    def explicit(self):
        """Gets the explicit of this ConfigurationInfoEntry.  # noqa: E501


        :return: The explicit of this ConfigurationInfoEntry.  # noqa: E501
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this ConfigurationInfoEntry.


        :param explicit: The explicit of this ConfigurationInfoEntry.  # noqa: E501
        :type: bool
        """

        self._explicit = explicit

    @property
    def parameter_name(self):
        """Gets the parameter_name of this ConfigurationInfoEntry.  # noqa: E501


        :return: The parameter_name of this ConfigurationInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this ConfigurationInfoEntry.


        :param parameter_name: The parameter_name of this ConfigurationInfoEntry.  # noqa: E501
        :type: str
        """

        self._parameter_name = parameter_name

    @property
    def parameter_display_value(self):
        """Gets the parameter_display_value of this ConfigurationInfoEntry.  # noqa: E501


        :return: The parameter_display_value of this ConfigurationInfoEntry.  # noqa: E501
        :rtype: str
        """
        return self._parameter_display_value

    @parameter_display_value.setter
    def parameter_display_value(self, parameter_display_value):
        """Sets the parameter_display_value of this ConfigurationInfoEntry.


        :param parameter_display_value: The parameter_display_value of this ConfigurationInfoEntry.  # noqa: E501
        :type: str
        """

        self._parameter_display_value = parameter_display_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationInfoEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigurationInfoEntry):
            return True

        return self.to_dict() != other.to_dict()
