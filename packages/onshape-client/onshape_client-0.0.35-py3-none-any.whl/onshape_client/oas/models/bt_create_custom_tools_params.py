# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTCreateCustomToolsParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'specs_exist_': 'bool',
        'parent_id': 'str',
        'tools': 'list[BTCreateCustomToolParams]',
        'specs_exist': 'bool'
    }

    attribute_map = {
        'specs_exist_': 'specsExist_',
        'parent_id': 'parentId',
        'tools': 'tools',
        'specs_exist': 'specsExist'
    }

    def __init__(self, specs_exist_=None, parent_id=None, tools=None, specs_exist=None):  # noqa: E501
        """BTCreateCustomToolsParams - a model defined in OpenAPI"""  # noqa: E501

        self._specs_exist_ = None
        self._parent_id = None
        self._tools = None
        self._specs_exist = None
        self.discriminator = None

        if specs_exist_ is not None:
            self.specs_exist_ = specs_exist_
        if parent_id is not None:
            self.parent_id = parent_id
        if tools is not None:
            self.tools = tools
        if specs_exist is not None:
            self.specs_exist = specs_exist

    @property
    def specs_exist_(self):
        """Gets the specs_exist_ of this BTCreateCustomToolsParams.  # noqa: E501


        :return: The specs_exist_ of this BTCreateCustomToolsParams.  # noqa: E501
        :rtype: bool
        """
        return self._specs_exist_

    @specs_exist_.setter
    def specs_exist_(self, specs_exist_):
        """Sets the specs_exist_ of this BTCreateCustomToolsParams.


        :param specs_exist_: The specs_exist_ of this BTCreateCustomToolsParams.  # noqa: E501
        :type: bool
        """

        self._specs_exist_ = specs_exist_

    @property
    def parent_id(self):
        """Gets the parent_id of this BTCreateCustomToolsParams.  # noqa: E501


        :return: The parent_id of this BTCreateCustomToolsParams.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BTCreateCustomToolsParams.


        :param parent_id: The parent_id of this BTCreateCustomToolsParams.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def tools(self):
        """Gets the tools of this BTCreateCustomToolsParams.  # noqa: E501


        :return: The tools of this BTCreateCustomToolsParams.  # noqa: E501
        :rtype: list[BTCreateCustomToolParams]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this BTCreateCustomToolsParams.


        :param tools: The tools of this BTCreateCustomToolsParams.  # noqa: E501
        :type: list[BTCreateCustomToolParams]
        """

        self._tools = tools

    @property
    def specs_exist(self):
        """Gets the specs_exist of this BTCreateCustomToolsParams.  # noqa: E501


        :return: The specs_exist of this BTCreateCustomToolsParams.  # noqa: E501
        :rtype: bool
        """
        return self._specs_exist

    @specs_exist.setter
    def specs_exist(self, specs_exist):
        """Sets the specs_exist of this BTCreateCustomToolsParams.


        :param specs_exist: The specs_exist of this BTCreateCustomToolsParams.  # noqa: E501
        :type: bool
        """

        self._specs_exist = specs_exist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTCreateCustomToolsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
