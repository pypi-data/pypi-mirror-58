# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTCompanyUserParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'guest': 'bool',
        'light': 'bool',
        'email': 'str',
        'company_id': 'str',
        'admin': 'bool'
    }

    attribute_map = {
        'guest': 'guest',
        'light': 'light',
        'email': 'email',
        'company_id': 'companyId',
        'admin': 'admin'
    }

    def __init__(self, guest=None, light=None, email=None, company_id=None, admin=None):  # noqa: E501
        """BTCompanyUserParams - a model defined in OpenAPI"""  # noqa: E501

        self._guest = None
        self._light = None
        self._email = None
        self._company_id = None
        self._admin = None
        self.discriminator = None

        if guest is not None:
            self.guest = guest
        if light is not None:
            self.light = light
        if email is not None:
            self.email = email
        if company_id is not None:
            self.company_id = company_id
        if admin is not None:
            self.admin = admin

    @property
    def guest(self):
        """Gets the guest of this BTCompanyUserParams.  # noqa: E501


        :return: The guest of this BTCompanyUserParams.  # noqa: E501
        :rtype: bool
        """
        return self._guest

    @guest.setter
    def guest(self, guest):
        """Sets the guest of this BTCompanyUserParams.


        :param guest: The guest of this BTCompanyUserParams.  # noqa: E501
        :type: bool
        """

        self._guest = guest

    @property
    def light(self):
        """Gets the light of this BTCompanyUserParams.  # noqa: E501


        :return: The light of this BTCompanyUserParams.  # noqa: E501
        :rtype: bool
        """
        return self._light

    @light.setter
    def light(self, light):
        """Sets the light of this BTCompanyUserParams.


        :param light: The light of this BTCompanyUserParams.  # noqa: E501
        :type: bool
        """

        self._light = light

    @property
    def email(self):
        """Gets the email of this BTCompanyUserParams.  # noqa: E501


        :return: The email of this BTCompanyUserParams.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BTCompanyUserParams.


        :param email: The email of this BTCompanyUserParams.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def company_id(self):
        """Gets the company_id of this BTCompanyUserParams.  # noqa: E501


        :return: The company_id of this BTCompanyUserParams.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this BTCompanyUserParams.


        :param company_id: The company_id of this BTCompanyUserParams.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def admin(self):
        """Gets the admin of this BTCompanyUserParams.  # noqa: E501


        :return: The admin of this BTCompanyUserParams.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this BTCompanyUserParams.


        :param admin: The admin of this BTCompanyUserParams.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTCompanyUserParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
