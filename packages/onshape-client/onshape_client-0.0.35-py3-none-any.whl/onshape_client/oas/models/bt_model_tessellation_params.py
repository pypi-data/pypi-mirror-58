# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTModelTessellationParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configuration': 'str',
        'workspace_id': 'str',
        'element_id': 'str',
        'document_id': 'str',
        'part_ids': 'list[str]',
        'part_query': 'str',
        'angle_tolerance': 'float',
        'chord_tolerance': 'float',
        'max_facet_width': 'float',
        'output_vertex_normals': 'bool',
        'output_facet_normals': 'bool',
        'output_texture_coordinates': 'bool',
        'output_index_table': 'bool',
        'entity_ids': 'list[str]',
        'output_error_faces': 'bool',
        'part_id': 'str',
        'element_microversion_id': 'str'
    }

    attribute_map = {
        'configuration': 'configuration',
        'workspace_id': 'workspaceId',
        'element_id': 'elementId',
        'document_id': 'documentId',
        'part_ids': 'partIds',
        'part_query': 'partQuery',
        'angle_tolerance': 'angleTolerance',
        'chord_tolerance': 'chordTolerance',
        'max_facet_width': 'maxFacetWidth',
        'output_vertex_normals': 'outputVertexNormals',
        'output_facet_normals': 'outputFacetNormals',
        'output_texture_coordinates': 'outputTextureCoordinates',
        'output_index_table': 'outputIndexTable',
        'entity_ids': 'entityIds',
        'output_error_faces': 'outputErrorFaces',
        'part_id': 'partId',
        'element_microversion_id': 'elementMicroversionId'
    }

    def __init__(self, configuration=None, workspace_id=None, element_id=None, document_id=None, part_ids=None, part_query=None, angle_tolerance=None, chord_tolerance=None, max_facet_width=None, output_vertex_normals=None, output_facet_normals=None, output_texture_coordinates=None, output_index_table=None, entity_ids=None, output_error_faces=None, part_id=None, element_microversion_id=None):  # noqa: E501
        """BTModelTessellationParams - a model defined in OpenAPI"""  # noqa: E501

        self._configuration = None
        self._workspace_id = None
        self._element_id = None
        self._document_id = None
        self._part_ids = None
        self._part_query = None
        self._angle_tolerance = None
        self._chord_tolerance = None
        self._max_facet_width = None
        self._output_vertex_normals = None
        self._output_facet_normals = None
        self._output_texture_coordinates = None
        self._output_index_table = None
        self._entity_ids = None
        self._output_error_faces = None
        self._part_id = None
        self._element_microversion_id = None
        self.discriminator = None

        if configuration is not None:
            self.configuration = configuration
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if element_id is not None:
            self.element_id = element_id
        if document_id is not None:
            self.document_id = document_id
        if part_ids is not None:
            self.part_ids = part_ids
        if part_query is not None:
            self.part_query = part_query
        if angle_tolerance is not None:
            self.angle_tolerance = angle_tolerance
        if chord_tolerance is not None:
            self.chord_tolerance = chord_tolerance
        if max_facet_width is not None:
            self.max_facet_width = max_facet_width
        if output_vertex_normals is not None:
            self.output_vertex_normals = output_vertex_normals
        if output_facet_normals is not None:
            self.output_facet_normals = output_facet_normals
        if output_texture_coordinates is not None:
            self.output_texture_coordinates = output_texture_coordinates
        if output_index_table is not None:
            self.output_index_table = output_index_table
        if entity_ids is not None:
            self.entity_ids = entity_ids
        if output_error_faces is not None:
            self.output_error_faces = output_error_faces
        if part_id is not None:
            self.part_id = part_id
        if element_microversion_id is not None:
            self.element_microversion_id = element_microversion_id

    @property
    def configuration(self):
        """Gets the configuration of this BTModelTessellationParams.  # noqa: E501


        :return: The configuration of this BTModelTessellationParams.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this BTModelTessellationParams.


        :param configuration: The configuration of this BTModelTessellationParams.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def workspace_id(self):
        """Gets the workspace_id of this BTModelTessellationParams.  # noqa: E501


        :return: The workspace_id of this BTModelTessellationParams.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this BTModelTessellationParams.


        :param workspace_id: The workspace_id of this BTModelTessellationParams.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def element_id(self):
        """Gets the element_id of this BTModelTessellationParams.  # noqa: E501


        :return: The element_id of this BTModelTessellationParams.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this BTModelTessellationParams.


        :param element_id: The element_id of this BTModelTessellationParams.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def document_id(self):
        """Gets the document_id of this BTModelTessellationParams.  # noqa: E501


        :return: The document_id of this BTModelTessellationParams.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this BTModelTessellationParams.


        :param document_id: The document_id of this BTModelTessellationParams.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def part_ids(self):
        """Gets the part_ids of this BTModelTessellationParams.  # noqa: E501


        :return: The part_ids of this BTModelTessellationParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._part_ids

    @part_ids.setter
    def part_ids(self, part_ids):
        """Sets the part_ids of this BTModelTessellationParams.


        :param part_ids: The part_ids of this BTModelTessellationParams.  # noqa: E501
        :type: list[str]
        """

        self._part_ids = part_ids

    @property
    def part_query(self):
        """Gets the part_query of this BTModelTessellationParams.  # noqa: E501


        :return: The part_query of this BTModelTessellationParams.  # noqa: E501
        :rtype: str
        """
        return self._part_query

    @part_query.setter
    def part_query(self, part_query):
        """Sets the part_query of this BTModelTessellationParams.


        :param part_query: The part_query of this BTModelTessellationParams.  # noqa: E501
        :type: str
        """

        self._part_query = part_query

    @property
    def angle_tolerance(self):
        """Gets the angle_tolerance of this BTModelTessellationParams.  # noqa: E501


        :return: The angle_tolerance of this BTModelTessellationParams.  # noqa: E501
        :rtype: float
        """
        return self._angle_tolerance

    @angle_tolerance.setter
    def angle_tolerance(self, angle_tolerance):
        """Sets the angle_tolerance of this BTModelTessellationParams.


        :param angle_tolerance: The angle_tolerance of this BTModelTessellationParams.  # noqa: E501
        :type: float
        """

        self._angle_tolerance = angle_tolerance

    @property
    def chord_tolerance(self):
        """Gets the chord_tolerance of this BTModelTessellationParams.  # noqa: E501


        :return: The chord_tolerance of this BTModelTessellationParams.  # noqa: E501
        :rtype: float
        """
        return self._chord_tolerance

    @chord_tolerance.setter
    def chord_tolerance(self, chord_tolerance):
        """Sets the chord_tolerance of this BTModelTessellationParams.


        :param chord_tolerance: The chord_tolerance of this BTModelTessellationParams.  # noqa: E501
        :type: float
        """

        self._chord_tolerance = chord_tolerance

    @property
    def max_facet_width(self):
        """Gets the max_facet_width of this BTModelTessellationParams.  # noqa: E501


        :return: The max_facet_width of this BTModelTessellationParams.  # noqa: E501
        :rtype: float
        """
        return self._max_facet_width

    @max_facet_width.setter
    def max_facet_width(self, max_facet_width):
        """Sets the max_facet_width of this BTModelTessellationParams.


        :param max_facet_width: The max_facet_width of this BTModelTessellationParams.  # noqa: E501
        :type: float
        """

        self._max_facet_width = max_facet_width

    @property
    def output_vertex_normals(self):
        """Gets the output_vertex_normals of this BTModelTessellationParams.  # noqa: E501


        :return: The output_vertex_normals of this BTModelTessellationParams.  # noqa: E501
        :rtype: bool
        """
        return self._output_vertex_normals

    @output_vertex_normals.setter
    def output_vertex_normals(self, output_vertex_normals):
        """Sets the output_vertex_normals of this BTModelTessellationParams.


        :param output_vertex_normals: The output_vertex_normals of this BTModelTessellationParams.  # noqa: E501
        :type: bool
        """

        self._output_vertex_normals = output_vertex_normals

    @property
    def output_facet_normals(self):
        """Gets the output_facet_normals of this BTModelTessellationParams.  # noqa: E501


        :return: The output_facet_normals of this BTModelTessellationParams.  # noqa: E501
        :rtype: bool
        """
        return self._output_facet_normals

    @output_facet_normals.setter
    def output_facet_normals(self, output_facet_normals):
        """Sets the output_facet_normals of this BTModelTessellationParams.


        :param output_facet_normals: The output_facet_normals of this BTModelTessellationParams.  # noqa: E501
        :type: bool
        """

        self._output_facet_normals = output_facet_normals

    @property
    def output_texture_coordinates(self):
        """Gets the output_texture_coordinates of this BTModelTessellationParams.  # noqa: E501


        :return: The output_texture_coordinates of this BTModelTessellationParams.  # noqa: E501
        :rtype: bool
        """
        return self._output_texture_coordinates

    @output_texture_coordinates.setter
    def output_texture_coordinates(self, output_texture_coordinates):
        """Sets the output_texture_coordinates of this BTModelTessellationParams.


        :param output_texture_coordinates: The output_texture_coordinates of this BTModelTessellationParams.  # noqa: E501
        :type: bool
        """

        self._output_texture_coordinates = output_texture_coordinates

    @property
    def output_index_table(self):
        """Gets the output_index_table of this BTModelTessellationParams.  # noqa: E501


        :return: The output_index_table of this BTModelTessellationParams.  # noqa: E501
        :rtype: bool
        """
        return self._output_index_table

    @output_index_table.setter
    def output_index_table(self, output_index_table):
        """Sets the output_index_table of this BTModelTessellationParams.


        :param output_index_table: The output_index_table of this BTModelTessellationParams.  # noqa: E501
        :type: bool
        """

        self._output_index_table = output_index_table

    @property
    def entity_ids(self):
        """Gets the entity_ids of this BTModelTessellationParams.  # noqa: E501


        :return: The entity_ids of this BTModelTessellationParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this BTModelTessellationParams.


        :param entity_ids: The entity_ids of this BTModelTessellationParams.  # noqa: E501
        :type: list[str]
        """

        self._entity_ids = entity_ids

    @property
    def output_error_faces(self):
        """Gets the output_error_faces of this BTModelTessellationParams.  # noqa: E501


        :return: The output_error_faces of this BTModelTessellationParams.  # noqa: E501
        :rtype: bool
        """
        return self._output_error_faces

    @output_error_faces.setter
    def output_error_faces(self, output_error_faces):
        """Sets the output_error_faces of this BTModelTessellationParams.


        :param output_error_faces: The output_error_faces of this BTModelTessellationParams.  # noqa: E501
        :type: bool
        """

        self._output_error_faces = output_error_faces

    @property
    def part_id(self):
        """Gets the part_id of this BTModelTessellationParams.  # noqa: E501


        :return: The part_id of this BTModelTessellationParams.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this BTModelTessellationParams.


        :param part_id: The part_id of this BTModelTessellationParams.  # noqa: E501
        :type: str
        """

        self._part_id = part_id

    @property
    def element_microversion_id(self):
        """Gets the element_microversion_id of this BTModelTessellationParams.  # noqa: E501


        :return: The element_microversion_id of this BTModelTessellationParams.  # noqa: E501
        :rtype: str
        """
        return self._element_microversion_id

    @element_microversion_id.setter
    def element_microversion_id(self, element_microversion_id):
        """Sets the element_microversion_id of this BTModelTessellationParams.


        :param element_microversion_id: The element_microversion_id of this BTModelTessellationParams.  # noqa: E501
        :type: str
        """

        self._element_microversion_id = element_microversion_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTModelTessellationParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
