# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTZuoraWorkflowChangePlanOnSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'old_subscription_id': 'str',
        'old_bt_billing_plan_id': 'str',
        'new_bt_billing_plan_id': 'str',
        'effective_date': 'str',
        'new_subscription_id': 'str'
    }

    attribute_map = {
        'old_subscription_id': 'oldSubscriptionId',
        'old_bt_billing_plan_id': 'oldBTBillingPlanId',
        'new_bt_billing_plan_id': 'newBTBillingPlanId',
        'effective_date': 'effectiveDate',
        'new_subscription_id': 'newSubscriptionId'
    }

    def __init__(self, old_subscription_id=None, old_bt_billing_plan_id=None, new_bt_billing_plan_id=None, effective_date=None, new_subscription_id=None):  # noqa: E501
        """BTZuoraWorkflowChangePlanOnSubscription - a model defined in OpenAPI"""  # noqa: E501

        self._old_subscription_id = None
        self._old_bt_billing_plan_id = None
        self._new_bt_billing_plan_id = None
        self._effective_date = None
        self._new_subscription_id = None
        self.discriminator = None

        if old_subscription_id is not None:
            self.old_subscription_id = old_subscription_id
        if old_bt_billing_plan_id is not None:
            self.old_bt_billing_plan_id = old_bt_billing_plan_id
        if new_bt_billing_plan_id is not None:
            self.new_bt_billing_plan_id = new_bt_billing_plan_id
        if effective_date is not None:
            self.effective_date = effective_date
        if new_subscription_id is not None:
            self.new_subscription_id = new_subscription_id

    @property
    def old_subscription_id(self):
        """Gets the old_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501


        :return: The old_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :rtype: str
        """
        return self._old_subscription_id

    @old_subscription_id.setter
    def old_subscription_id(self, old_subscription_id):
        """Sets the old_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.


        :param old_subscription_id: The old_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :type: str
        """

        self._old_subscription_id = old_subscription_id

    @property
    def old_bt_billing_plan_id(self):
        """Gets the old_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501


        :return: The old_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :rtype: str
        """
        return self._old_bt_billing_plan_id

    @old_bt_billing_plan_id.setter
    def old_bt_billing_plan_id(self, old_bt_billing_plan_id):
        """Sets the old_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.


        :param old_bt_billing_plan_id: The old_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :type: str
        """

        self._old_bt_billing_plan_id = old_bt_billing_plan_id

    @property
    def new_bt_billing_plan_id(self):
        """Gets the new_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501


        :return: The new_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :rtype: str
        """
        return self._new_bt_billing_plan_id

    @new_bt_billing_plan_id.setter
    def new_bt_billing_plan_id(self, new_bt_billing_plan_id):
        """Sets the new_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.


        :param new_bt_billing_plan_id: The new_bt_billing_plan_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :type: str
        """

        self._new_bt_billing_plan_id = new_bt_billing_plan_id

    @property
    def effective_date(self):
        """Gets the effective_date of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501


        :return: The effective_date of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this BTZuoraWorkflowChangePlanOnSubscription.


        :param effective_date: The effective_date of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :type: str
        """

        self._effective_date = effective_date

    @property
    def new_subscription_id(self):
        """Gets the new_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501


        :return: The new_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :rtype: str
        """
        return self._new_subscription_id

    @new_subscription_id.setter
    def new_subscription_id(self, new_subscription_id):
        """Sets the new_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.


        :param new_subscription_id: The new_subscription_id of this BTZuoraWorkflowChangePlanOnSubscription.  # noqa: E501
        :type: str
        """

        self._new_subscription_id = new_subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTZuoraWorkflowChangePlanOnSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
