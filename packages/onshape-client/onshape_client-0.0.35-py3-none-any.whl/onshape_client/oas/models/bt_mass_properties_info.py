# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTMassPropertiesInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'principal_inertia': 'list[float]',
        'principal_axes': 'list[BTVector3d]',
        'has_mass': 'bool',
        'mass': 'list[float]',
        'volume': 'list[float]',
        'periphery': 'list[float]',
        'centroid': 'list[float]',
        'inertia': 'list[float]',
        'mass_missing_count': 'int',
        'bt_type': 'str'
    }

    attribute_map = {
        'principal_inertia': 'principalInertia',
        'principal_axes': 'principalAxes',
        'has_mass': 'hasMass',
        'mass': 'mass',
        'volume': 'volume',
        'periphery': 'periphery',
        'centroid': 'centroid',
        'inertia': 'inertia',
        'mass_missing_count': 'massMissingCount',
        'bt_type': 'btType'
    }

    def __init__(self, principal_inertia=None, principal_axes=None, has_mass=None, mass=None, volume=None, periphery=None, centroid=None, inertia=None, mass_missing_count=None, bt_type=None):  # noqa: E501
        """BTMassPropertiesInfo - a model defined in OpenAPI"""  # noqa: E501

        self._principal_inertia = None
        self._principal_axes = None
        self._has_mass = None
        self._mass = None
        self._volume = None
        self._periphery = None
        self._centroid = None
        self._inertia = None
        self._mass_missing_count = None
        self._bt_type = None
        self.discriminator = None

        if principal_inertia is not None:
            self.principal_inertia = principal_inertia
        if principal_axes is not None:
            self.principal_axes = principal_axes
        if has_mass is not None:
            self.has_mass = has_mass
        if mass is not None:
            self.mass = mass
        if volume is not None:
            self.volume = volume
        if periphery is not None:
            self.periphery = periphery
        if centroid is not None:
            self.centroid = centroid
        if inertia is not None:
            self.inertia = inertia
        if mass_missing_count is not None:
            self.mass_missing_count = mass_missing_count
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def principal_inertia(self):
        """Gets the principal_inertia of this BTMassPropertiesInfo.  # noqa: E501


        :return: The principal_inertia of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._principal_inertia

    @principal_inertia.setter
    def principal_inertia(self, principal_inertia):
        """Sets the principal_inertia of this BTMassPropertiesInfo.


        :param principal_inertia: The principal_inertia of this BTMassPropertiesInfo.  # noqa: E501
        :type: list[float]
        """

        self._principal_inertia = principal_inertia

    @property
    def principal_axes(self):
        """Gets the principal_axes of this BTMassPropertiesInfo.  # noqa: E501


        :return: The principal_axes of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: list[BTVector3d]
        """
        return self._principal_axes

    @principal_axes.setter
    def principal_axes(self, principal_axes):
        """Sets the principal_axes of this BTMassPropertiesInfo.


        :param principal_axes: The principal_axes of this BTMassPropertiesInfo.  # noqa: E501
        :type: list[BTVector3d]
        """

        self._principal_axes = principal_axes

    @property
    def has_mass(self):
        """Gets the has_mass of this BTMassPropertiesInfo.  # noqa: E501


        :return: The has_mass of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_mass

    @has_mass.setter
    def has_mass(self, has_mass):
        """Sets the has_mass of this BTMassPropertiesInfo.


        :param has_mass: The has_mass of this BTMassPropertiesInfo.  # noqa: E501
        :type: bool
        """

        self._has_mass = has_mass

    @property
    def mass(self):
        """Gets the mass of this BTMassPropertiesInfo.  # noqa: E501


        :return: The mass of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this BTMassPropertiesInfo.


        :param mass: The mass of this BTMassPropertiesInfo.  # noqa: E501
        :type: list[float]
        """

        self._mass = mass

    @property
    def volume(self):
        """Gets the volume of this BTMassPropertiesInfo.  # noqa: E501


        :return: The volume of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this BTMassPropertiesInfo.


        :param volume: The volume of this BTMassPropertiesInfo.  # noqa: E501
        :type: list[float]
        """

        self._volume = volume

    @property
    def periphery(self):
        """Gets the periphery of this BTMassPropertiesInfo.  # noqa: E501


        :return: The periphery of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._periphery

    @periphery.setter
    def periphery(self, periphery):
        """Sets the periphery of this BTMassPropertiesInfo.


        :param periphery: The periphery of this BTMassPropertiesInfo.  # noqa: E501
        :type: list[float]
        """

        self._periphery = periphery

    @property
    def centroid(self):
        """Gets the centroid of this BTMassPropertiesInfo.  # noqa: E501


        :return: The centroid of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._centroid

    @centroid.setter
    def centroid(self, centroid):
        """Sets the centroid of this BTMassPropertiesInfo.


        :param centroid: The centroid of this BTMassPropertiesInfo.  # noqa: E501
        :type: list[float]
        """

        self._centroid = centroid

    @property
    def inertia(self):
        """Gets the inertia of this BTMassPropertiesInfo.  # noqa: E501


        :return: The inertia of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._inertia

    @inertia.setter
    def inertia(self, inertia):
        """Sets the inertia of this BTMassPropertiesInfo.


        :param inertia: The inertia of this BTMassPropertiesInfo.  # noqa: E501
        :type: list[float]
        """

        self._inertia = inertia

    @property
    def mass_missing_count(self):
        """Gets the mass_missing_count of this BTMassPropertiesInfo.  # noqa: E501


        :return: The mass_missing_count of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: int
        """
        return self._mass_missing_count

    @mass_missing_count.setter
    def mass_missing_count(self, mass_missing_count):
        """Sets the mass_missing_count of this BTMassPropertiesInfo.


        :param mass_missing_count: The mass_missing_count of this BTMassPropertiesInfo.  # noqa: E501
        :type: int
        """

        self._mass_missing_count = mass_missing_count

    @property
    def bt_type(self):
        """Gets the bt_type of this BTMassPropertiesInfo.  # noqa: E501


        :return: The bt_type of this BTMassPropertiesInfo.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTMassPropertiesInfo.


        :param bt_type: The bt_type of this BTMassPropertiesInfo.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTMassPropertiesInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
