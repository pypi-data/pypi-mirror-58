# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTParameterLookupTableEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'localized_name': 'str',
        'localizable_name': 'str',
        'strings_to_localize': 'list[str]',
        'additional_localized_strings': 'int',
        'localized_label': 'str',
        'label': 'str',
        'bt_type': 'str'
    }

    attribute_map = {
        'localized_name': 'localizedName',
        'localizable_name': 'localizableName',
        'strings_to_localize': 'stringsToLocalize',
        'additional_localized_strings': 'additionalLocalizedStrings',
        'localized_label': 'localizedLabel',
        'label': 'label',
        'bt_type': 'btType'
    }

    discriminator_value_class_map = {
        
    }

    def __init__(self, localized_name=None, localizable_name=None, strings_to_localize=None, additional_localized_strings=None, localized_label=None, label=None, bt_type=None):  # noqa: E501
        """BTParameterLookupTableEntry - a model defined in OpenAPI"""  # noqa: E501

        self._localized_name = None
        self._localizable_name = None
        self._strings_to_localize = None
        self._additional_localized_strings = None
        self._localized_label = None
        self._label = None
        self._bt_type = None
        self.discriminator = 'bt_type'

        if localized_name is not None:
            self.localized_name = localized_name
        if localizable_name is not None:
            self.localizable_name = localizable_name
        if strings_to_localize is not None:
            self.strings_to_localize = strings_to_localize
        if additional_localized_strings is not None:
            self.additional_localized_strings = additional_localized_strings
        if localized_label is not None:
            self.localized_label = localized_label
        if label is not None:
            self.label = label
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def localized_name(self):
        """Gets the localized_name of this BTParameterLookupTableEntry.  # noqa: E501


        :return: The localized_name of this BTParameterLookupTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._localized_name

    @localized_name.setter
    def localized_name(self, localized_name):
        """Sets the localized_name of this BTParameterLookupTableEntry.


        :param localized_name: The localized_name of this BTParameterLookupTableEntry.  # noqa: E501
        :type: str
        """

        self._localized_name = localized_name

    @property
    def localizable_name(self):
        """Gets the localizable_name of this BTParameterLookupTableEntry.  # noqa: E501


        :return: The localizable_name of this BTParameterLookupTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._localizable_name

    @localizable_name.setter
    def localizable_name(self, localizable_name):
        """Sets the localizable_name of this BTParameterLookupTableEntry.


        :param localizable_name: The localizable_name of this BTParameterLookupTableEntry.  # noqa: E501
        :type: str
        """

        self._localizable_name = localizable_name

    @property
    def strings_to_localize(self):
        """Gets the strings_to_localize of this BTParameterLookupTableEntry.  # noqa: E501


        :return: The strings_to_localize of this BTParameterLookupTableEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._strings_to_localize

    @strings_to_localize.setter
    def strings_to_localize(self, strings_to_localize):
        """Sets the strings_to_localize of this BTParameterLookupTableEntry.


        :param strings_to_localize: The strings_to_localize of this BTParameterLookupTableEntry.  # noqa: E501
        :type: list[str]
        """

        self._strings_to_localize = strings_to_localize

    @property
    def additional_localized_strings(self):
        """Gets the additional_localized_strings of this BTParameterLookupTableEntry.  # noqa: E501


        :return: The additional_localized_strings of this BTParameterLookupTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._additional_localized_strings

    @additional_localized_strings.setter
    def additional_localized_strings(self, additional_localized_strings):
        """Sets the additional_localized_strings of this BTParameterLookupTableEntry.


        :param additional_localized_strings: The additional_localized_strings of this BTParameterLookupTableEntry.  # noqa: E501
        :type: int
        """

        self._additional_localized_strings = additional_localized_strings

    @property
    def localized_label(self):
        """Gets the localized_label of this BTParameterLookupTableEntry.  # noqa: E501


        :return: The localized_label of this BTParameterLookupTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._localized_label

    @localized_label.setter
    def localized_label(self, localized_label):
        """Sets the localized_label of this BTParameterLookupTableEntry.


        :param localized_label: The localized_label of this BTParameterLookupTableEntry.  # noqa: E501
        :type: str
        """

        self._localized_label = localized_label

    @property
    def label(self):
        """Gets the label of this BTParameterLookupTableEntry.  # noqa: E501


        :return: The label of this BTParameterLookupTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BTParameterLookupTableEntry.


        :param label: The label of this BTParameterLookupTableEntry.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def bt_type(self):
        """Gets the bt_type of this BTParameterLookupTableEntry.  # noqa: E501


        :return: The bt_type of this BTParameterLookupTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTParameterLookupTableEntry.


        :param bt_type: The bt_type of this BTParameterLookupTableEntry.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTParameterLookupTableEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
