# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTFSValueMap2062AllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'value_object': 'dict(str, object)',
        'fsvalues_keyed_by_strings': 'dict(str, BTFSValue1888)',
        'value': 'list[BTFSValueMapEntry2077]',
        'bt_type': 'str'
    }

    attribute_map = {
        'value_object': 'valueObject',
        'fsvalues_keyed_by_strings': 'fsvaluesKeyedByStrings',
        'value': 'value',
        'bt_type': 'btType'
    }

    def __init__(self, value_object=None, fsvalues_keyed_by_strings=None, value=None, bt_type=None, local_vars_configuration=None):  # noqa: E501
        """BTFSValueMap2062AllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._value_object = None
        self._fsvalues_keyed_by_strings = None
        self._value = None
        self._bt_type = None
        self.discriminator = None

        if value_object is not None:
            self.value_object = value_object
        if fsvalues_keyed_by_strings is not None:
            self.fsvalues_keyed_by_strings = fsvalues_keyed_by_strings
        if value is not None:
            self.value = value
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def value_object(self):
        """Gets the value_object of this BTFSValueMap2062AllOf.  # noqa: E501


        :return: The value_object of this BTFSValueMap2062AllOf.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._value_object

    @value_object.setter
    def value_object(self, value_object):
        """Sets the value_object of this BTFSValueMap2062AllOf.


        :param value_object: The value_object of this BTFSValueMap2062AllOf.  # noqa: E501
        :type: dict(str, object)
        """

        self._value_object = value_object

    @property
    def fsvalues_keyed_by_strings(self):
        """Gets the fsvalues_keyed_by_strings of this BTFSValueMap2062AllOf.  # noqa: E501


        :return: The fsvalues_keyed_by_strings of this BTFSValueMap2062AllOf.  # noqa: E501
        :rtype: dict(str, BTFSValue1888)
        """
        return self._fsvalues_keyed_by_strings

    @fsvalues_keyed_by_strings.setter
    def fsvalues_keyed_by_strings(self, fsvalues_keyed_by_strings):
        """Sets the fsvalues_keyed_by_strings of this BTFSValueMap2062AllOf.


        :param fsvalues_keyed_by_strings: The fsvalues_keyed_by_strings of this BTFSValueMap2062AllOf.  # noqa: E501
        :type: dict(str, BTFSValue1888)
        """

        self._fsvalues_keyed_by_strings = fsvalues_keyed_by_strings

    @property
    def value(self):
        """Gets the value of this BTFSValueMap2062AllOf.  # noqa: E501


        :return: The value of this BTFSValueMap2062AllOf.  # noqa: E501
        :rtype: list[BTFSValueMapEntry2077]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BTFSValueMap2062AllOf.


        :param value: The value of this BTFSValueMap2062AllOf.  # noqa: E501
        :type: list[BTFSValueMapEntry2077]
        """

        self._value = value

    @property
    def bt_type(self):
        """Gets the bt_type of this BTFSValueMap2062AllOf.  # noqa: E501


        :return: The bt_type of this BTFSValueMap2062AllOf.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTFSValueMap2062AllOf.


        :param bt_type: The bt_type of this BTFSValueMap2062AllOf.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTFSValueMap2062AllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTFSValueMap2062AllOf):
            return True

        return self.to_dict() != other.to_dict()
