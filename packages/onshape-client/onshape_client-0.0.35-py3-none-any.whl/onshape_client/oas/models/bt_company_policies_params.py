# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTCompanyPoliciesParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'require_totp': 'bool',
        'use_light_ui': 'bool',
        'integrations': 'IntegrationsParams',
        'require_approved_drawing_templates': 'bool',
        'approved_drawing_templates_document_id': 'str',
        'add_company_owned_libraries_in_user_account': 'bool',
        'release_workflow_id': 'str',
        'obsoletion_workflow_id': 'str',
        'revision_scheme_id': 'str',
        'require_revision_for_released_objects': 'bool',
        'require_part_number_for_released_objects': 'bool',
        'only_admins_can_edit_properties_of_released_objects': 'bool',
        'only_admins_can_delete_documents_containing_released_objects': 'bool',
        'only_admins_can_approve_releases': 'bool',
        'require_parts_and_subassemblies_release_with_assembly': 'bool',
        'require_parts_and_subassemblies_release_with_drawing': 'bool',
        'require_base_part_release_with_derived_part': 'bool',
        'require_image_release_with_drawing': 'bool',
        'action_show_drawings_watermark': 'bool',
        'hide_watermark_for_not_rev_managed': 'bool',
        'prevent_duplicate_document_name_regex': 'str',
        'error_on_feature_list_errors_during_release': 'bool',
        'error_on_rollback_bar_not_at_end_during_release': 'bool',
        'error_on_assembly_tree_errors_during_release': 'bool',
        'error_on_pending_context_edits_during_release': 'bool',
        'error_on_pending_drawing_update_during_release': 'bool',
        'error_on_pending_dangling_drawing_objects_during_release': 'bool',
        'approver_required_during_release': 'bool',
        'note_required_during_release': 'bool',
        'require_all_approvers': 'bool',
        'allow_release_items_from_other_documents': 'bool',
        'automatically_obsolete_previous_released_revisions': 'bool',
        'part_numbering_scheme_id': 'str',
        'require_peer_review': 'bool',
        'drawing_can_duplicate_part_number': 'bool',
        'enabled_active_multiple_workflows': 'bool',
        'only_admins_can_mark_objects_as_not_revision_managed': 'bool',
        'use_company_features_toolbar': 'bool'
    }

    attribute_map = {
        'require_totp': 'requireTotp',
        'use_light_ui': 'useLightUi',
        'integrations': 'integrations',
        'require_approved_drawing_templates': 'requireApprovedDrawingTemplates',
        'approved_drawing_templates_document_id': 'approvedDrawingTemplatesDocumentId',
        'add_company_owned_libraries_in_user_account': 'addCompanyOwnedLibrariesInUserAccount',
        'release_workflow_id': 'releaseWorkflowId',
        'obsoletion_workflow_id': 'obsoletionWorkflowId',
        'revision_scheme_id': 'revisionSchemeId',
        'require_revision_for_released_objects': 'requireRevisionForReleasedObjects',
        'require_part_number_for_released_objects': 'requirePartNumberForReleasedObjects',
        'only_admins_can_edit_properties_of_released_objects': 'onlyAdminsCanEditPropertiesOfReleasedObjects',
        'only_admins_can_delete_documents_containing_released_objects': 'onlyAdminsCanDeleteDocumentsContainingReleasedObjects',
        'only_admins_can_approve_releases': 'onlyAdminsCanApproveReleases',
        'require_parts_and_subassemblies_release_with_assembly': 'requirePartsAndSubassembliesReleaseWithAssembly',
        'require_parts_and_subassemblies_release_with_drawing': 'requirePartsAndSubassembliesReleaseWithDrawing',
        'require_base_part_release_with_derived_part': 'requireBasePartReleaseWithDerivedPart',
        'require_image_release_with_drawing': 'requireImageReleaseWithDrawing',
        'action_show_drawings_watermark': 'actionShowDrawingsWatermark',
        'hide_watermark_for_not_rev_managed': 'hideWatermarkForNotRevManaged',
        'prevent_duplicate_document_name_regex': 'preventDuplicateDocumentNameRegex',
        'error_on_feature_list_errors_during_release': 'errorOnFeatureListErrorsDuringRelease',
        'error_on_rollback_bar_not_at_end_during_release': 'errorOnRollbackBarNotAtEndDuringRelease',
        'error_on_assembly_tree_errors_during_release': 'errorOnAssemblyTreeErrorsDuringRelease',
        'error_on_pending_context_edits_during_release': 'errorOnPendingContextEditsDuringRelease',
        'error_on_pending_drawing_update_during_release': 'errorOnPendingDrawingUpdateDuringRelease',
        'error_on_pending_dangling_drawing_objects_during_release': 'errorOnPendingDanglingDrawingObjectsDuringRelease',
        'approver_required_during_release': 'approverRequiredDuringRelease',
        'note_required_during_release': 'noteRequiredDuringRelease',
        'require_all_approvers': 'requireAllApprovers',
        'allow_release_items_from_other_documents': 'allowReleaseItemsFromOtherDocuments',
        'automatically_obsolete_previous_released_revisions': 'automaticallyObsoletePreviousReleasedRevisions',
        'part_numbering_scheme_id': 'partNumberingSchemeId',
        'require_peer_review': 'requirePeerReview',
        'drawing_can_duplicate_part_number': 'drawingCanDuplicatePartNumber',
        'enabled_active_multiple_workflows': 'enabledActiveMultipleWorkflows',
        'only_admins_can_mark_objects_as_not_revision_managed': 'onlyAdminsCanMarkObjectsAsNotRevisionManaged',
        'use_company_features_toolbar': 'useCompanyFeaturesToolbar'
    }

    def __init__(self, require_totp=None, use_light_ui=None, integrations=None, require_approved_drawing_templates=None, approved_drawing_templates_document_id=None, add_company_owned_libraries_in_user_account=None, release_workflow_id=None, obsoletion_workflow_id=None, revision_scheme_id=None, require_revision_for_released_objects=None, require_part_number_for_released_objects=None, only_admins_can_edit_properties_of_released_objects=None, only_admins_can_delete_documents_containing_released_objects=None, only_admins_can_approve_releases=None, require_parts_and_subassemblies_release_with_assembly=None, require_parts_and_subassemblies_release_with_drawing=None, require_base_part_release_with_derived_part=None, require_image_release_with_drawing=None, action_show_drawings_watermark=None, hide_watermark_for_not_rev_managed=None, prevent_duplicate_document_name_regex=None, error_on_feature_list_errors_during_release=None, error_on_rollback_bar_not_at_end_during_release=None, error_on_assembly_tree_errors_during_release=None, error_on_pending_context_edits_during_release=None, error_on_pending_drawing_update_during_release=None, error_on_pending_dangling_drawing_objects_during_release=None, approver_required_during_release=None, note_required_during_release=None, require_all_approvers=None, allow_release_items_from_other_documents=None, automatically_obsolete_previous_released_revisions=None, part_numbering_scheme_id=None, require_peer_review=None, drawing_can_duplicate_part_number=None, enabled_active_multiple_workflows=None, only_admins_can_mark_objects_as_not_revision_managed=None, use_company_features_toolbar=None):  # noqa: E501
        """BTCompanyPoliciesParams - a model defined in OpenAPI"""  # noqa: E501

        self._require_totp = None
        self._use_light_ui = None
        self._integrations = None
        self._require_approved_drawing_templates = None
        self._approved_drawing_templates_document_id = None
        self._add_company_owned_libraries_in_user_account = None
        self._release_workflow_id = None
        self._obsoletion_workflow_id = None
        self._revision_scheme_id = None
        self._require_revision_for_released_objects = None
        self._require_part_number_for_released_objects = None
        self._only_admins_can_edit_properties_of_released_objects = None
        self._only_admins_can_delete_documents_containing_released_objects = None
        self._only_admins_can_approve_releases = None
        self._require_parts_and_subassemblies_release_with_assembly = None
        self._require_parts_and_subassemblies_release_with_drawing = None
        self._require_base_part_release_with_derived_part = None
        self._require_image_release_with_drawing = None
        self._action_show_drawings_watermark = None
        self._hide_watermark_for_not_rev_managed = None
        self._prevent_duplicate_document_name_regex = None
        self._error_on_feature_list_errors_during_release = None
        self._error_on_rollback_bar_not_at_end_during_release = None
        self._error_on_assembly_tree_errors_during_release = None
        self._error_on_pending_context_edits_during_release = None
        self._error_on_pending_drawing_update_during_release = None
        self._error_on_pending_dangling_drawing_objects_during_release = None
        self._approver_required_during_release = None
        self._note_required_during_release = None
        self._require_all_approvers = None
        self._allow_release_items_from_other_documents = None
        self._automatically_obsolete_previous_released_revisions = None
        self._part_numbering_scheme_id = None
        self._require_peer_review = None
        self._drawing_can_duplicate_part_number = None
        self._enabled_active_multiple_workflows = None
        self._only_admins_can_mark_objects_as_not_revision_managed = None
        self._use_company_features_toolbar = None
        self.discriminator = None

        if require_totp is not None:
            self.require_totp = require_totp
        if use_light_ui is not None:
            self.use_light_ui = use_light_ui
        if integrations is not None:
            self.integrations = integrations
        if require_approved_drawing_templates is not None:
            self.require_approved_drawing_templates = require_approved_drawing_templates
        if approved_drawing_templates_document_id is not None:
            self.approved_drawing_templates_document_id = approved_drawing_templates_document_id
        if add_company_owned_libraries_in_user_account is not None:
            self.add_company_owned_libraries_in_user_account = add_company_owned_libraries_in_user_account
        if release_workflow_id is not None:
            self.release_workflow_id = release_workflow_id
        if obsoletion_workflow_id is not None:
            self.obsoletion_workflow_id = obsoletion_workflow_id
        if revision_scheme_id is not None:
            self.revision_scheme_id = revision_scheme_id
        if require_revision_for_released_objects is not None:
            self.require_revision_for_released_objects = require_revision_for_released_objects
        if require_part_number_for_released_objects is not None:
            self.require_part_number_for_released_objects = require_part_number_for_released_objects
        if only_admins_can_edit_properties_of_released_objects is not None:
            self.only_admins_can_edit_properties_of_released_objects = only_admins_can_edit_properties_of_released_objects
        if only_admins_can_delete_documents_containing_released_objects is not None:
            self.only_admins_can_delete_documents_containing_released_objects = only_admins_can_delete_documents_containing_released_objects
        if only_admins_can_approve_releases is not None:
            self.only_admins_can_approve_releases = only_admins_can_approve_releases
        if require_parts_and_subassemblies_release_with_assembly is not None:
            self.require_parts_and_subassemblies_release_with_assembly = require_parts_and_subassemblies_release_with_assembly
        if require_parts_and_subassemblies_release_with_drawing is not None:
            self.require_parts_and_subassemblies_release_with_drawing = require_parts_and_subassemblies_release_with_drawing
        if require_base_part_release_with_derived_part is not None:
            self.require_base_part_release_with_derived_part = require_base_part_release_with_derived_part
        if require_image_release_with_drawing is not None:
            self.require_image_release_with_drawing = require_image_release_with_drawing
        if action_show_drawings_watermark is not None:
            self.action_show_drawings_watermark = action_show_drawings_watermark
        if hide_watermark_for_not_rev_managed is not None:
            self.hide_watermark_for_not_rev_managed = hide_watermark_for_not_rev_managed
        if prevent_duplicate_document_name_regex is not None:
            self.prevent_duplicate_document_name_regex = prevent_duplicate_document_name_regex
        if error_on_feature_list_errors_during_release is not None:
            self.error_on_feature_list_errors_during_release = error_on_feature_list_errors_during_release
        if error_on_rollback_bar_not_at_end_during_release is not None:
            self.error_on_rollback_bar_not_at_end_during_release = error_on_rollback_bar_not_at_end_during_release
        if error_on_assembly_tree_errors_during_release is not None:
            self.error_on_assembly_tree_errors_during_release = error_on_assembly_tree_errors_during_release
        if error_on_pending_context_edits_during_release is not None:
            self.error_on_pending_context_edits_during_release = error_on_pending_context_edits_during_release
        if error_on_pending_drawing_update_during_release is not None:
            self.error_on_pending_drawing_update_during_release = error_on_pending_drawing_update_during_release
        if error_on_pending_dangling_drawing_objects_during_release is not None:
            self.error_on_pending_dangling_drawing_objects_during_release = error_on_pending_dangling_drawing_objects_during_release
        if approver_required_during_release is not None:
            self.approver_required_during_release = approver_required_during_release
        if note_required_during_release is not None:
            self.note_required_during_release = note_required_during_release
        if require_all_approvers is not None:
            self.require_all_approvers = require_all_approvers
        if allow_release_items_from_other_documents is not None:
            self.allow_release_items_from_other_documents = allow_release_items_from_other_documents
        if automatically_obsolete_previous_released_revisions is not None:
            self.automatically_obsolete_previous_released_revisions = automatically_obsolete_previous_released_revisions
        if part_numbering_scheme_id is not None:
            self.part_numbering_scheme_id = part_numbering_scheme_id
        if require_peer_review is not None:
            self.require_peer_review = require_peer_review
        if drawing_can_duplicate_part_number is not None:
            self.drawing_can_duplicate_part_number = drawing_can_duplicate_part_number
        if enabled_active_multiple_workflows is not None:
            self.enabled_active_multiple_workflows = enabled_active_multiple_workflows
        if only_admins_can_mark_objects_as_not_revision_managed is not None:
            self.only_admins_can_mark_objects_as_not_revision_managed = only_admins_can_mark_objects_as_not_revision_managed
        if use_company_features_toolbar is not None:
            self.use_company_features_toolbar = use_company_features_toolbar

    @property
    def require_totp(self):
        """Gets the require_totp of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_totp of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_totp

    @require_totp.setter
    def require_totp(self, require_totp):
        """Sets the require_totp of this BTCompanyPoliciesParams.


        :param require_totp: The require_totp of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_totp = require_totp

    @property
    def use_light_ui(self):
        """Gets the use_light_ui of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The use_light_ui of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._use_light_ui

    @use_light_ui.setter
    def use_light_ui(self, use_light_ui):
        """Sets the use_light_ui of this BTCompanyPoliciesParams.


        :param use_light_ui: The use_light_ui of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._use_light_ui = use_light_ui

    @property
    def integrations(self):
        """Gets the integrations of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The integrations of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: IntegrationsParams
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this BTCompanyPoliciesParams.


        :param integrations: The integrations of this BTCompanyPoliciesParams.  # noqa: E501
        :type: IntegrationsParams
        """

        self._integrations = integrations

    @property
    def require_approved_drawing_templates(self):
        """Gets the require_approved_drawing_templates of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_approved_drawing_templates of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_approved_drawing_templates

    @require_approved_drawing_templates.setter
    def require_approved_drawing_templates(self, require_approved_drawing_templates):
        """Sets the require_approved_drawing_templates of this BTCompanyPoliciesParams.


        :param require_approved_drawing_templates: The require_approved_drawing_templates of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_approved_drawing_templates = require_approved_drawing_templates

    @property
    def approved_drawing_templates_document_id(self):
        """Gets the approved_drawing_templates_document_id of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The approved_drawing_templates_document_id of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: str
        """
        return self._approved_drawing_templates_document_id

    @approved_drawing_templates_document_id.setter
    def approved_drawing_templates_document_id(self, approved_drawing_templates_document_id):
        """Sets the approved_drawing_templates_document_id of this BTCompanyPoliciesParams.


        :param approved_drawing_templates_document_id: The approved_drawing_templates_document_id of this BTCompanyPoliciesParams.  # noqa: E501
        :type: str
        """

        self._approved_drawing_templates_document_id = approved_drawing_templates_document_id

    @property
    def add_company_owned_libraries_in_user_account(self):
        """Gets the add_company_owned_libraries_in_user_account of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The add_company_owned_libraries_in_user_account of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._add_company_owned_libraries_in_user_account

    @add_company_owned_libraries_in_user_account.setter
    def add_company_owned_libraries_in_user_account(self, add_company_owned_libraries_in_user_account):
        """Sets the add_company_owned_libraries_in_user_account of this BTCompanyPoliciesParams.


        :param add_company_owned_libraries_in_user_account: The add_company_owned_libraries_in_user_account of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._add_company_owned_libraries_in_user_account = add_company_owned_libraries_in_user_account

    @property
    def release_workflow_id(self):
        """Gets the release_workflow_id of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The release_workflow_id of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: str
        """
        return self._release_workflow_id

    @release_workflow_id.setter
    def release_workflow_id(self, release_workflow_id):
        """Sets the release_workflow_id of this BTCompanyPoliciesParams.


        :param release_workflow_id: The release_workflow_id of this BTCompanyPoliciesParams.  # noqa: E501
        :type: str
        """

        self._release_workflow_id = release_workflow_id

    @property
    def obsoletion_workflow_id(self):
        """Gets the obsoletion_workflow_id of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The obsoletion_workflow_id of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: str
        """
        return self._obsoletion_workflow_id

    @obsoletion_workflow_id.setter
    def obsoletion_workflow_id(self, obsoletion_workflow_id):
        """Sets the obsoletion_workflow_id of this BTCompanyPoliciesParams.


        :param obsoletion_workflow_id: The obsoletion_workflow_id of this BTCompanyPoliciesParams.  # noqa: E501
        :type: str
        """

        self._obsoletion_workflow_id = obsoletion_workflow_id

    @property
    def revision_scheme_id(self):
        """Gets the revision_scheme_id of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The revision_scheme_id of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: str
        """
        return self._revision_scheme_id

    @revision_scheme_id.setter
    def revision_scheme_id(self, revision_scheme_id):
        """Sets the revision_scheme_id of this BTCompanyPoliciesParams.


        :param revision_scheme_id: The revision_scheme_id of this BTCompanyPoliciesParams.  # noqa: E501
        :type: str
        """

        self._revision_scheme_id = revision_scheme_id

    @property
    def require_revision_for_released_objects(self):
        """Gets the require_revision_for_released_objects of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_revision_for_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_revision_for_released_objects

    @require_revision_for_released_objects.setter
    def require_revision_for_released_objects(self, require_revision_for_released_objects):
        """Sets the require_revision_for_released_objects of this BTCompanyPoliciesParams.


        :param require_revision_for_released_objects: The require_revision_for_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_revision_for_released_objects = require_revision_for_released_objects

    @property
    def require_part_number_for_released_objects(self):
        """Gets the require_part_number_for_released_objects of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_part_number_for_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_part_number_for_released_objects

    @require_part_number_for_released_objects.setter
    def require_part_number_for_released_objects(self, require_part_number_for_released_objects):
        """Sets the require_part_number_for_released_objects of this BTCompanyPoliciesParams.


        :param require_part_number_for_released_objects: The require_part_number_for_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_part_number_for_released_objects = require_part_number_for_released_objects

    @property
    def only_admins_can_edit_properties_of_released_objects(self):
        """Gets the only_admins_can_edit_properties_of_released_objects of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The only_admins_can_edit_properties_of_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_can_edit_properties_of_released_objects

    @only_admins_can_edit_properties_of_released_objects.setter
    def only_admins_can_edit_properties_of_released_objects(self, only_admins_can_edit_properties_of_released_objects):
        """Sets the only_admins_can_edit_properties_of_released_objects of this BTCompanyPoliciesParams.


        :param only_admins_can_edit_properties_of_released_objects: The only_admins_can_edit_properties_of_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._only_admins_can_edit_properties_of_released_objects = only_admins_can_edit_properties_of_released_objects

    @property
    def only_admins_can_delete_documents_containing_released_objects(self):
        """Gets the only_admins_can_delete_documents_containing_released_objects of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The only_admins_can_delete_documents_containing_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_can_delete_documents_containing_released_objects

    @only_admins_can_delete_documents_containing_released_objects.setter
    def only_admins_can_delete_documents_containing_released_objects(self, only_admins_can_delete_documents_containing_released_objects):
        """Sets the only_admins_can_delete_documents_containing_released_objects of this BTCompanyPoliciesParams.


        :param only_admins_can_delete_documents_containing_released_objects: The only_admins_can_delete_documents_containing_released_objects of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._only_admins_can_delete_documents_containing_released_objects = only_admins_can_delete_documents_containing_released_objects

    @property
    def only_admins_can_approve_releases(self):
        """Gets the only_admins_can_approve_releases of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The only_admins_can_approve_releases of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_can_approve_releases

    @only_admins_can_approve_releases.setter
    def only_admins_can_approve_releases(self, only_admins_can_approve_releases):
        """Sets the only_admins_can_approve_releases of this BTCompanyPoliciesParams.


        :param only_admins_can_approve_releases: The only_admins_can_approve_releases of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._only_admins_can_approve_releases = only_admins_can_approve_releases

    @property
    def require_parts_and_subassemblies_release_with_assembly(self):
        """Gets the require_parts_and_subassemblies_release_with_assembly of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_parts_and_subassemblies_release_with_assembly of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_parts_and_subassemblies_release_with_assembly

    @require_parts_and_subassemblies_release_with_assembly.setter
    def require_parts_and_subassemblies_release_with_assembly(self, require_parts_and_subassemblies_release_with_assembly):
        """Sets the require_parts_and_subassemblies_release_with_assembly of this BTCompanyPoliciesParams.


        :param require_parts_and_subassemblies_release_with_assembly: The require_parts_and_subassemblies_release_with_assembly of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_parts_and_subassemblies_release_with_assembly = require_parts_and_subassemblies_release_with_assembly

    @property
    def require_parts_and_subassemblies_release_with_drawing(self):
        """Gets the require_parts_and_subassemblies_release_with_drawing of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_parts_and_subassemblies_release_with_drawing of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_parts_and_subassemblies_release_with_drawing

    @require_parts_and_subassemblies_release_with_drawing.setter
    def require_parts_and_subassemblies_release_with_drawing(self, require_parts_and_subassemblies_release_with_drawing):
        """Sets the require_parts_and_subassemblies_release_with_drawing of this BTCompanyPoliciesParams.


        :param require_parts_and_subassemblies_release_with_drawing: The require_parts_and_subassemblies_release_with_drawing of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_parts_and_subassemblies_release_with_drawing = require_parts_and_subassemblies_release_with_drawing

    @property
    def require_base_part_release_with_derived_part(self):
        """Gets the require_base_part_release_with_derived_part of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_base_part_release_with_derived_part of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_base_part_release_with_derived_part

    @require_base_part_release_with_derived_part.setter
    def require_base_part_release_with_derived_part(self, require_base_part_release_with_derived_part):
        """Sets the require_base_part_release_with_derived_part of this BTCompanyPoliciesParams.


        :param require_base_part_release_with_derived_part: The require_base_part_release_with_derived_part of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_base_part_release_with_derived_part = require_base_part_release_with_derived_part

    @property
    def require_image_release_with_drawing(self):
        """Gets the require_image_release_with_drawing of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_image_release_with_drawing of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_image_release_with_drawing

    @require_image_release_with_drawing.setter
    def require_image_release_with_drawing(self, require_image_release_with_drawing):
        """Sets the require_image_release_with_drawing of this BTCompanyPoliciesParams.


        :param require_image_release_with_drawing: The require_image_release_with_drawing of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_image_release_with_drawing = require_image_release_with_drawing

    @property
    def action_show_drawings_watermark(self):
        """Gets the action_show_drawings_watermark of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The action_show_drawings_watermark of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._action_show_drawings_watermark

    @action_show_drawings_watermark.setter
    def action_show_drawings_watermark(self, action_show_drawings_watermark):
        """Sets the action_show_drawings_watermark of this BTCompanyPoliciesParams.


        :param action_show_drawings_watermark: The action_show_drawings_watermark of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._action_show_drawings_watermark = action_show_drawings_watermark

    @property
    def hide_watermark_for_not_rev_managed(self):
        """Gets the hide_watermark_for_not_rev_managed of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The hide_watermark_for_not_rev_managed of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._hide_watermark_for_not_rev_managed

    @hide_watermark_for_not_rev_managed.setter
    def hide_watermark_for_not_rev_managed(self, hide_watermark_for_not_rev_managed):
        """Sets the hide_watermark_for_not_rev_managed of this BTCompanyPoliciesParams.


        :param hide_watermark_for_not_rev_managed: The hide_watermark_for_not_rev_managed of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._hide_watermark_for_not_rev_managed = hide_watermark_for_not_rev_managed

    @property
    def prevent_duplicate_document_name_regex(self):
        """Gets the prevent_duplicate_document_name_regex of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The prevent_duplicate_document_name_regex of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: str
        """
        return self._prevent_duplicate_document_name_regex

    @prevent_duplicate_document_name_regex.setter
    def prevent_duplicate_document_name_regex(self, prevent_duplicate_document_name_regex):
        """Sets the prevent_duplicate_document_name_regex of this BTCompanyPoliciesParams.


        :param prevent_duplicate_document_name_regex: The prevent_duplicate_document_name_regex of this BTCompanyPoliciesParams.  # noqa: E501
        :type: str
        """

        self._prevent_duplicate_document_name_regex = prevent_duplicate_document_name_regex

    @property
    def error_on_feature_list_errors_during_release(self):
        """Gets the error_on_feature_list_errors_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The error_on_feature_list_errors_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_feature_list_errors_during_release

    @error_on_feature_list_errors_during_release.setter
    def error_on_feature_list_errors_during_release(self, error_on_feature_list_errors_during_release):
        """Sets the error_on_feature_list_errors_during_release of this BTCompanyPoliciesParams.


        :param error_on_feature_list_errors_during_release: The error_on_feature_list_errors_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._error_on_feature_list_errors_during_release = error_on_feature_list_errors_during_release

    @property
    def error_on_rollback_bar_not_at_end_during_release(self):
        """Gets the error_on_rollback_bar_not_at_end_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The error_on_rollback_bar_not_at_end_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_rollback_bar_not_at_end_during_release

    @error_on_rollback_bar_not_at_end_during_release.setter
    def error_on_rollback_bar_not_at_end_during_release(self, error_on_rollback_bar_not_at_end_during_release):
        """Sets the error_on_rollback_bar_not_at_end_during_release of this BTCompanyPoliciesParams.


        :param error_on_rollback_bar_not_at_end_during_release: The error_on_rollback_bar_not_at_end_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._error_on_rollback_bar_not_at_end_during_release = error_on_rollback_bar_not_at_end_during_release

    @property
    def error_on_assembly_tree_errors_during_release(self):
        """Gets the error_on_assembly_tree_errors_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The error_on_assembly_tree_errors_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_assembly_tree_errors_during_release

    @error_on_assembly_tree_errors_during_release.setter
    def error_on_assembly_tree_errors_during_release(self, error_on_assembly_tree_errors_during_release):
        """Sets the error_on_assembly_tree_errors_during_release of this BTCompanyPoliciesParams.


        :param error_on_assembly_tree_errors_during_release: The error_on_assembly_tree_errors_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._error_on_assembly_tree_errors_during_release = error_on_assembly_tree_errors_during_release

    @property
    def error_on_pending_context_edits_during_release(self):
        """Gets the error_on_pending_context_edits_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The error_on_pending_context_edits_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_pending_context_edits_during_release

    @error_on_pending_context_edits_during_release.setter
    def error_on_pending_context_edits_during_release(self, error_on_pending_context_edits_during_release):
        """Sets the error_on_pending_context_edits_during_release of this BTCompanyPoliciesParams.


        :param error_on_pending_context_edits_during_release: The error_on_pending_context_edits_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._error_on_pending_context_edits_during_release = error_on_pending_context_edits_during_release

    @property
    def error_on_pending_drawing_update_during_release(self):
        """Gets the error_on_pending_drawing_update_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The error_on_pending_drawing_update_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_pending_drawing_update_during_release

    @error_on_pending_drawing_update_during_release.setter
    def error_on_pending_drawing_update_during_release(self, error_on_pending_drawing_update_during_release):
        """Sets the error_on_pending_drawing_update_during_release of this BTCompanyPoliciesParams.


        :param error_on_pending_drawing_update_during_release: The error_on_pending_drawing_update_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._error_on_pending_drawing_update_during_release = error_on_pending_drawing_update_during_release

    @property
    def error_on_pending_dangling_drawing_objects_during_release(self):
        """Gets the error_on_pending_dangling_drawing_objects_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The error_on_pending_dangling_drawing_objects_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_pending_dangling_drawing_objects_during_release

    @error_on_pending_dangling_drawing_objects_during_release.setter
    def error_on_pending_dangling_drawing_objects_during_release(self, error_on_pending_dangling_drawing_objects_during_release):
        """Sets the error_on_pending_dangling_drawing_objects_during_release of this BTCompanyPoliciesParams.


        :param error_on_pending_dangling_drawing_objects_during_release: The error_on_pending_dangling_drawing_objects_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._error_on_pending_dangling_drawing_objects_during_release = error_on_pending_dangling_drawing_objects_during_release

    @property
    def approver_required_during_release(self):
        """Gets the approver_required_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The approver_required_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._approver_required_during_release

    @approver_required_during_release.setter
    def approver_required_during_release(self, approver_required_during_release):
        """Sets the approver_required_during_release of this BTCompanyPoliciesParams.


        :param approver_required_during_release: The approver_required_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._approver_required_during_release = approver_required_during_release

    @property
    def note_required_during_release(self):
        """Gets the note_required_during_release of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The note_required_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._note_required_during_release

    @note_required_during_release.setter
    def note_required_during_release(self, note_required_during_release):
        """Sets the note_required_during_release of this BTCompanyPoliciesParams.


        :param note_required_during_release: The note_required_during_release of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._note_required_during_release = note_required_during_release

    @property
    def require_all_approvers(self):
        """Gets the require_all_approvers of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_all_approvers of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_all_approvers

    @require_all_approvers.setter
    def require_all_approvers(self, require_all_approvers):
        """Sets the require_all_approvers of this BTCompanyPoliciesParams.


        :param require_all_approvers: The require_all_approvers of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_all_approvers = require_all_approvers

    @property
    def allow_release_items_from_other_documents(self):
        """Gets the allow_release_items_from_other_documents of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The allow_release_items_from_other_documents of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._allow_release_items_from_other_documents

    @allow_release_items_from_other_documents.setter
    def allow_release_items_from_other_documents(self, allow_release_items_from_other_documents):
        """Sets the allow_release_items_from_other_documents of this BTCompanyPoliciesParams.


        :param allow_release_items_from_other_documents: The allow_release_items_from_other_documents of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._allow_release_items_from_other_documents = allow_release_items_from_other_documents

    @property
    def automatically_obsolete_previous_released_revisions(self):
        """Gets the automatically_obsolete_previous_released_revisions of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The automatically_obsolete_previous_released_revisions of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_obsolete_previous_released_revisions

    @automatically_obsolete_previous_released_revisions.setter
    def automatically_obsolete_previous_released_revisions(self, automatically_obsolete_previous_released_revisions):
        """Sets the automatically_obsolete_previous_released_revisions of this BTCompanyPoliciesParams.


        :param automatically_obsolete_previous_released_revisions: The automatically_obsolete_previous_released_revisions of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._automatically_obsolete_previous_released_revisions = automatically_obsolete_previous_released_revisions

    @property
    def part_numbering_scheme_id(self):
        """Gets the part_numbering_scheme_id of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The part_numbering_scheme_id of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: str
        """
        return self._part_numbering_scheme_id

    @part_numbering_scheme_id.setter
    def part_numbering_scheme_id(self, part_numbering_scheme_id):
        """Sets the part_numbering_scheme_id of this BTCompanyPoliciesParams.


        :param part_numbering_scheme_id: The part_numbering_scheme_id of this BTCompanyPoliciesParams.  # noqa: E501
        :type: str
        """

        self._part_numbering_scheme_id = part_numbering_scheme_id

    @property
    def require_peer_review(self):
        """Gets the require_peer_review of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The require_peer_review of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_peer_review

    @require_peer_review.setter
    def require_peer_review(self, require_peer_review):
        """Sets the require_peer_review of this BTCompanyPoliciesParams.


        :param require_peer_review: The require_peer_review of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._require_peer_review = require_peer_review

    @property
    def drawing_can_duplicate_part_number(self):
        """Gets the drawing_can_duplicate_part_number of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The drawing_can_duplicate_part_number of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._drawing_can_duplicate_part_number

    @drawing_can_duplicate_part_number.setter
    def drawing_can_duplicate_part_number(self, drawing_can_duplicate_part_number):
        """Sets the drawing_can_duplicate_part_number of this BTCompanyPoliciesParams.


        :param drawing_can_duplicate_part_number: The drawing_can_duplicate_part_number of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._drawing_can_duplicate_part_number = drawing_can_duplicate_part_number

    @property
    def enabled_active_multiple_workflows(self):
        """Gets the enabled_active_multiple_workflows of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The enabled_active_multiple_workflows of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._enabled_active_multiple_workflows

    @enabled_active_multiple_workflows.setter
    def enabled_active_multiple_workflows(self, enabled_active_multiple_workflows):
        """Sets the enabled_active_multiple_workflows of this BTCompanyPoliciesParams.


        :param enabled_active_multiple_workflows: The enabled_active_multiple_workflows of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._enabled_active_multiple_workflows = enabled_active_multiple_workflows

    @property
    def only_admins_can_mark_objects_as_not_revision_managed(self):
        """Gets the only_admins_can_mark_objects_as_not_revision_managed of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The only_admins_can_mark_objects_as_not_revision_managed of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_can_mark_objects_as_not_revision_managed

    @only_admins_can_mark_objects_as_not_revision_managed.setter
    def only_admins_can_mark_objects_as_not_revision_managed(self, only_admins_can_mark_objects_as_not_revision_managed):
        """Sets the only_admins_can_mark_objects_as_not_revision_managed of this BTCompanyPoliciesParams.


        :param only_admins_can_mark_objects_as_not_revision_managed: The only_admins_can_mark_objects_as_not_revision_managed of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._only_admins_can_mark_objects_as_not_revision_managed = only_admins_can_mark_objects_as_not_revision_managed

    @property
    def use_company_features_toolbar(self):
        """Gets the use_company_features_toolbar of this BTCompanyPoliciesParams.  # noqa: E501


        :return: The use_company_features_toolbar of this BTCompanyPoliciesParams.  # noqa: E501
        :rtype: bool
        """
        return self._use_company_features_toolbar

    @use_company_features_toolbar.setter
    def use_company_features_toolbar(self, use_company_features_toolbar):
        """Sets the use_company_features_toolbar of this BTCompanyPoliciesParams.


        :param use_company_features_toolbar: The use_company_features_toolbar of this BTCompanyPoliciesParams.  # noqa: E501
        :type: bool
        """

        self._use_company_features_toolbar = use_company_features_toolbar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTCompanyPoliciesParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
