# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTDrawingParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'workspace_id': 'str',
        'element_id': 'str',
        'document_id': 'str',
        'part_number': 'str',
        'revision': 'str',
        'part_query': 'str',
        'part_id': 'str',
        'element_microversion_id': 'str',
        'sketch_ids': 'list[str]',
        'quality_option': 'str',
        'views': 'str',
        'compute_intersection': 'bool',
        'simplification_option': 'str',
        'simplification_threshold': 'float',
        'show_cut_geom_only': 'bool',
        'document_microversion_id': 'str',
        'hidden_lines': 'str',
        'include_surfaces': 'bool',
        'is_surface': 'bool',
        'pure_sketch': 'bool',
        'is_sketch_only': 'bool',
        'template_version_id': 'str',
        'model_type': 'str',
        'border': 'bool',
        'external_document_id': 'str',
        'external_document_version_id': 'str',
        'element_configuration': 'str',
        'template_document_id': 'str',
        'template_workspace_id': 'str',
        'template_name': 'str',
        'template_args': 'list[str]',
        'template_element_id': 'str',
        'drawing_name': 'str',
        'projection': 'str',
        'standard': 'str',
        'titleblock': 'bool',
        'number_horizontal_zones': 'int',
        'number_vertical_zones': 'int',
        'start_zones': 'str',
        'is_flattened_part': 'bool',
        'reference_type_enum': 'str',
        'reference_type': 'int',
        'location': 'BTElementLocationParams',
        'size': 'str',
        'language': 'str',
        'units': 'str',
        'decimal_separator': 'str'
    }

    attribute_map = {
        'workspace_id': 'workspaceId',
        'element_id': 'elementId',
        'document_id': 'documentId',
        'part_number': 'partNumber',
        'revision': 'revision',
        'part_query': 'partQuery',
        'part_id': 'partId',
        'element_microversion_id': 'elementMicroversionId',
        'sketch_ids': 'sketchIds',
        'quality_option': 'qualityOption',
        'views': 'views',
        'compute_intersection': 'computeIntersection',
        'simplification_option': 'simplificationOption',
        'simplification_threshold': 'simplificationThreshold',
        'show_cut_geom_only': 'showCutGeomOnly',
        'document_microversion_id': 'documentMicroversionId',
        'hidden_lines': 'hiddenLines',
        'include_surfaces': 'includeSurfaces',
        'is_surface': 'isSurface',
        'pure_sketch': 'pureSketch',
        'is_sketch_only': 'isSketchOnly',
        'template_version_id': 'templateVersionId',
        'model_type': 'modelType',
        'border': 'border',
        'external_document_id': 'externalDocumentId',
        'external_document_version_id': 'externalDocumentVersionId',
        'element_configuration': 'elementConfiguration',
        'template_document_id': 'templateDocumentId',
        'template_workspace_id': 'templateWorkspaceId',
        'template_name': 'templateName',
        'template_args': 'templateArgs',
        'template_element_id': 'templateElementId',
        'drawing_name': 'drawingName',
        'projection': 'projection',
        'standard': 'standard',
        'titleblock': 'titleblock',
        'number_horizontal_zones': 'numberHorizontalZones',
        'number_vertical_zones': 'numberVerticalZones',
        'start_zones': 'startZones',
        'is_flattened_part': 'isFlattenedPart',
        'reference_type_enum': 'referenceTypeEnum',
        'reference_type': 'referenceType',
        'location': 'location',
        'size': 'size',
        'language': 'language',
        'units': 'units',
        'decimal_separator': 'decimalSeparator'
    }

    def __init__(self, workspace_id=None, element_id=None, document_id=None, part_number=None, revision=None, part_query=None, part_id=None, element_microversion_id=None, sketch_ids=None, quality_option=None, views=None, compute_intersection=None, simplification_option=None, simplification_threshold=None, show_cut_geom_only=None, document_microversion_id=None, hidden_lines=None, include_surfaces=None, is_surface=None, pure_sketch=None, is_sketch_only=None, template_version_id=None, model_type=None, border=None, external_document_id=None, external_document_version_id=None, element_configuration=None, template_document_id=None, template_workspace_id=None, template_name=None, template_args=None, template_element_id=None, drawing_name=None, projection=None, standard=None, titleblock=None, number_horizontal_zones=None, number_vertical_zones=None, start_zones=None, is_flattened_part=None, reference_type_enum=None, reference_type=None, location=None, size=None, language=None, units=None, decimal_separator=None):  # noqa: E501
        """BTDrawingParams - a model defined in OpenAPI"""  # noqa: E501

        self._workspace_id = None
        self._element_id = None
        self._document_id = None
        self._part_number = None
        self._revision = None
        self._part_query = None
        self._part_id = None
        self._element_microversion_id = None
        self._sketch_ids = None
        self._quality_option = None
        self._views = None
        self._compute_intersection = None
        self._simplification_option = None
        self._simplification_threshold = None
        self._show_cut_geom_only = None
        self._document_microversion_id = None
        self._hidden_lines = None
        self._include_surfaces = None
        self._is_surface = None
        self._pure_sketch = None
        self._is_sketch_only = None
        self._template_version_id = None
        self._model_type = None
        self._border = None
        self._external_document_id = None
        self._external_document_version_id = None
        self._element_configuration = None
        self._template_document_id = None
        self._template_workspace_id = None
        self._template_name = None
        self._template_args = None
        self._template_element_id = None
        self._drawing_name = None
        self._projection = None
        self._standard = None
        self._titleblock = None
        self._number_horizontal_zones = None
        self._number_vertical_zones = None
        self._start_zones = None
        self._is_flattened_part = None
        self._reference_type_enum = None
        self._reference_type = None
        self._location = None
        self._size = None
        self._language = None
        self._units = None
        self._decimal_separator = None
        self.discriminator = None

        if workspace_id is not None:
            self.workspace_id = workspace_id
        if element_id is not None:
            self.element_id = element_id
        if document_id is not None:
            self.document_id = document_id
        if part_number is not None:
            self.part_number = part_number
        if revision is not None:
            self.revision = revision
        if part_query is not None:
            self.part_query = part_query
        if part_id is not None:
            self.part_id = part_id
        if element_microversion_id is not None:
            self.element_microversion_id = element_microversion_id
        if sketch_ids is not None:
            self.sketch_ids = sketch_ids
        if quality_option is not None:
            self.quality_option = quality_option
        if views is not None:
            self.views = views
        if compute_intersection is not None:
            self.compute_intersection = compute_intersection
        if simplification_option is not None:
            self.simplification_option = simplification_option
        if simplification_threshold is not None:
            self.simplification_threshold = simplification_threshold
        if show_cut_geom_only is not None:
            self.show_cut_geom_only = show_cut_geom_only
        if document_microversion_id is not None:
            self.document_microversion_id = document_microversion_id
        if hidden_lines is not None:
            self.hidden_lines = hidden_lines
        if include_surfaces is not None:
            self.include_surfaces = include_surfaces
        if is_surface is not None:
            self.is_surface = is_surface
        if pure_sketch is not None:
            self.pure_sketch = pure_sketch
        if is_sketch_only is not None:
            self.is_sketch_only = is_sketch_only
        if template_version_id is not None:
            self.template_version_id = template_version_id
        if model_type is not None:
            self.model_type = model_type
        if border is not None:
            self.border = border
        if external_document_id is not None:
            self.external_document_id = external_document_id
        if external_document_version_id is not None:
            self.external_document_version_id = external_document_version_id
        if element_configuration is not None:
            self.element_configuration = element_configuration
        if template_document_id is not None:
            self.template_document_id = template_document_id
        if template_workspace_id is not None:
            self.template_workspace_id = template_workspace_id
        if template_name is not None:
            self.template_name = template_name
        if template_args is not None:
            self.template_args = template_args
        if template_element_id is not None:
            self.template_element_id = template_element_id
        if drawing_name is not None:
            self.drawing_name = drawing_name
        if projection is not None:
            self.projection = projection
        if standard is not None:
            self.standard = standard
        if titleblock is not None:
            self.titleblock = titleblock
        if number_horizontal_zones is not None:
            self.number_horizontal_zones = number_horizontal_zones
        if number_vertical_zones is not None:
            self.number_vertical_zones = number_vertical_zones
        if start_zones is not None:
            self.start_zones = start_zones
        if is_flattened_part is not None:
            self.is_flattened_part = is_flattened_part
        if reference_type_enum is not None:
            self.reference_type_enum = reference_type_enum
        if reference_type is not None:
            self.reference_type = reference_type
        if location is not None:
            self.location = location
        if size is not None:
            self.size = size
        if language is not None:
            self.language = language
        if units is not None:
            self.units = units
        if decimal_separator is not None:
            self.decimal_separator = decimal_separator

    @property
    def workspace_id(self):
        """Gets the workspace_id of this BTDrawingParams.  # noqa: E501


        :return: The workspace_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this BTDrawingParams.


        :param workspace_id: The workspace_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def element_id(self):
        """Gets the element_id of this BTDrawingParams.  # noqa: E501


        :return: The element_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this BTDrawingParams.


        :param element_id: The element_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def document_id(self):
        """Gets the document_id of this BTDrawingParams.  # noqa: E501


        :return: The document_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this BTDrawingParams.


        :param document_id: The document_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def part_number(self):
        """Gets the part_number of this BTDrawingParams.  # noqa: E501


        :return: The part_number of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this BTDrawingParams.


        :param part_number: The part_number of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def revision(self):
        """Gets the revision of this BTDrawingParams.  # noqa: E501


        :return: The revision of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this BTDrawingParams.


        :param revision: The revision of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def part_query(self):
        """Gets the part_query of this BTDrawingParams.  # noqa: E501


        :return: The part_query of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._part_query

    @part_query.setter
    def part_query(self, part_query):
        """Sets the part_query of this BTDrawingParams.


        :param part_query: The part_query of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._part_query = part_query

    @property
    def part_id(self):
        """Gets the part_id of this BTDrawingParams.  # noqa: E501


        :return: The part_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this BTDrawingParams.


        :param part_id: The part_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._part_id = part_id

    @property
    def element_microversion_id(self):
        """Gets the element_microversion_id of this BTDrawingParams.  # noqa: E501


        :return: The element_microversion_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._element_microversion_id

    @element_microversion_id.setter
    def element_microversion_id(self, element_microversion_id):
        """Sets the element_microversion_id of this BTDrawingParams.


        :param element_microversion_id: The element_microversion_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._element_microversion_id = element_microversion_id

    @property
    def sketch_ids(self):
        """Gets the sketch_ids of this BTDrawingParams.  # noqa: E501


        :return: The sketch_ids of this BTDrawingParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._sketch_ids

    @sketch_ids.setter
    def sketch_ids(self, sketch_ids):
        """Sets the sketch_ids of this BTDrawingParams.


        :param sketch_ids: The sketch_ids of this BTDrawingParams.  # noqa: E501
        :type: list[str]
        """

        self._sketch_ids = sketch_ids

    @property
    def quality_option(self):
        """Gets the quality_option of this BTDrawingParams.  # noqa: E501


        :return: The quality_option of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._quality_option

    @quality_option.setter
    def quality_option(self, quality_option):
        """Sets the quality_option of this BTDrawingParams.


        :param quality_option: The quality_option of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._quality_option = quality_option

    @property
    def views(self):
        """Gets the views of this BTDrawingParams.  # noqa: E501


        :return: The views of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this BTDrawingParams.


        :param views: The views of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._views = views

    @property
    def compute_intersection(self):
        """Gets the compute_intersection of this BTDrawingParams.  # noqa: E501


        :return: The compute_intersection of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._compute_intersection

    @compute_intersection.setter
    def compute_intersection(self, compute_intersection):
        """Sets the compute_intersection of this BTDrawingParams.


        :param compute_intersection: The compute_intersection of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._compute_intersection = compute_intersection

    @property
    def simplification_option(self):
        """Gets the simplification_option of this BTDrawingParams.  # noqa: E501


        :return: The simplification_option of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._simplification_option

    @simplification_option.setter
    def simplification_option(self, simplification_option):
        """Sets the simplification_option of this BTDrawingParams.


        :param simplification_option: The simplification_option of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._simplification_option = simplification_option

    @property
    def simplification_threshold(self):
        """Gets the simplification_threshold of this BTDrawingParams.  # noqa: E501


        :return: The simplification_threshold of this BTDrawingParams.  # noqa: E501
        :rtype: float
        """
        return self._simplification_threshold

    @simplification_threshold.setter
    def simplification_threshold(self, simplification_threshold):
        """Sets the simplification_threshold of this BTDrawingParams.


        :param simplification_threshold: The simplification_threshold of this BTDrawingParams.  # noqa: E501
        :type: float
        """

        self._simplification_threshold = simplification_threshold

    @property
    def show_cut_geom_only(self):
        """Gets the show_cut_geom_only of this BTDrawingParams.  # noqa: E501


        :return: The show_cut_geom_only of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._show_cut_geom_only

    @show_cut_geom_only.setter
    def show_cut_geom_only(self, show_cut_geom_only):
        """Sets the show_cut_geom_only of this BTDrawingParams.


        :param show_cut_geom_only: The show_cut_geom_only of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._show_cut_geom_only = show_cut_geom_only

    @property
    def document_microversion_id(self):
        """Gets the document_microversion_id of this BTDrawingParams.  # noqa: E501


        :return: The document_microversion_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._document_microversion_id

    @document_microversion_id.setter
    def document_microversion_id(self, document_microversion_id):
        """Sets the document_microversion_id of this BTDrawingParams.


        :param document_microversion_id: The document_microversion_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._document_microversion_id = document_microversion_id

    @property
    def hidden_lines(self):
        """Gets the hidden_lines of this BTDrawingParams.  # noqa: E501


        :return: The hidden_lines of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._hidden_lines

    @hidden_lines.setter
    def hidden_lines(self, hidden_lines):
        """Sets the hidden_lines of this BTDrawingParams.


        :param hidden_lines: The hidden_lines of this BTDrawingParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["DRAFTING", "EXCLUDED", "MARKED"]  # noqa: E501
        if hidden_lines not in allowed_values:
            raise ValueError(
                "Invalid value for `hidden_lines` ({0}), must be one of {1}"  # noqa: E501
                .format(hidden_lines, allowed_values)
            )

        self._hidden_lines = hidden_lines

    @property
    def include_surfaces(self):
        """Gets the include_surfaces of this BTDrawingParams.  # noqa: E501


        :return: The include_surfaces of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_surfaces

    @include_surfaces.setter
    def include_surfaces(self, include_surfaces):
        """Sets the include_surfaces of this BTDrawingParams.


        :param include_surfaces: The include_surfaces of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._include_surfaces = include_surfaces

    @property
    def is_surface(self):
        """Gets the is_surface of this BTDrawingParams.  # noqa: E501


        :return: The is_surface of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_surface

    @is_surface.setter
    def is_surface(self, is_surface):
        """Sets the is_surface of this BTDrawingParams.


        :param is_surface: The is_surface of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._is_surface = is_surface

    @property
    def pure_sketch(self):
        """Gets the pure_sketch of this BTDrawingParams.  # noqa: E501


        :return: The pure_sketch of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._pure_sketch

    @pure_sketch.setter
    def pure_sketch(self, pure_sketch):
        """Sets the pure_sketch of this BTDrawingParams.


        :param pure_sketch: The pure_sketch of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._pure_sketch = pure_sketch

    @property
    def is_sketch_only(self):
        """Gets the is_sketch_only of this BTDrawingParams.  # noqa: E501


        :return: The is_sketch_only of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_sketch_only

    @is_sketch_only.setter
    def is_sketch_only(self, is_sketch_only):
        """Sets the is_sketch_only of this BTDrawingParams.


        :param is_sketch_only: The is_sketch_only of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._is_sketch_only = is_sketch_only

    @property
    def template_version_id(self):
        """Gets the template_version_id of this BTDrawingParams.  # noqa: E501


        :return: The template_version_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._template_version_id

    @template_version_id.setter
    def template_version_id(self, template_version_id):
        """Sets the template_version_id of this BTDrawingParams.


        :param template_version_id: The template_version_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._template_version_id = template_version_id

    @property
    def model_type(self):
        """Gets the model_type of this BTDrawingParams.  # noqa: E501


        :return: The model_type of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this BTDrawingParams.


        :param model_type: The model_type of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def border(self):
        """Gets the border of this BTDrawingParams.  # noqa: E501


        :return: The border of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._border

    @border.setter
    def border(self, border):
        """Sets the border of this BTDrawingParams.


        :param border: The border of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._border = border

    @property
    def external_document_id(self):
        """Gets the external_document_id of this BTDrawingParams.  # noqa: E501


        :return: The external_document_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._external_document_id

    @external_document_id.setter
    def external_document_id(self, external_document_id):
        """Sets the external_document_id of this BTDrawingParams.


        :param external_document_id: The external_document_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._external_document_id = external_document_id

    @property
    def external_document_version_id(self):
        """Gets the external_document_version_id of this BTDrawingParams.  # noqa: E501


        :return: The external_document_version_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._external_document_version_id

    @external_document_version_id.setter
    def external_document_version_id(self, external_document_version_id):
        """Sets the external_document_version_id of this BTDrawingParams.


        :param external_document_version_id: The external_document_version_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._external_document_version_id = external_document_version_id

    @property
    def element_configuration(self):
        """Gets the element_configuration of this BTDrawingParams.  # noqa: E501


        :return: The element_configuration of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._element_configuration

    @element_configuration.setter
    def element_configuration(self, element_configuration):
        """Sets the element_configuration of this BTDrawingParams.


        :param element_configuration: The element_configuration of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._element_configuration = element_configuration

    @property
    def template_document_id(self):
        """Gets the template_document_id of this BTDrawingParams.  # noqa: E501


        :return: The template_document_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._template_document_id

    @template_document_id.setter
    def template_document_id(self, template_document_id):
        """Sets the template_document_id of this BTDrawingParams.


        :param template_document_id: The template_document_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._template_document_id = template_document_id

    @property
    def template_workspace_id(self):
        """Gets the template_workspace_id of this BTDrawingParams.  # noqa: E501


        :return: The template_workspace_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._template_workspace_id

    @template_workspace_id.setter
    def template_workspace_id(self, template_workspace_id):
        """Sets the template_workspace_id of this BTDrawingParams.


        :param template_workspace_id: The template_workspace_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._template_workspace_id = template_workspace_id

    @property
    def template_name(self):
        """Gets the template_name of this BTDrawingParams.  # noqa: E501


        :return: The template_name of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this BTDrawingParams.


        :param template_name: The template_name of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def template_args(self):
        """Gets the template_args of this BTDrawingParams.  # noqa: E501


        :return: The template_args of this BTDrawingParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._template_args

    @template_args.setter
    def template_args(self, template_args):
        """Sets the template_args of this BTDrawingParams.


        :param template_args: The template_args of this BTDrawingParams.  # noqa: E501
        :type: list[str]
        """

        self._template_args = template_args

    @property
    def template_element_id(self):
        """Gets the template_element_id of this BTDrawingParams.  # noqa: E501


        :return: The template_element_id of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._template_element_id

    @template_element_id.setter
    def template_element_id(self, template_element_id):
        """Sets the template_element_id of this BTDrawingParams.


        :param template_element_id: The template_element_id of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._template_element_id = template_element_id

    @property
    def drawing_name(self):
        """Gets the drawing_name of this BTDrawingParams.  # noqa: E501


        :return: The drawing_name of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._drawing_name

    @drawing_name.setter
    def drawing_name(self, drawing_name):
        """Sets the drawing_name of this BTDrawingParams.


        :param drawing_name: The drawing_name of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._drawing_name = drawing_name

    @property
    def projection(self):
        """Gets the projection of this BTDrawingParams.  # noqa: E501


        :return: The projection of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this BTDrawingParams.


        :param projection: The projection of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._projection = projection

    @property
    def standard(self):
        """Gets the standard of this BTDrawingParams.  # noqa: E501


        :return: The standard of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this BTDrawingParams.


        :param standard: The standard of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._standard = standard

    @property
    def titleblock(self):
        """Gets the titleblock of this BTDrawingParams.  # noqa: E501


        :return: The titleblock of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._titleblock

    @titleblock.setter
    def titleblock(self, titleblock):
        """Sets the titleblock of this BTDrawingParams.


        :param titleblock: The titleblock of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._titleblock = titleblock

    @property
    def number_horizontal_zones(self):
        """Gets the number_horizontal_zones of this BTDrawingParams.  # noqa: E501


        :return: The number_horizontal_zones of this BTDrawingParams.  # noqa: E501
        :rtype: int
        """
        return self._number_horizontal_zones

    @number_horizontal_zones.setter
    def number_horizontal_zones(self, number_horizontal_zones):
        """Sets the number_horizontal_zones of this BTDrawingParams.


        :param number_horizontal_zones: The number_horizontal_zones of this BTDrawingParams.  # noqa: E501
        :type: int
        """

        self._number_horizontal_zones = number_horizontal_zones

    @property
    def number_vertical_zones(self):
        """Gets the number_vertical_zones of this BTDrawingParams.  # noqa: E501


        :return: The number_vertical_zones of this BTDrawingParams.  # noqa: E501
        :rtype: int
        """
        return self._number_vertical_zones

    @number_vertical_zones.setter
    def number_vertical_zones(self, number_vertical_zones):
        """Sets the number_vertical_zones of this BTDrawingParams.


        :param number_vertical_zones: The number_vertical_zones of this BTDrawingParams.  # noqa: E501
        :type: int
        """

        self._number_vertical_zones = number_vertical_zones

    @property
    def start_zones(self):
        """Gets the start_zones of this BTDrawingParams.  # noqa: E501


        :return: The start_zones of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._start_zones

    @start_zones.setter
    def start_zones(self, start_zones):
        """Sets the start_zones of this BTDrawingParams.


        :param start_zones: The start_zones of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._start_zones = start_zones

    @property
    def is_flattened_part(self):
        """Gets the is_flattened_part of this BTDrawingParams.  # noqa: E501


        :return: The is_flattened_part of this BTDrawingParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_flattened_part

    @is_flattened_part.setter
    def is_flattened_part(self, is_flattened_part):
        """Sets the is_flattened_part of this BTDrawingParams.


        :param is_flattened_part: The is_flattened_part of this BTDrawingParams.  # noqa: E501
        :type: bool
        """

        self._is_flattened_part = is_flattened_part

    @property
    def reference_type_enum(self):
        """Gets the reference_type_enum of this BTDrawingParams.  # noqa: E501


        :return: The reference_type_enum of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._reference_type_enum

    @reference_type_enum.setter
    def reference_type_enum(self, reference_type_enum):
        """Sets the reference_type_enum of this BTDrawingParams.


        :param reference_type_enum: The reference_type_enum of this BTDrawingParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "PARTSTUDIO", "ASSEMBLY", "PART", "FLATTENED_PART", "COMPOSITE_PART", "MESH_PART", "SURFACE", "SKETCH", "CURVE"]  # noqa: E501
        if reference_type_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_type_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(reference_type_enum, allowed_values)
            )

        self._reference_type_enum = reference_type_enum

    @property
    def reference_type(self):
        """Gets the reference_type of this BTDrawingParams.  # noqa: E501


        :return: The reference_type of this BTDrawingParams.  # noqa: E501
        :rtype: int
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this BTDrawingParams.


        :param reference_type: The reference_type of this BTDrawingParams.  # noqa: E501
        :type: int
        """

        self._reference_type = reference_type

    @property
    def location(self):
        """Gets the location of this BTDrawingParams.  # noqa: E501


        :return: The location of this BTDrawingParams.  # noqa: E501
        :rtype: BTElementLocationParams
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BTDrawingParams.


        :param location: The location of this BTDrawingParams.  # noqa: E501
        :type: BTElementLocationParams
        """

        self._location = location

    @property
    def size(self):
        """Gets the size of this BTDrawingParams.  # noqa: E501


        :return: The size of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BTDrawingParams.


        :param size: The size of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def language(self):
        """Gets the language of this BTDrawingParams.  # noqa: E501


        :return: The language of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this BTDrawingParams.


        :param language: The language of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def units(self):
        """Gets the units of this BTDrawingParams.  # noqa: E501


        :return: The units of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this BTDrawingParams.


        :param units: The units of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def decimal_separator(self):
        """Gets the decimal_separator of this BTDrawingParams.  # noqa: E501


        :return: The decimal_separator of this BTDrawingParams.  # noqa: E501
        :rtype: str
        """
        return self._decimal_separator

    @decimal_separator.setter
    def decimal_separator(self, decimal_separator):
        """Sets the decimal_separator of this BTDrawingParams.


        :param decimal_separator: The decimal_separator of this BTDrawingParams.  # noqa: E501
        :type: str
        """

        self._decimal_separator = decimal_separator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTDrawingParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
