# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTUserSettingsParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'substitute_approvers': 'list[BTSubstituteApproverParams]',
        'key_values': 'dict(str, str)',
        'value': 'str',
        'key': 'str',
        'id': 'str'
    }

    attribute_map = {
        'substitute_approvers': 'substituteApprovers',
        'key_values': 'keyValues',
        'value': 'value',
        'key': 'key',
        'id': 'id'
    }

    def __init__(self, substitute_approvers=None, key_values=None, value=None, key=None, id=None):  # noqa: E501
        """BTUserSettingsParams - a model defined in OpenAPI"""  # noqa: E501

        self._substitute_approvers = None
        self._key_values = None
        self._value = None
        self._key = None
        self._id = None
        self.discriminator = None

        if substitute_approvers is not None:
            self.substitute_approvers = substitute_approvers
        if key_values is not None:
            self.key_values = key_values
        if value is not None:
            self.value = value
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id

    @property
    def substitute_approvers(self):
        """Gets the substitute_approvers of this BTUserSettingsParams.  # noqa: E501


        :return: The substitute_approvers of this BTUserSettingsParams.  # noqa: E501
        :rtype: list[BTSubstituteApproverParams]
        """
        return self._substitute_approvers

    @substitute_approvers.setter
    def substitute_approvers(self, substitute_approvers):
        """Sets the substitute_approvers of this BTUserSettingsParams.


        :param substitute_approvers: The substitute_approvers of this BTUserSettingsParams.  # noqa: E501
        :type: list[BTSubstituteApproverParams]
        """

        self._substitute_approvers = substitute_approvers

    @property
    def key_values(self):
        """Gets the key_values of this BTUserSettingsParams.  # noqa: E501


        :return: The key_values of this BTUserSettingsParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._key_values

    @key_values.setter
    def key_values(self, key_values):
        """Sets the key_values of this BTUserSettingsParams.


        :param key_values: The key_values of this BTUserSettingsParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._key_values = key_values

    @property
    def value(self):
        """Gets the value of this BTUserSettingsParams.  # noqa: E501


        :return: The value of this BTUserSettingsParams.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BTUserSettingsParams.


        :param value: The value of this BTUserSettingsParams.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def key(self):
        """Gets the key of this BTUserSettingsParams.  # noqa: E501


        :return: The key of this BTUserSettingsParams.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this BTUserSettingsParams.


        :param key: The key of this BTUserSettingsParams.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this BTUserSettingsParams.  # noqa: E501


        :return: The id of this BTUserSettingsParams.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BTUserSettingsParams.


        :param id: The id of this BTUserSettingsParams.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTUserSettingsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
