# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTForeignItemInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'microversion_id': 'str',
        'foreign_id': 'str',
        'media_type': 'str',
        'filename': 'str',
        'file_size': 'int',
        'uploaded_at': 'datetime',
        'uploaded_by': 'str'
    }

    attribute_map = {
        'microversion_id': 'microversionId',
        'foreign_id': 'foreignId',
        'media_type': 'mediaType',
        'filename': 'filename',
        'file_size': 'fileSize',
        'uploaded_at': 'uploadedAt',
        'uploaded_by': 'uploadedBy'
    }

    def __init__(self, microversion_id=None, foreign_id=None, media_type=None, filename=None, file_size=None, uploaded_at=None, uploaded_by=None):  # noqa: E501
        """BTForeignItemInfo - a model defined in OpenAPI"""  # noqa: E501

        self._microversion_id = None
        self._foreign_id = None
        self._media_type = None
        self._filename = None
        self._file_size = None
        self._uploaded_at = None
        self._uploaded_by = None
        self.discriminator = None

        if microversion_id is not None:
            self.microversion_id = microversion_id
        if foreign_id is not None:
            self.foreign_id = foreign_id
        if media_type is not None:
            self.media_type = media_type
        if filename is not None:
            self.filename = filename
        if file_size is not None:
            self.file_size = file_size
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if uploaded_by is not None:
            self.uploaded_by = uploaded_by

    @property
    def microversion_id(self):
        """Gets the microversion_id of this BTForeignItemInfo.  # noqa: E501


        :return: The microversion_id of this BTForeignItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._microversion_id

    @microversion_id.setter
    def microversion_id(self, microversion_id):
        """Sets the microversion_id of this BTForeignItemInfo.


        :param microversion_id: The microversion_id of this BTForeignItemInfo.  # noqa: E501
        :type: str
        """

        self._microversion_id = microversion_id

    @property
    def foreign_id(self):
        """Gets the foreign_id of this BTForeignItemInfo.  # noqa: E501


        :return: The foreign_id of this BTForeignItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._foreign_id

    @foreign_id.setter
    def foreign_id(self, foreign_id):
        """Sets the foreign_id of this BTForeignItemInfo.


        :param foreign_id: The foreign_id of this BTForeignItemInfo.  # noqa: E501
        :type: str
        """

        self._foreign_id = foreign_id

    @property
    def media_type(self):
        """Gets the media_type of this BTForeignItemInfo.  # noqa: E501


        :return: The media_type of this BTForeignItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this BTForeignItemInfo.


        :param media_type: The media_type of this BTForeignItemInfo.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def filename(self):
        """Gets the filename of this BTForeignItemInfo.  # noqa: E501


        :return: The filename of this BTForeignItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this BTForeignItemInfo.


        :param filename: The filename of this BTForeignItemInfo.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def file_size(self):
        """Gets the file_size of this BTForeignItemInfo.  # noqa: E501


        :return: The file_size of this BTForeignItemInfo.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this BTForeignItemInfo.


        :param file_size: The file_size of this BTForeignItemInfo.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this BTForeignItemInfo.  # noqa: E501


        :return: The uploaded_at of this BTForeignItemInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this BTForeignItemInfo.


        :param uploaded_at: The uploaded_at of this BTForeignItemInfo.  # noqa: E501
        :type: datetime
        """

        self._uploaded_at = uploaded_at

    @property
    def uploaded_by(self):
        """Gets the uploaded_by of this BTForeignItemInfo.  # noqa: E501


        :return: The uploaded_by of this BTForeignItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_by

    @uploaded_by.setter
    def uploaded_by(self, uploaded_by):
        """Sets the uploaded_by of this BTForeignItemInfo.


        :param uploaded_by: The uploaded_by of this BTForeignItemInfo.  # noqa: E501
        :type: str
        """

        self._uploaded_by = uploaded_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTForeignItemInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
