# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTIdTranslationParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'link_document_id': 'str',
        'source_document_microversion': 'str',
        'source_configuration': 'str',
        'target_configuration': 'str',
        'ids': 'list[str]'
    }

    attribute_map = {
        'link_document_id': 'linkDocumentId',
        'source_document_microversion': 'sourceDocumentMicroversion',
        'source_configuration': 'sourceConfiguration',
        'target_configuration': 'targetConfiguration',
        'ids': 'ids'
    }

    def __init__(self, link_document_id=None, source_document_microversion=None, source_configuration=None, target_configuration=None, ids=None, local_vars_configuration=None):  # noqa: E501
        """BTIdTranslationParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._link_document_id = None
        self._source_document_microversion = None
        self._source_configuration = None
        self._target_configuration = None
        self._ids = None
        self.discriminator = None

        if link_document_id is not None:
            self.link_document_id = link_document_id
        if source_document_microversion is not None:
            self.source_document_microversion = source_document_microversion
        if source_configuration is not None:
            self.source_configuration = source_configuration
        if target_configuration is not None:
            self.target_configuration = target_configuration
        if ids is not None:
            self.ids = ids

    @property
    def link_document_id(self):
        """Gets the link_document_id of this BTIdTranslationParams.  # noqa: E501


        :return: The link_document_id of this BTIdTranslationParams.  # noqa: E501
        :rtype: str
        """
        return self._link_document_id

    @link_document_id.setter
    def link_document_id(self, link_document_id):
        """Sets the link_document_id of this BTIdTranslationParams.


        :param link_document_id: The link_document_id of this BTIdTranslationParams.  # noqa: E501
        :type: str
        """

        self._link_document_id = link_document_id

    @property
    def source_document_microversion(self):
        """Gets the source_document_microversion of this BTIdTranslationParams.  # noqa: E501


        :return: The source_document_microversion of this BTIdTranslationParams.  # noqa: E501
        :rtype: str
        """
        return self._source_document_microversion

    @source_document_microversion.setter
    def source_document_microversion(self, source_document_microversion):
        """Sets the source_document_microversion of this BTIdTranslationParams.


        :param source_document_microversion: The source_document_microversion of this BTIdTranslationParams.  # noqa: E501
        :type: str
        """

        self._source_document_microversion = source_document_microversion

    @property
    def source_configuration(self):
        """Gets the source_configuration of this BTIdTranslationParams.  # noqa: E501


        :return: The source_configuration of this BTIdTranslationParams.  # noqa: E501
        :rtype: str
        """
        return self._source_configuration

    @source_configuration.setter
    def source_configuration(self, source_configuration):
        """Sets the source_configuration of this BTIdTranslationParams.


        :param source_configuration: The source_configuration of this BTIdTranslationParams.  # noqa: E501
        :type: str
        """

        self._source_configuration = source_configuration

    @property
    def target_configuration(self):
        """Gets the target_configuration of this BTIdTranslationParams.  # noqa: E501


        :return: The target_configuration of this BTIdTranslationParams.  # noqa: E501
        :rtype: str
        """
        return self._target_configuration

    @target_configuration.setter
    def target_configuration(self, target_configuration):
        """Sets the target_configuration of this BTIdTranslationParams.


        :param target_configuration: The target_configuration of this BTIdTranslationParams.  # noqa: E501
        :type: str
        """

        self._target_configuration = target_configuration

    @property
    def ids(self):
        """Gets the ids of this BTIdTranslationParams.  # noqa: E501


        :return: The ids of this BTIdTranslationParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this BTIdTranslationParams.


        :param ids: The ids of this BTIdTranslationParams.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTIdTranslationParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTIdTranslationParams):
            return True

        return self.to_dict() != other.to_dict()
