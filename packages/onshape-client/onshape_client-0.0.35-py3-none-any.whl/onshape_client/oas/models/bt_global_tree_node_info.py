# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTGlobalTreeNodeInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'created_by': 'BTUserBasicSummaryInfo',
        'modified_by': 'BTUserBasicSummaryInfo',
        'modified_at': 'datetime',
        'project_id': 'str',
        'can_move': 'bool',
        'is_container': 'bool',
        'description': 'str',
        'is_enterprise_owned': 'bool',
        'tree_href': 'str',
        'resource_type': 'str',
        'is_mutable': 'bool',
        'has_pending_owner': 'bool',
        'owner': 'BTOwnerInfo',
        'href': 'str',
        'view_ref': 'str',
        'name': 'str',
        'id': 'str',
        'json_type': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'modified_at': 'modifiedAt',
        'project_id': 'projectId',
        'can_move': 'canMove',
        'is_container': 'isContainer',
        'description': 'description',
        'is_enterprise_owned': 'isEnterpriseOwned',
        'tree_href': 'treeHref',
        'resource_type': 'resourceType',
        'is_mutable': 'isMutable',
        'has_pending_owner': 'hasPendingOwner',
        'owner': 'owner',
        'href': 'href',
        'view_ref': 'viewRef',
        'name': 'name',
        'id': 'id',
        'json_type': 'jsonType'
    }

    discriminator_value_class_map = {
        'BTDocumentLabelInfo': 'BTDocumentLabelInfo',
        'BTDocumentSummaryInfo': 'BTDocumentSummaryInfo'
    }

    def __init__(self, created_at=None, created_by=None, modified_by=None, modified_at=None, project_id=None, can_move=None, is_container=None, description=None, is_enterprise_owned=None, tree_href=None, resource_type=None, is_mutable=None, has_pending_owner=None, owner=None, href=None, view_ref=None, name=None, id=None, json_type=None, local_vars_configuration=None):  # noqa: E501
        """BTGlobalTreeNodeInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._created_by = None
        self._modified_by = None
        self._modified_at = None
        self._project_id = None
        self._can_move = None
        self._is_container = None
        self._description = None
        self._is_enterprise_owned = None
        self._tree_href = None
        self._resource_type = None
        self._is_mutable = None
        self._has_pending_owner = None
        self._owner = None
        self._href = None
        self._view_ref = None
        self._name = None
        self._id = None
        self._json_type = None
        self.discriminator = 'json_type'

        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_at is not None:
            self.modified_at = modified_at
        if project_id is not None:
            self.project_id = project_id
        if can_move is not None:
            self.can_move = can_move
        if is_container is not None:
            self.is_container = is_container
        if description is not None:
            self.description = description
        if is_enterprise_owned is not None:
            self.is_enterprise_owned = is_enterprise_owned
        if tree_href is not None:
            self.tree_href = tree_href
        if resource_type is not None:
            self.resource_type = resource_type
        if is_mutable is not None:
            self.is_mutable = is_mutable
        if has_pending_owner is not None:
            self.has_pending_owner = has_pending_owner
        if owner is not None:
            self.owner = owner
        if href is not None:
            self.href = href
        if view_ref is not None:
            self.view_ref = view_ref
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        self.json_type = json_type

    @property
    def created_at(self):
        """Gets the created_at of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The created_at of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BTGlobalTreeNodeInfo.


        :param created_at: The created_at of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The created_by of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: BTUserBasicSummaryInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BTGlobalTreeNodeInfo.


        :param created_by: The created_by of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: BTUserBasicSummaryInfo
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The modified_by of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: BTUserBasicSummaryInfo
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this BTGlobalTreeNodeInfo.


        :param modified_by: The modified_by of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: BTUserBasicSummaryInfo
        """

        self._modified_by = modified_by

    @property
    def modified_at(self):
        """Gets the modified_at of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The modified_at of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this BTGlobalTreeNodeInfo.


        :param modified_at: The modified_at of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def project_id(self):
        """Gets the project_id of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The project_id of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BTGlobalTreeNodeInfo.


        :param project_id: The project_id of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def can_move(self):
        """Gets the can_move of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The can_move of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._can_move

    @can_move.setter
    def can_move(self, can_move):
        """Sets the can_move of this BTGlobalTreeNodeInfo.


        :param can_move: The can_move of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: bool
        """

        self._can_move = can_move

    @property
    def is_container(self):
        """Gets the is_container of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The is_container of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_container

    @is_container.setter
    def is_container(self, is_container):
        """Sets the is_container of this BTGlobalTreeNodeInfo.


        :param is_container: The is_container of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: bool
        """

        self._is_container = is_container

    @property
    def description(self):
        """Gets the description of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The description of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BTGlobalTreeNodeInfo.


        :param description: The description of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_enterprise_owned(self):
        """Gets the is_enterprise_owned of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The is_enterprise_owned of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_enterprise_owned

    @is_enterprise_owned.setter
    def is_enterprise_owned(self, is_enterprise_owned):
        """Sets the is_enterprise_owned of this BTGlobalTreeNodeInfo.


        :param is_enterprise_owned: The is_enterprise_owned of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: bool
        """

        self._is_enterprise_owned = is_enterprise_owned

    @property
    def tree_href(self):
        """Gets the tree_href of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The tree_href of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._tree_href

    @tree_href.setter
    def tree_href(self, tree_href):
        """Sets the tree_href of this BTGlobalTreeNodeInfo.


        :param tree_href: The tree_href of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._tree_href = tree_href

    @property
    def resource_type(self):
        """Gets the resource_type of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The resource_type of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this BTGlobalTreeNodeInfo.


        :param resource_type: The resource_type of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def is_mutable(self):
        """Gets the is_mutable of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The is_mutable of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_mutable

    @is_mutable.setter
    def is_mutable(self, is_mutable):
        """Sets the is_mutable of this BTGlobalTreeNodeInfo.


        :param is_mutable: The is_mutable of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: bool
        """

        self._is_mutable = is_mutable

    @property
    def has_pending_owner(self):
        """Gets the has_pending_owner of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The has_pending_owner of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_pending_owner

    @has_pending_owner.setter
    def has_pending_owner(self, has_pending_owner):
        """Sets the has_pending_owner of this BTGlobalTreeNodeInfo.


        :param has_pending_owner: The has_pending_owner of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: bool
        """

        self._has_pending_owner = has_pending_owner

    @property
    def owner(self):
        """Gets the owner of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The owner of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: BTOwnerInfo
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this BTGlobalTreeNodeInfo.


        :param owner: The owner of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: BTOwnerInfo
        """

        self._owner = owner

    @property
    def href(self):
        """Gets the href of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The href of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BTGlobalTreeNodeInfo.


        :param href: The href of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def view_ref(self):
        """Gets the view_ref of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The view_ref of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._view_ref

    @view_ref.setter
    def view_ref(self, view_ref):
        """Sets the view_ref of this BTGlobalTreeNodeInfo.


        :param view_ref: The view_ref of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._view_ref = view_ref

    @property
    def name(self):
        """Gets the name of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The name of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BTGlobalTreeNodeInfo.


        :param name: The name of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The id of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BTGlobalTreeNodeInfo.


        :param id: The id of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def json_type(self):
        """Gets the json_type of this BTGlobalTreeNodeInfo.  # noqa: E501


        :return: The json_type of this BTGlobalTreeNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._json_type

    @json_type.setter
    def json_type(self, json_type):
        """Sets the json_type of this BTGlobalTreeNodeInfo.


        :param json_type: The json_type of this BTGlobalTreeNodeInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and json_type is None:  # noqa: E501
            raise ValueError("Invalid value for `json_type`, must not be `None`")  # noqa: E501

        self._json_type = json_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTGlobalTreeNodeInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTGlobalTreeNodeInfo):
            return True

        return self.to_dict() != other.to_dict()
