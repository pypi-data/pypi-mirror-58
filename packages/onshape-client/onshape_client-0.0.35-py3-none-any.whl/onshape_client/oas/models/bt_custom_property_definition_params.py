# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTCustomPropertyDefinitionParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'template': 'str',
        'enum_definition': 'list[str]',
        'name': 'str',
        'type': 'str',
        'description': 'str'
    }

    attribute_map = {
        'template': 'template',
        'enum_definition': 'enumDefinition',
        'name': 'name',
        'type': 'type',
        'description': 'description'
    }

    def __init__(self, template=None, enum_definition=None, name=None, type=None, description=None):  # noqa: E501
        """BTCustomPropertyDefinitionParams - a model defined in OpenAPI"""  # noqa: E501

        self._template = None
        self._enum_definition = None
        self._name = None
        self._type = None
        self._description = None
        self.discriminator = None

        if template is not None:
            self.template = template
        if enum_definition is not None:
            self.enum_definition = enum_definition
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description

    @property
    def template(self):
        """Gets the template of this BTCustomPropertyDefinitionParams.  # noqa: E501


        :return: The template of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this BTCustomPropertyDefinitionParams.


        :param template: The template of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def enum_definition(self):
        """Gets the enum_definition of this BTCustomPropertyDefinitionParams.  # noqa: E501


        :return: The enum_definition of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._enum_definition

    @enum_definition.setter
    def enum_definition(self, enum_definition):
        """Sets the enum_definition of this BTCustomPropertyDefinitionParams.


        :param enum_definition: The enum_definition of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :type: list[str]
        """

        self._enum_definition = enum_definition

    @property
    def name(self):
        """Gets the name of this BTCustomPropertyDefinitionParams.  # noqa: E501


        :return: The name of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BTCustomPropertyDefinitionParams.


        :param name: The name of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this BTCustomPropertyDefinitionParams.  # noqa: E501


        :return: The type of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BTCustomPropertyDefinitionParams.


        :param type: The type of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "NUMBER", "INTEGER", "BOOLEAN", "DATE", "ENUM", "BLOB", "OBJECT", "ARRAY", "UNKNOWN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def description(self):
        """Gets the description of this BTCustomPropertyDefinitionParams.  # noqa: E501


        :return: The description of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BTCustomPropertyDefinitionParams.


        :param description: The description of this BTCustomPropertyDefinitionParams.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTCustomPropertyDefinitionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
