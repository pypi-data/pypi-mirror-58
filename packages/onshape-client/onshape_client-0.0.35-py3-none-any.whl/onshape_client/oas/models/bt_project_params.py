# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTProjectParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'permission_scheme_id': 'str',
        'role_identity_map': 'dict(str, list[BTIdentity])',
        'role_map': 'dict(str, list[BTIdentityParams])',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'permission_scheme_id': 'permissionSchemeId',
        'role_identity_map': 'roleIdentityMap',
        'role_map': 'roleMap',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, permission_scheme_id=None, role_identity_map=None, role_map=None, name=None, description=None):  # noqa: E501
        """BTProjectParams - a model defined in OpenAPI"""  # noqa: E501

        self._permission_scheme_id = None
        self._role_identity_map = None
        self._role_map = None
        self._name = None
        self._description = None
        self.discriminator = None

        if permission_scheme_id is not None:
            self.permission_scheme_id = permission_scheme_id
        if role_identity_map is not None:
            self.role_identity_map = role_identity_map
        if role_map is not None:
            self.role_map = role_map
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description

    @property
    def permission_scheme_id(self):
        """Gets the permission_scheme_id of this BTProjectParams.  # noqa: E501


        :return: The permission_scheme_id of this BTProjectParams.  # noqa: E501
        :rtype: str
        """
        return self._permission_scheme_id

    @permission_scheme_id.setter
    def permission_scheme_id(self, permission_scheme_id):
        """Sets the permission_scheme_id of this BTProjectParams.


        :param permission_scheme_id: The permission_scheme_id of this BTProjectParams.  # noqa: E501
        :type: str
        """

        self._permission_scheme_id = permission_scheme_id

    @property
    def role_identity_map(self):
        """Gets the role_identity_map of this BTProjectParams.  # noqa: E501


        :return: The role_identity_map of this BTProjectParams.  # noqa: E501
        :rtype: dict(str, list[BTIdentity])
        """
        return self._role_identity_map

    @role_identity_map.setter
    def role_identity_map(self, role_identity_map):
        """Sets the role_identity_map of this BTProjectParams.


        :param role_identity_map: The role_identity_map of this BTProjectParams.  # noqa: E501
        :type: dict(str, list[BTIdentity])
        """

        self._role_identity_map = role_identity_map

    @property
    def role_map(self):
        """Gets the role_map of this BTProjectParams.  # noqa: E501


        :return: The role_map of this BTProjectParams.  # noqa: E501
        :rtype: dict(str, list[BTIdentityParams])
        """
        return self._role_map

    @role_map.setter
    def role_map(self, role_map):
        """Sets the role_map of this BTProjectParams.


        :param role_map: The role_map of this BTProjectParams.  # noqa: E501
        :type: dict(str, list[BTIdentityParams])
        """

        self._role_map = role_map

    @property
    def name(self):
        """Gets the name of this BTProjectParams.  # noqa: E501


        :return: The name of this BTProjectParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BTProjectParams.


        :param name: The name of this BTProjectParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BTProjectParams.  # noqa: E501


        :return: The description of this BTProjectParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BTProjectParams.


        :param description: The description of this BTProjectParams.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTProjectParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
