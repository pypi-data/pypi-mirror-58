# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTMFeatureQueryWithOccurrence157(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_id_with_occurrence': 'str',
        'part_studio_mate_connector_query': 'bool',
        'feature_id': 'str',
        'query_data': 'str',
        'bt_type': 'str'
    }

    attribute_map = {
        'feature_id_with_occurrence': 'featureIdWithOccurrence',
        'part_studio_mate_connector_query': 'partStudioMateConnectorQuery',
        'feature_id': 'featureId',
        'query_data': 'queryData',
        'bt_type': 'btType'
    }

    discriminator_value_class_map = {
        'BTMPartStudioMateConnectorQuery-1324': 'BTMPartStudioMateConnectorQuery1324'
    }

    def __init__(self, feature_id_with_occurrence=None, part_studio_mate_connector_query=None, feature_id=None, query_data=None, bt_type=None, local_vars_configuration=None):  # noqa: E501
        """BTMFeatureQueryWithOccurrence157 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feature_id_with_occurrence = None
        self._part_studio_mate_connector_query = None
        self._feature_id = None
        self._query_data = None
        self._bt_type = None
        self.discriminator = 'bt_type'

        if feature_id_with_occurrence is not None:
            self.feature_id_with_occurrence = feature_id_with_occurrence
        if part_studio_mate_connector_query is not None:
            self.part_studio_mate_connector_query = part_studio_mate_connector_query
        if feature_id is not None:
            self.feature_id = feature_id
        if query_data is not None:
            self.query_data = query_data
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def feature_id_with_occurrence(self):
        """Gets the feature_id_with_occurrence of this BTMFeatureQueryWithOccurrence157.  # noqa: E501


        :return: The feature_id_with_occurrence of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :rtype: str
        """
        return self._feature_id_with_occurrence

    @feature_id_with_occurrence.setter
    def feature_id_with_occurrence(self, feature_id_with_occurrence):
        """Sets the feature_id_with_occurrence of this BTMFeatureQueryWithOccurrence157.


        :param feature_id_with_occurrence: The feature_id_with_occurrence of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :type: str
        """

        self._feature_id_with_occurrence = feature_id_with_occurrence

    @property
    def part_studio_mate_connector_query(self):
        """Gets the part_studio_mate_connector_query of this BTMFeatureQueryWithOccurrence157.  # noqa: E501


        :return: The part_studio_mate_connector_query of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :rtype: bool
        """
        return self._part_studio_mate_connector_query

    @part_studio_mate_connector_query.setter
    def part_studio_mate_connector_query(self, part_studio_mate_connector_query):
        """Sets the part_studio_mate_connector_query of this BTMFeatureQueryWithOccurrence157.


        :param part_studio_mate_connector_query: The part_studio_mate_connector_query of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :type: bool
        """

        self._part_studio_mate_connector_query = part_studio_mate_connector_query

    @property
    def feature_id(self):
        """Gets the feature_id of this BTMFeatureQueryWithOccurrence157.  # noqa: E501


        :return: The feature_id of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this BTMFeatureQueryWithOccurrence157.


        :param feature_id: The feature_id of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :type: str
        """

        self._feature_id = feature_id

    @property
    def query_data(self):
        """Gets the query_data of this BTMFeatureQueryWithOccurrence157.  # noqa: E501


        :return: The query_data of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :rtype: str
        """
        return self._query_data

    @query_data.setter
    def query_data(self, query_data):
        """Sets the query_data of this BTMFeatureQueryWithOccurrence157.


        :param query_data: The query_data of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :type: str
        """

        self._query_data = query_data

    @property
    def bt_type(self):
        """Gets the bt_type of this BTMFeatureQueryWithOccurrence157.  # noqa: E501


        :return: The bt_type of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTMFeatureQueryWithOccurrence157.


        :param bt_type: The bt_type of this BTMFeatureQueryWithOccurrence157.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTMFeatureQueryWithOccurrence157):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTMFeatureQueryWithOccurrence157):
            return True

        return self.to_dict() != other.to_dict()
