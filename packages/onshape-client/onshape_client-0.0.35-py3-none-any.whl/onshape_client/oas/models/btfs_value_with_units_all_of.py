# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTFSValueWithUnitsAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'value_object': 'float',
        'quantity_type': 'str',
        'unit_to_power': 'dict(str, int)',
        'value': 'float'
    }

    attribute_map = {
        'value_object': 'valueObject',
        'quantity_type': 'quantityType',
        'unit_to_power': 'unitToPower',
        'value': 'value'
    }

    def __init__(self, value_object=None, quantity_type=None, unit_to_power=None, value=None):  # noqa: E501
        """BTFSValueWithUnitsAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._value_object = None
        self._quantity_type = None
        self._unit_to_power = None
        self._value = None
        self.discriminator = None

        if value_object is not None:
            self.value_object = value_object
        if quantity_type is not None:
            self.quantity_type = quantity_type
        if unit_to_power is not None:
            self.unit_to_power = unit_to_power
        if value is not None:
            self.value = value

    @property
    def value_object(self):
        """Gets the value_object of this BTFSValueWithUnitsAllOf.  # noqa: E501


        :return: The value_object of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :rtype: float
        """
        return self._value_object

    @value_object.setter
    def value_object(self, value_object):
        """Sets the value_object of this BTFSValueWithUnitsAllOf.


        :param value_object: The value_object of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :type: float
        """

        self._value_object = value_object

    @property
    def quantity_type(self):
        """Gets the quantity_type of this BTFSValueWithUnitsAllOf.  # noqa: E501


        :return: The quantity_type of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._quantity_type

    @quantity_type.setter
    def quantity_type(self, quantity_type):
        """Sets the quantity_type of this BTFSValueWithUnitsAllOf.


        :param quantity_type: The quantity_type of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "INTEGER", "REAL", "LENGTH", "ANGLE", "MASS", "TIME", "TEMPERATURE", "CURRENT", "ANYTHING"]  # noqa: E501
        if quantity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `quantity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(quantity_type, allowed_values)
            )

        self._quantity_type = quantity_type

    @property
    def unit_to_power(self):
        """Gets the unit_to_power of this BTFSValueWithUnitsAllOf.  # noqa: E501


        :return: The unit_to_power of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._unit_to_power

    @unit_to_power.setter
    def unit_to_power(self, unit_to_power):
        """Sets the unit_to_power of this BTFSValueWithUnitsAllOf.


        :param unit_to_power: The unit_to_power of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :type: dict(str, int)
        """

        self._unit_to_power = unit_to_power

    @property
    def value(self):
        """Gets the value of this BTFSValueWithUnitsAllOf.  # noqa: E501


        :return: The value of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BTFSValueWithUnitsAllOf.


        :param value: The value of this BTFSValueWithUnitsAllOf.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTFSValueWithUnitsAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
