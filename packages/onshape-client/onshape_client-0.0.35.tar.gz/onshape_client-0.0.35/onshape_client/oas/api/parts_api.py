# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.oas.api_client import ApiClient
from onshape_client.oas.exceptions import (
    ApiTypeError,
    ApiValueError
)


class PartsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_part(self, bt_version_or_workspace_params, **kwargs):  # noqa: E501
        """Add Part  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_part(bt_version_or_workspace_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param BTVersionOrWorkspaceParams bt_version_or_workspace_params: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_part_with_http_info(bt_version_or_workspace_params, **kwargs)  # noqa: E501

    def add_part_with_http_info(self, bt_version_or_workspace_params, **kwargs):  # noqa: E501
        """Add Part  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_part_with_http_info(bt_version_or_workspace_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param BTVersionOrWorkspaceParams bt_version_or_workspace_params: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bt_version_or_workspace_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_part" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bt_version_or_workspace_params' is set
        if self.api_client.client_side_validation and ('bt_version_or_workspace_params' not in local_var_params or  # noqa: E501
                                                        local_var_params['bt_version_or_workspace_params'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bt_version_or_workspace_params` when calling `add_part`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bt_version_or_workspace_params' in local_var_params:
            body_params = local_var_params['bt_version_or_workspace_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/parts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edges1(self, did, wvm, wvmid, eid, partid, **kwargs):  # noqa: E501
        """Tessellated Edges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edges1(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str partid: (required)
        :param float angle_tolerance:
        :param float chord_tolerance:
        :param list[str] edge_id:
        :param str configuration:
        :param str link_document_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BTExportTessellatedEdgesResponse327
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_edges1_with_http_info(did, wvm, wvmid, eid, partid, **kwargs)  # noqa: E501

    def get_edges1_with_http_info(self, did, wvm, wvmid, eid, partid, **kwargs):  # noqa: E501
        """Tessellated Edges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edges1_with_http_info(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str partid: (required)
        :param float angle_tolerance:
        :param float chord_tolerance:
        :param list[str] edge_id:
        :param str configuration:
        :param str link_document_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BTExportTessellatedEdgesResponse327, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wvm', 'wvmid', 'eid', 'partid', 'angle_tolerance', 'chord_tolerance', 'edge_id', 'configuration', 'link_document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edges1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_edges1`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if self.api_client.client_side_validation and ('wvm' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvm` when calling `get_edges1`")  # noqa: E501
        # verify the required parameter 'wvmid' is set
        if self.api_client.client_side_validation and ('wvmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvmid` when calling `get_edges1`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `get_edges1`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if self.api_client.client_side_validation and ('partid' not in local_var_params or  # noqa: E501
                                                        local_var_params['partid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `partid` when calling `get_edges1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wvm' in local_var_params:
            path_params['wvm'] = local_var_params['wvm']  # noqa: E501
        if 'wvmid' in local_var_params:
            path_params['wvmid'] = local_var_params['wvmid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501
        if 'partid' in local_var_params:
            path_params['partid'] = local_var_params['partid']  # noqa: E501

        query_params = []
        if 'angle_tolerance' in local_var_params and local_var_params['angle_tolerance'] is not None:  # noqa: E501
            query_params.append(('angleTolerance', local_var_params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in local_var_params and local_var_params['chord_tolerance'] is not None:  # noqa: E501
            query_params.append(('chordTolerance', local_var_params['chord_tolerance']))  # noqa: E501
        if 'edge_id' in local_var_params and local_var_params['edge_id'] is not None:  # noqa: E501
            query_params.append(('edgeId', local_var_params['edge_id']))  # noqa: E501
            collection_formats['edgeId'] = 'multi'  # noqa: E501
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatededges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BTExportTessellatedEdgesResponse327',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_faces1(self, did, wvm, wvmid, eid, partid, **kwargs):  # noqa: E501
        """Get Tessellated Faces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_faces1(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str partid: (required)
        :param float angle_tolerance:
        :param float chord_tolerance:
        :param float max_facet_width:
        :param bool output_vertex_normals:
        :param bool output_facet_normals:
        :param bool output_texture_coordinates:
        :param bool output_index_table:
        :param list[str] face_id:
        :param str configuration:
        :param bool output_error_faces:
        :param str link_document_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BTExportTessellatedFacesResponse898
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_faces1_with_http_info(did, wvm, wvmid, eid, partid, **kwargs)  # noqa: E501

    def get_faces1_with_http_info(self, did, wvm, wvmid, eid, partid, **kwargs):  # noqa: E501
        """Get Tessellated Faces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_faces1_with_http_info(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param str wvm: (required)
        :param str wvmid: (required)
        :param str eid: (required)
        :param str partid: (required)
        :param float angle_tolerance:
        :param float chord_tolerance:
        :param float max_facet_width:
        :param bool output_vertex_normals:
        :param bool output_facet_normals:
        :param bool output_texture_coordinates:
        :param bool output_index_table:
        :param list[str] face_id:
        :param str configuration:
        :param bool output_error_faces:
        :param str link_document_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BTExportTessellatedFacesResponse898, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wvm', 'wvmid', 'eid', 'partid', 'angle_tolerance', 'chord_tolerance', 'max_facet_width', 'output_vertex_normals', 'output_facet_normals', 'output_texture_coordinates', 'output_index_table', 'face_id', 'configuration', 'output_error_faces', 'link_document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_faces1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_faces1`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if self.api_client.client_side_validation and ('wvm' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvm` when calling `get_faces1`")  # noqa: E501
        # verify the required parameter 'wvmid' is set
        if self.api_client.client_side_validation and ('wvmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvmid` when calling `get_faces1`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `get_faces1`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if self.api_client.client_side_validation and ('partid' not in local_var_params or  # noqa: E501
                                                        local_var_params['partid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `partid` when calling `get_faces1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wvm' in local_var_params:
            path_params['wvm'] = local_var_params['wvm']  # noqa: E501
        if 'wvmid' in local_var_params:
            path_params['wvmid'] = local_var_params['wvmid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501
        if 'partid' in local_var_params:
            path_params['partid'] = local_var_params['partid']  # noqa: E501

        query_params = []
        if 'angle_tolerance' in local_var_params and local_var_params['angle_tolerance'] is not None:  # noqa: E501
            query_params.append(('angleTolerance', local_var_params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in local_var_params and local_var_params['chord_tolerance'] is not None:  # noqa: E501
            query_params.append(('chordTolerance', local_var_params['chord_tolerance']))  # noqa: E501
        if 'max_facet_width' in local_var_params and local_var_params['max_facet_width'] is not None:  # noqa: E501
            query_params.append(('maxFacetWidth', local_var_params['max_facet_width']))  # noqa: E501
        if 'output_vertex_normals' in local_var_params and local_var_params['output_vertex_normals'] is not None:  # noqa: E501
            query_params.append(('outputVertexNormals', local_var_params['output_vertex_normals']))  # noqa: E501
        if 'output_facet_normals' in local_var_params and local_var_params['output_facet_normals'] is not None:  # noqa: E501
            query_params.append(('outputFacetNormals', local_var_params['output_facet_normals']))  # noqa: E501
        if 'output_texture_coordinates' in local_var_params and local_var_params['output_texture_coordinates'] is not None:  # noqa: E501
            query_params.append(('outputTextureCoordinates', local_var_params['output_texture_coordinates']))  # noqa: E501
        if 'output_index_table' in local_var_params and local_var_params['output_index_table'] is not None:  # noqa: E501
            query_params.append(('outputIndexTable', local_var_params['output_index_table']))  # noqa: E501
        if 'face_id' in local_var_params and local_var_params['face_id'] is not None:  # noqa: E501
            query_params.append(('faceId', local_var_params['face_id']))  # noqa: E501
            collection_formats['faceId'] = 'multi'  # noqa: E501
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501
        if 'output_error_faces' in local_var_params and local_var_params['output_error_faces'] is not None:  # noqa: E501
            query_params.append(('outputErrorFaces', local_var_params['output_error_faces']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatedfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BTExportTessellatedFacesResponse898',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parts_wmv(self, did, wvm, wvmid, **kwargs):  # noqa: E501
        """Get list of parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parts_wmv(did, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: Document ID. (required)
        :param str wvm: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str wvmid: Workspace (w), Version (v) or Microversion (m) ID. (required)
        :param str element_id: Element ID
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for microversion)
        :param bool include_property_defaults: If true, include metadata schema property defaults in response
        :param str link_document_id: Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[BTPartMetadataInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_parts_wmv_with_http_info(did, wvm, wvmid, **kwargs)  # noqa: E501

    def get_parts_wmv_with_http_info(self, did, wvm, wvmid, **kwargs):  # noqa: E501
        """Get list of parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parts_wmv_with_http_info(did, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: Document ID. (required)
        :param str wvm: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str wvmid: Workspace (w), Version (v) or Microversion (m) ID. (required)
        :param str element_id: Element ID
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for microversion)
        :param bool include_property_defaults: If true, include metadata schema property defaults in response
        :param str link_document_id: Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[BTPartMetadataInfo], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wvm', 'wvmid', 'element_id', 'with_thumbnails', 'include_property_defaults', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parts_wmv" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_parts_wmv`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if self.api_client.client_side_validation and ('wvm' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvm` when calling `get_parts_wmv`")  # noqa: E501
        # verify the required parameter 'wvmid' is set
        if self.api_client.client_side_validation and ('wvmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvmid` when calling `get_parts_wmv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wvm' in local_var_params:
            path_params['wvm'] = local_var_params['wvm']  # noqa: E501
        if 'wvmid' in local_var_params:
            path_params['wvmid'] = local_var_params['wvmid']  # noqa: E501

        query_params = []
        if 'element_id' in local_var_params and local_var_params['element_id'] is not None:  # noqa: E501
            query_params.append(('elementId', local_var_params['element_id']))  # noqa: E501
        if 'with_thumbnails' in local_var_params and local_var_params['with_thumbnails'] is not None:  # noqa: E501
            query_params.append(('withThumbnails', local_var_params['with_thumbnails']))  # noqa: E501
        if 'include_property_defaults' in local_var_params and local_var_params['include_property_defaults'] is not None:  # noqa: E501
            query_params.append(('includePropertyDefaults', local_var_params['include_property_defaults']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/parts/d/{did}/{wvm}/{wvmid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BTPartMetadataInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parts_wmve(self, did, wvm, wvmid, eid, **kwargs):  # noqa: E501
        """Get parts from an element.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parts_wmve(did, wvm, wvmid, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: Document ID. (required)
        :param str wvm: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str wvmid: Workspace (w), Version (v) or Microversion (m) ID. (required)
        :param str eid: Element ID. (required)
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for microversion)
        :param bool include_property_defaults: If true, include metadata schema property defaults in response
        :param str configuration: Configuration string.
        :param str link_document_id: Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[BTPartMetadataInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_parts_wmve_with_http_info(did, wvm, wvmid, eid, **kwargs)  # noqa: E501

    def get_parts_wmve_with_http_info(self, did, wvm, wvmid, eid, **kwargs):  # noqa: E501
        """Get parts from an element.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parts_wmve_with_http_info(did, wvm, wvmid, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: Document ID. (required)
        :param str wvm: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str wvmid: Workspace (w), Version (v) or Microversion (m) ID. (required)
        :param str eid: Element ID. (required)
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for microversion)
        :param bool include_property_defaults: If true, include metadata schema property defaults in response
        :param str configuration: Configuration string.
        :param str link_document_id: Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[BTPartMetadataInfo], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'wvm', 'wvmid', 'eid', 'with_thumbnails', 'include_property_defaults', 'configuration', 'link_document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parts_wmve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_parts_wmve`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if self.api_client.client_side_validation and ('wvm' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvm` when calling `get_parts_wmve`")  # noqa: E501
        # verify the required parameter 'wvmid' is set
        if self.api_client.client_side_validation and ('wvmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wvmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wvmid` when calling `get_parts_wmve`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if self.api_client.client_side_validation and ('eid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eid` when calling `get_parts_wmve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501
        if 'wvm' in local_var_params:
            path_params['wvm'] = local_var_params['wvm']  # noqa: E501
        if 'wvmid' in local_var_params:
            path_params['wvmid'] = local_var_params['wvmid']  # noqa: E501
        if 'eid' in local_var_params:
            path_params['eid'] = local_var_params['eid']  # noqa: E501

        query_params = []
        if 'with_thumbnails' in local_var_params and local_var_params['with_thumbnails'] is not None:  # noqa: E501
            query_params.append(('withThumbnails', local_var_params['with_thumbnails']))  # noqa: E501
        if 'include_property_defaults' in local_var_params and local_var_params['include_property_defaults'] is not None:  # noqa: E501
            query_params.append(('includePropertyDefaults', local_var_params['include_property_defaults']))  # noqa: E501
        if 'configuration' in local_var_params and local_var_params['configuration'] is not None:  # noqa: E501
            query_params.append(('configuration', local_var_params['configuration']))  # noqa: E501
        if 'link_document_id' in local_var_params and local_var_params['link_document_id'] is not None:  # noqa: E501
            query_params.append(('linkDocumentId', local_var_params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BTPartMetadataInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
