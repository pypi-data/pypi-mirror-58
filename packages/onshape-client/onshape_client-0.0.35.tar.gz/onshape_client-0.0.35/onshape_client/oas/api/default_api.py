# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.oas.api_client import ApiClient
from onshape_client.oas.exceptions import (
    ApiTypeError,
    ApiValueError
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_latest_in_document(self, did, **kwargs):  # noqa: E501
        """insertables for a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_in_document(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param list[str] beta_capability_ids:
        :param bool include_parts:
        :param bool include_surfaces:
        :param bool include_wires:
        :param bool include_sketches:
        :param bool include_reference_features:
        :param bool include_assemblies:
        :param bool include_features:
        :param bool include_feature_studios:
        :param bool include_part_studios:
        :param bool include_blobs:
        :param bool include_meshes:
        :param bool include_flattened_bodies:
        :param str allowed_blob_mime_types:
        :param int max_feature_script_version:
        :param bool include_applications:
        :param str allowed_application_mime_types:
        :param bool include_composite_parts:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BTListResponseBTInsertableInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_latest_in_document_with_http_info(did, **kwargs)  # noqa: E501

    def get_latest_in_document_with_http_info(self, did, **kwargs):  # noqa: E501
        """insertables for a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_in_document_with_http_info(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str did: (required)
        :param list[str] beta_capability_ids:
        :param bool include_parts:
        :param bool include_surfaces:
        :param bool include_wires:
        :param bool include_sketches:
        :param bool include_reference_features:
        :param bool include_assemblies:
        :param bool include_features:
        :param bool include_feature_studios:
        :param bool include_part_studios:
        :param bool include_blobs:
        :param bool include_meshes:
        :param bool include_flattened_bodies:
        :param str allowed_blob_mime_types:
        :param int max_feature_script_version:
        :param bool include_applications:
        :param str allowed_application_mime_types:
        :param bool include_composite_parts:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BTListResponseBTInsertableInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['did', 'beta_capability_ids', 'include_parts', 'include_surfaces', 'include_wires', 'include_sketches', 'include_reference_features', 'include_assemblies', 'include_features', 'include_feature_studios', 'include_part_studios', 'include_blobs', 'include_meshes', 'include_flattened_bodies', 'allowed_blob_mime_types', 'max_feature_script_version', 'include_applications', 'allowed_application_mime_types', 'include_composite_parts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_in_document" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in local_var_params or  # noqa: E501
                                                        local_var_params['did'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `did` when calling `get_latest_in_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in local_var_params:
            path_params['did'] = local_var_params['did']  # noqa: E501

        query_params = []
        if 'beta_capability_ids' in local_var_params and local_var_params['beta_capability_ids'] is not None:  # noqa: E501
            query_params.append(('betaCapabilityIds', local_var_params['beta_capability_ids']))  # noqa: E501
            collection_formats['betaCapabilityIds'] = 'multi'  # noqa: E501
        if 'include_parts' in local_var_params and local_var_params['include_parts'] is not None:  # noqa: E501
            query_params.append(('includeParts', local_var_params['include_parts']))  # noqa: E501
        if 'include_surfaces' in local_var_params and local_var_params['include_surfaces'] is not None:  # noqa: E501
            query_params.append(('includeSurfaces', local_var_params['include_surfaces']))  # noqa: E501
        if 'include_wires' in local_var_params and local_var_params['include_wires'] is not None:  # noqa: E501
            query_params.append(('includeWires', local_var_params['include_wires']))  # noqa: E501
        if 'include_sketches' in local_var_params and local_var_params['include_sketches'] is not None:  # noqa: E501
            query_params.append(('includeSketches', local_var_params['include_sketches']))  # noqa: E501
        if 'include_reference_features' in local_var_params and local_var_params['include_reference_features'] is not None:  # noqa: E501
            query_params.append(('includeReferenceFeatures', local_var_params['include_reference_features']))  # noqa: E501
        if 'include_assemblies' in local_var_params and local_var_params['include_assemblies'] is not None:  # noqa: E501
            query_params.append(('includeAssemblies', local_var_params['include_assemblies']))  # noqa: E501
        if 'include_features' in local_var_params and local_var_params['include_features'] is not None:  # noqa: E501
            query_params.append(('includeFeatures', local_var_params['include_features']))  # noqa: E501
        if 'include_feature_studios' in local_var_params and local_var_params['include_feature_studios'] is not None:  # noqa: E501
            query_params.append(('includeFeatureStudios', local_var_params['include_feature_studios']))  # noqa: E501
        if 'include_part_studios' in local_var_params and local_var_params['include_part_studios'] is not None:  # noqa: E501
            query_params.append(('includePartStudios', local_var_params['include_part_studios']))  # noqa: E501
        if 'include_blobs' in local_var_params and local_var_params['include_blobs'] is not None:  # noqa: E501
            query_params.append(('includeBlobs', local_var_params['include_blobs']))  # noqa: E501
        if 'include_meshes' in local_var_params and local_var_params['include_meshes'] is not None:  # noqa: E501
            query_params.append(('includeMeshes', local_var_params['include_meshes']))  # noqa: E501
        if 'include_flattened_bodies' in local_var_params and local_var_params['include_flattened_bodies'] is not None:  # noqa: E501
            query_params.append(('includeFlattenedBodies', local_var_params['include_flattened_bodies']))  # noqa: E501
        if 'allowed_blob_mime_types' in local_var_params and local_var_params['allowed_blob_mime_types'] is not None:  # noqa: E501
            query_params.append(('allowedBlobMimeTypes', local_var_params['allowed_blob_mime_types']))  # noqa: E501
        if 'max_feature_script_version' in local_var_params and local_var_params['max_feature_script_version'] is not None:  # noqa: E501
            query_params.append(('maxFeatureScriptVersion', local_var_params['max_feature_script_version']))  # noqa: E501
        if 'include_applications' in local_var_params and local_var_params['include_applications'] is not None:  # noqa: E501
            query_params.append(('includeApplications', local_var_params['include_applications']))  # noqa: E501
        if 'allowed_application_mime_types' in local_var_params and local_var_params['allowed_application_mime_types'] is not None:  # noqa: E501
            query_params.append(('allowedApplicationMimeTypes', local_var_params['allowed_application_mime_types']))  # noqa: E501
        if 'include_composite_parts' in local_var_params and local_var_params['include_composite_parts'] is not None:  # noqa: E501
            query_params.append(('includeCompositeParts', local_var_params['include_composite_parts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1', 'application/json;charset=UTF-8; qs=0.09'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/insertables/d/{did}/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BTListResponseBTInsertableInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
