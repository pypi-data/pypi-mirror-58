# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTUserAgentVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'patch_version': 'int',
        'major_version': 'int',
        'minor_version': 'int'
    }

    attribute_map = {
        'patch_version': 'patchVersion',
        'major_version': 'majorVersion',
        'minor_version': 'minorVersion'
    }

    def __init__(self, patch_version=None, major_version=None, minor_version=None):  # noqa: E501
        """BTUserAgentVersion - a model defined in OpenAPI"""  # noqa: E501

        self._patch_version = None
        self._major_version = None
        self._minor_version = None
        self.discriminator = None

        if patch_version is not None:
            self.patch_version = patch_version
        if major_version is not None:
            self.major_version = major_version
        if minor_version is not None:
            self.minor_version = minor_version

    @property
    def patch_version(self):
        """Gets the patch_version of this BTUserAgentVersion.  # noqa: E501


        :return: The patch_version of this BTUserAgentVersion.  # noqa: E501
        :rtype: int
        """
        return self._patch_version

    @patch_version.setter
    def patch_version(self, patch_version):
        """Sets the patch_version of this BTUserAgentVersion.


        :param patch_version: The patch_version of this BTUserAgentVersion.  # noqa: E501
        :type: int
        """

        self._patch_version = patch_version

    @property
    def major_version(self):
        """Gets the major_version of this BTUserAgentVersion.  # noqa: E501


        :return: The major_version of this BTUserAgentVersion.  # noqa: E501
        :rtype: int
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this BTUserAgentVersion.


        :param major_version: The major_version of this BTUserAgentVersion.  # noqa: E501
        :type: int
        """

        self._major_version = major_version

    @property
    def minor_version(self):
        """Gets the minor_version of this BTUserAgentVersion.  # noqa: E501


        :return: The minor_version of this BTUserAgentVersion.  # noqa: E501
        :rtype: int
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this BTUserAgentVersion.


        :param minor_version: The minor_version of this BTUserAgentVersion.  # noqa: E501
        :type: int
        """

        self._minor_version = minor_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTUserAgentVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
