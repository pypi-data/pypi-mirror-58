# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTParameterGroupSpec3469(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'localized_name': 'str',
        'localizable_name': 'str',
        'additional_localized_strings': 'int',
        'strings_to_localize': 'list[str]',
        'group_name': 'str',
        'group_id': 'str',
        'driving_parameter_id': 'str',
        'collapsed_by_default': 'bool',
        'group_or_parameter_ids': 'list[str]',
        'bt_type': 'str'
    }

    attribute_map = {
        'localized_name': 'localizedName',
        'localizable_name': 'localizableName',
        'additional_localized_strings': 'additionalLocalizedStrings',
        'strings_to_localize': 'stringsToLocalize',
        'group_name': 'groupName',
        'group_id': 'groupId',
        'driving_parameter_id': 'drivingParameterId',
        'collapsed_by_default': 'collapsedByDefault',
        'group_or_parameter_ids': 'groupOrParameterIds',
        'bt_type': 'btType'
    }

    def __init__(self, localized_name=None, localizable_name=None, additional_localized_strings=None, strings_to_localize=None, group_name=None, group_id=None, driving_parameter_id=None, collapsed_by_default=None, group_or_parameter_ids=None, bt_type=None, local_vars_configuration=None):  # noqa: E501
        """BTParameterGroupSpec3469 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._localized_name = None
        self._localizable_name = None
        self._additional_localized_strings = None
        self._strings_to_localize = None
        self._group_name = None
        self._group_id = None
        self._driving_parameter_id = None
        self._collapsed_by_default = None
        self._group_or_parameter_ids = None
        self._bt_type = None
        self.discriminator = None

        if localized_name is not None:
            self.localized_name = localized_name
        if localizable_name is not None:
            self.localizable_name = localizable_name
        if additional_localized_strings is not None:
            self.additional_localized_strings = additional_localized_strings
        if strings_to_localize is not None:
            self.strings_to_localize = strings_to_localize
        if group_name is not None:
            self.group_name = group_name
        if group_id is not None:
            self.group_id = group_id
        if driving_parameter_id is not None:
            self.driving_parameter_id = driving_parameter_id
        if collapsed_by_default is not None:
            self.collapsed_by_default = collapsed_by_default
        if group_or_parameter_ids is not None:
            self.group_or_parameter_ids = group_or_parameter_ids
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def localized_name(self):
        """Gets the localized_name of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The localized_name of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: str
        """
        return self._localized_name

    @localized_name.setter
    def localized_name(self, localized_name):
        """Sets the localized_name of this BTParameterGroupSpec3469.


        :param localized_name: The localized_name of this BTParameterGroupSpec3469.  # noqa: E501
        :type: str
        """

        self._localized_name = localized_name

    @property
    def localizable_name(self):
        """Gets the localizable_name of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The localizable_name of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: str
        """
        return self._localizable_name

    @localizable_name.setter
    def localizable_name(self, localizable_name):
        """Sets the localizable_name of this BTParameterGroupSpec3469.


        :param localizable_name: The localizable_name of this BTParameterGroupSpec3469.  # noqa: E501
        :type: str
        """

        self._localizable_name = localizable_name

    @property
    def additional_localized_strings(self):
        """Gets the additional_localized_strings of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The additional_localized_strings of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: int
        """
        return self._additional_localized_strings

    @additional_localized_strings.setter
    def additional_localized_strings(self, additional_localized_strings):
        """Sets the additional_localized_strings of this BTParameterGroupSpec3469.


        :param additional_localized_strings: The additional_localized_strings of this BTParameterGroupSpec3469.  # noqa: E501
        :type: int
        """

        self._additional_localized_strings = additional_localized_strings

    @property
    def strings_to_localize(self):
        """Gets the strings_to_localize of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The strings_to_localize of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: list[str]
        """
        return self._strings_to_localize

    @strings_to_localize.setter
    def strings_to_localize(self, strings_to_localize):
        """Sets the strings_to_localize of this BTParameterGroupSpec3469.


        :param strings_to_localize: The strings_to_localize of this BTParameterGroupSpec3469.  # noqa: E501
        :type: list[str]
        """

        self._strings_to_localize = strings_to_localize

    @property
    def group_name(self):
        """Gets the group_name of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The group_name of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this BTParameterGroupSpec3469.


        :param group_name: The group_name of this BTParameterGroupSpec3469.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_id(self):
        """Gets the group_id of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The group_id of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this BTParameterGroupSpec3469.


        :param group_id: The group_id of this BTParameterGroupSpec3469.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def driving_parameter_id(self):
        """Gets the driving_parameter_id of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The driving_parameter_id of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: str
        """
        return self._driving_parameter_id

    @driving_parameter_id.setter
    def driving_parameter_id(self, driving_parameter_id):
        """Sets the driving_parameter_id of this BTParameterGroupSpec3469.


        :param driving_parameter_id: The driving_parameter_id of this BTParameterGroupSpec3469.  # noqa: E501
        :type: str
        """

        self._driving_parameter_id = driving_parameter_id

    @property
    def collapsed_by_default(self):
        """Gets the collapsed_by_default of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The collapsed_by_default of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: bool
        """
        return self._collapsed_by_default

    @collapsed_by_default.setter
    def collapsed_by_default(self, collapsed_by_default):
        """Sets the collapsed_by_default of this BTParameterGroupSpec3469.


        :param collapsed_by_default: The collapsed_by_default of this BTParameterGroupSpec3469.  # noqa: E501
        :type: bool
        """

        self._collapsed_by_default = collapsed_by_default

    @property
    def group_or_parameter_ids(self):
        """Gets the group_or_parameter_ids of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The group_or_parameter_ids of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_or_parameter_ids

    @group_or_parameter_ids.setter
    def group_or_parameter_ids(self, group_or_parameter_ids):
        """Sets the group_or_parameter_ids of this BTParameterGroupSpec3469.


        :param group_or_parameter_ids: The group_or_parameter_ids of this BTParameterGroupSpec3469.  # noqa: E501
        :type: list[str]
        """

        self._group_or_parameter_ids = group_or_parameter_ids

    @property
    def bt_type(self):
        """Gets the bt_type of this BTParameterGroupSpec3469.  # noqa: E501


        :return: The bt_type of this BTParameterGroupSpec3469.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTParameterGroupSpec3469.


        :param bt_type: The bt_type of this BTParameterGroupSpec3469.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTParameterGroupSpec3469):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTParameterGroupSpec3469):
            return True

        return self.to_dict() != other.to_dict()
