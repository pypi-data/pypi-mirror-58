# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTMIndividualCreatedByQueryAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_id': 'str',
        'body_type': 'str',
        'entity_type': 'str',
        'filter_construction': 'bool'
    }

    attribute_map = {
        'feature_id': 'featureId',
        'body_type': 'bodyType',
        'entity_type': 'entityType',
        'filter_construction': 'filterConstruction'
    }

    def __init__(self, feature_id=None, body_type=None, entity_type=None, filter_construction=None):  # noqa: E501
        """BTMIndividualCreatedByQueryAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._feature_id = None
        self._body_type = None
        self._entity_type = None
        self._filter_construction = None
        self.discriminator = None

        if feature_id is not None:
            self.feature_id = feature_id
        if body_type is not None:
            self.body_type = body_type
        if entity_type is not None:
            self.entity_type = entity_type
        if filter_construction is not None:
            self.filter_construction = filter_construction

    @property
    def feature_id(self):
        """Gets the feature_id of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501


        :return: The feature_id of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this BTMIndividualCreatedByQueryAllOf.


        :param feature_id: The feature_id of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :type: str
        """

        self._feature_id = feature_id

    @property
    def body_type(self):
        """Gets the body_type of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501


        :return: The body_type of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type):
        """Sets the body_type of this BTMIndividualCreatedByQueryAllOf.


        :param body_type: The body_type of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["SOLID", "SHEET", "WIRE", "POINT", "MATE_CONNECTOR", "COMPOSITE", "UNKNOWN"]  # noqa: E501
        if body_type not in allowed_values:
            raise ValueError(
                "Invalid value for `body_type` ({0}), must be one of {1}"  # noqa: E501
                .format(body_type, allowed_values)
            )

        self._body_type = body_type

    @property
    def entity_type(self):
        """Gets the entity_type of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501


        :return: The entity_type of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this BTMIndividualCreatedByQueryAllOf.


        :param entity_type: The entity_type of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["VERTEX", "EDGE", "FACE", "BODY", "DEGENERATE_EDGE", "UNKNOWN"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def filter_construction(self):
        """Gets the filter_construction of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501


        :return: The filter_construction of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._filter_construction

    @filter_construction.setter
    def filter_construction(self, filter_construction):
        """Sets the filter_construction of this BTMIndividualCreatedByQueryAllOf.


        :param filter_construction: The filter_construction of this BTMIndividualCreatedByQueryAllOf.  # noqa: E501
        :type: bool
        """

        self._filter_construction = filter_construction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTMIndividualCreatedByQueryAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
