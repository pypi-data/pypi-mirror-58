# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTAssemblyOccurrenceInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hidden': 'bool',
        'transform': 'list[float]',
        'fixed': 'bool',
        'path': 'list[str]'
    }

    attribute_map = {
        'hidden': 'hidden',
        'transform': 'transform',
        'fixed': 'fixed',
        'path': 'path'
    }

    def __init__(self, hidden=None, transform=None, fixed=None, path=None, local_vars_configuration=None):  # noqa: E501
        """BTAssemblyOccurrenceInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hidden = None
        self._transform = None
        self._fixed = None
        self._path = None
        self.discriminator = None

        if hidden is not None:
            self.hidden = hidden
        if transform is not None:
            self.transform = transform
        if fixed is not None:
            self.fixed = fixed
        if path is not None:
            self.path = path

    @property
    def hidden(self):
        """Gets the hidden of this BTAssemblyOccurrenceInfo.  # noqa: E501


        :return: The hidden of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this BTAssemblyOccurrenceInfo.


        :param hidden: The hidden of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def transform(self):
        """Gets the transform of this BTAssemblyOccurrenceInfo.  # noqa: E501


        :return: The transform of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this BTAssemblyOccurrenceInfo.


        :param transform: The transform of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :type: list[float]
        """

        self._transform = transform

    @property
    def fixed(self):
        """Gets the fixed of this BTAssemblyOccurrenceInfo.  # noqa: E501


        :return: The fixed of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this BTAssemblyOccurrenceInfo.


        :param fixed: The fixed of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :type: bool
        """

        self._fixed = fixed

    @property
    def path(self):
        """Gets the path of this BTAssemblyOccurrenceInfo.  # noqa: E501


        :return: The path of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BTAssemblyOccurrenceInfo.


        :param path: The path of this BTAssemblyOccurrenceInfo.  # noqa: E501
        :type: list[str]
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTAssemblyOccurrenceInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTAssemblyOccurrenceInfo):
            return True

        return self.to_dict() != other.to_dict()
