# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTInsertablesListResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'changes_since_version_save': 'int',
        'has_multiple_versions': 'bool',
        'can_save_version': 'bool',
        'href': 'str',
        'items': 'list[BTInsertableInfo]',
        'previous': 'str',
        'next': 'str'
    }

    attribute_map = {
        'changes_since_version_save': 'changesSinceVersionSave',
        'has_multiple_versions': 'hasMultipleVersions',
        'can_save_version': 'canSaveVersion',
        'href': 'href',
        'items': 'items',
        'previous': 'previous',
        'next': 'next'
    }

    def __init__(self, changes_since_version_save=None, has_multiple_versions=None, can_save_version=None, href=None, items=None, previous=None, next=None, local_vars_configuration=None):  # noqa: E501
        """BTInsertablesListResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._changes_since_version_save = None
        self._has_multiple_versions = None
        self._can_save_version = None
        self._href = None
        self._items = None
        self._previous = None
        self._next = None
        self.discriminator = None

        if changes_since_version_save is not None:
            self.changes_since_version_save = changes_since_version_save
        if has_multiple_versions is not None:
            self.has_multiple_versions = has_multiple_versions
        if can_save_version is not None:
            self.can_save_version = can_save_version
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if previous is not None:
            self.previous = previous
        if next is not None:
            self.next = next

    @property
    def changes_since_version_save(self):
        """Gets the changes_since_version_save of this BTInsertablesListResponse.  # noqa: E501


        :return: The changes_since_version_save of this BTInsertablesListResponse.  # noqa: E501
        :rtype: int
        """
        return self._changes_since_version_save

    @changes_since_version_save.setter
    def changes_since_version_save(self, changes_since_version_save):
        """Sets the changes_since_version_save of this BTInsertablesListResponse.


        :param changes_since_version_save: The changes_since_version_save of this BTInsertablesListResponse.  # noqa: E501
        :type: int
        """

        self._changes_since_version_save = changes_since_version_save

    @property
    def has_multiple_versions(self):
        """Gets the has_multiple_versions of this BTInsertablesListResponse.  # noqa: E501


        :return: The has_multiple_versions of this BTInsertablesListResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_multiple_versions

    @has_multiple_versions.setter
    def has_multiple_versions(self, has_multiple_versions):
        """Sets the has_multiple_versions of this BTInsertablesListResponse.


        :param has_multiple_versions: The has_multiple_versions of this BTInsertablesListResponse.  # noqa: E501
        :type: bool
        """

        self._has_multiple_versions = has_multiple_versions

    @property
    def can_save_version(self):
        """Gets the can_save_version of this BTInsertablesListResponse.  # noqa: E501


        :return: The can_save_version of this BTInsertablesListResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_save_version

    @can_save_version.setter
    def can_save_version(self, can_save_version):
        """Sets the can_save_version of this BTInsertablesListResponse.


        :param can_save_version: The can_save_version of this BTInsertablesListResponse.  # noqa: E501
        :type: bool
        """

        self._can_save_version = can_save_version

    @property
    def href(self):
        """Gets the href of this BTInsertablesListResponse.  # noqa: E501


        :return: The href of this BTInsertablesListResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BTInsertablesListResponse.


        :param href: The href of this BTInsertablesListResponse.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this BTInsertablesListResponse.  # noqa: E501


        :return: The items of this BTInsertablesListResponse.  # noqa: E501
        :rtype: list[BTInsertableInfo]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BTInsertablesListResponse.


        :param items: The items of this BTInsertablesListResponse.  # noqa: E501
        :type: list[BTInsertableInfo]
        """

        self._items = items

    @property
    def previous(self):
        """Gets the previous of this BTInsertablesListResponse.  # noqa: E501


        :return: The previous of this BTInsertablesListResponse.  # noqa: E501
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this BTInsertablesListResponse.


        :param previous: The previous of this BTInsertablesListResponse.  # noqa: E501
        :type: str
        """

        self._previous = previous

    @property
    def next(self):
        """Gets the next of this BTInsertablesListResponse.  # noqa: E501


        :return: The next of this BTInsertablesListResponse.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this BTInsertablesListResponse.


        :param next: The next of this BTInsertablesListResponse.  # noqa: E501
        :type: str
        """

        self._next = next

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTInsertablesListResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTInsertablesListResponse):
            return True

        return self.to_dict() != other.to_dict()
