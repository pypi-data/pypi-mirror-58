# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTCreateCustomToolParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'insertable_id': 'str',
        'tool': 'BTToolTreeParams'
    }

    attribute_map = {
        'insertable_id': 'insertableId',
        'tool': 'tool'
    }

    def __init__(self, insertable_id=None, tool=None):  # noqa: E501
        """BTCreateCustomToolParams - a model defined in OpenAPI"""  # noqa: E501

        self._insertable_id = None
        self._tool = None
        self.discriminator = None

        if insertable_id is not None:
            self.insertable_id = insertable_id
        if tool is not None:
            self.tool = tool

    @property
    def insertable_id(self):
        """Gets the insertable_id of this BTCreateCustomToolParams.  # noqa: E501


        :return: The insertable_id of this BTCreateCustomToolParams.  # noqa: E501
        :rtype: str
        """
        return self._insertable_id

    @insertable_id.setter
    def insertable_id(self, insertable_id):
        """Sets the insertable_id of this BTCreateCustomToolParams.


        :param insertable_id: The insertable_id of this BTCreateCustomToolParams.  # noqa: E501
        :type: str
        """

        self._insertable_id = insertable_id

    @property
    def tool(self):
        """Gets the tool of this BTCreateCustomToolParams.  # noqa: E501


        :return: The tool of this BTCreateCustomToolParams.  # noqa: E501
        :rtype: BTToolTreeParams
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this BTCreateCustomToolParams.


        :param tool: The tool of this BTCreateCustomToolParams.  # noqa: E501
        :type: BTToolTreeParams
        """

        self._tool = tool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTCreateCustomToolParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
