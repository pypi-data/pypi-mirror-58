# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTPOperatorDeclaration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operator': 'str',
        'space_before_operator': 'BTPSpace',
        'space_after_operator': 'BTPSpace'
    }

    attribute_map = {
        'operator': 'operator',
        'space_before_operator': 'spaceBeforeOperator',
        'space_after_operator': 'spaceAfterOperator'
    }

    def __init__(self, operator=None, space_before_operator=None, space_after_operator=None):  # noqa: E501
        """BTPOperatorDeclaration - a model defined in OpenAPI"""  # noqa: E501

        self._operator = None
        self._space_before_operator = None
        self._space_after_operator = None
        self.discriminator = None

        if operator is not None:
            self.operator = operator
        if space_before_operator is not None:
            self.space_before_operator = space_before_operator
        if space_after_operator is not None:
            self.space_after_operator = space_after_operator

    @property
    def operator(self):
        """Gets the operator of this BTPOperatorDeclaration.  # noqa: E501


        :return: The operator of this BTPOperatorDeclaration.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this BTPOperatorDeclaration.


        :param operator: The operator of this BTPOperatorDeclaration.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "PLUS", "MINUS", "TIMES", "DIVIDE", "MODULUS", "POWER", "NEGATE", "OR", "AND", "NOT", "EQUAL_TO", "NOT_EQUAL_TO", "GREATER", "LESS", "GREATER_OR_EQUAL", "LESS_OR_EQUAL", "CONCATENATE", "CONDITIONAL"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def space_before_operator(self):
        """Gets the space_before_operator of this BTPOperatorDeclaration.  # noqa: E501


        :return: The space_before_operator of this BTPOperatorDeclaration.  # noqa: E501
        :rtype: BTPSpace
        """
        return self._space_before_operator

    @space_before_operator.setter
    def space_before_operator(self, space_before_operator):
        """Sets the space_before_operator of this BTPOperatorDeclaration.


        :param space_before_operator: The space_before_operator of this BTPOperatorDeclaration.  # noqa: E501
        :type: BTPSpace
        """

        self._space_before_operator = space_before_operator

    @property
    def space_after_operator(self):
        """Gets the space_after_operator of this BTPOperatorDeclaration.  # noqa: E501


        :return: The space_after_operator of this BTPOperatorDeclaration.  # noqa: E501
        :rtype: BTPSpace
        """
        return self._space_after_operator

    @space_after_operator.setter
    def space_after_operator(self, space_after_operator):
        """Sets the space_after_operator of this BTPOperatorDeclaration.


        :param space_after_operator: The space_after_operator of this BTPOperatorDeclaration.  # noqa: E501
        :type: BTPSpace
        """

        self._space_after_operator = space_after_operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTPOperatorDeclaration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
