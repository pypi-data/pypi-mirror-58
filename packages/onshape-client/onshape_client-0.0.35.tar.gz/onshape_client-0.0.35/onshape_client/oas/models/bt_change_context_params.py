# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.103
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTChangeContextParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'context_path': 'list[str]',
        'context_id': 'str',
        'description': 'str'
    }

    attribute_map = {
        'context_path': 'contextPath',
        'context_id': 'contextId',
        'description': 'description'
    }

    def __init__(self, context_path=None, context_id=None, description=None):  # noqa: E501
        """BTChangeContextParams - a model defined in OpenAPI"""  # noqa: E501

        self._context_path = None
        self._context_id = None
        self._description = None
        self.discriminator = None

        if context_path is not None:
            self.context_path = context_path
        if context_id is not None:
            self.context_id = context_id
        if description is not None:
            self.description = description

    @property
    def context_path(self):
        """Gets the context_path of this BTChangeContextParams.  # noqa: E501


        :return: The context_path of this BTChangeContextParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._context_path

    @context_path.setter
    def context_path(self, context_path):
        """Sets the context_path of this BTChangeContextParams.


        :param context_path: The context_path of this BTChangeContextParams.  # noqa: E501
        :type: list[str]
        """

        self._context_path = context_path

    @property
    def context_id(self):
        """Gets the context_id of this BTChangeContextParams.  # noqa: E501


        :return: The context_id of this BTChangeContextParams.  # noqa: E501
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this BTChangeContextParams.


        :param context_id: The context_id of this BTChangeContextParams.  # noqa: E501
        :type: str
        """

        self._context_id = context_id

    @property
    def description(self):
        """Gets the description of this BTChangeContextParams.  # noqa: E501


        :return: The description of this BTChangeContextParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BTChangeContextParams.


        :param description: The description of this BTChangeContextParams.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTChangeContextParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
