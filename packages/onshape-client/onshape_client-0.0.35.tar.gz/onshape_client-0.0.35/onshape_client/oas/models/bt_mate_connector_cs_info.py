# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTMateConnectorCSInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'getz_axis': 'list[float]',
        'gety_axis': 'list[float]',
        'getx_axis': 'list[float]',
        'origin': 'list[float]'
    }

    attribute_map = {
        'getz_axis': 'getzAxis',
        'gety_axis': 'getyAxis',
        'getx_axis': 'getxAxis',
        'origin': 'origin'
    }

    def __init__(self, getz_axis=None, gety_axis=None, getx_axis=None, origin=None, local_vars_configuration=None):  # noqa: E501
        """BTMateConnectorCSInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._getz_axis = None
        self._gety_axis = None
        self._getx_axis = None
        self._origin = None
        self.discriminator = None

        if getz_axis is not None:
            self.getz_axis = getz_axis
        if gety_axis is not None:
            self.gety_axis = gety_axis
        if getx_axis is not None:
            self.getx_axis = getx_axis
        if origin is not None:
            self.origin = origin

    @property
    def getz_axis(self):
        """Gets the getz_axis of this BTMateConnectorCSInfo.  # noqa: E501


        :return: The getz_axis of this BTMateConnectorCSInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._getz_axis

    @getz_axis.setter
    def getz_axis(self, getz_axis):
        """Sets the getz_axis of this BTMateConnectorCSInfo.


        :param getz_axis: The getz_axis of this BTMateConnectorCSInfo.  # noqa: E501
        :type: list[float]
        """

        self._getz_axis = getz_axis

    @property
    def gety_axis(self):
        """Gets the gety_axis of this BTMateConnectorCSInfo.  # noqa: E501


        :return: The gety_axis of this BTMateConnectorCSInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._gety_axis

    @gety_axis.setter
    def gety_axis(self, gety_axis):
        """Sets the gety_axis of this BTMateConnectorCSInfo.


        :param gety_axis: The gety_axis of this BTMateConnectorCSInfo.  # noqa: E501
        :type: list[float]
        """

        self._gety_axis = gety_axis

    @property
    def getx_axis(self):
        """Gets the getx_axis of this BTMateConnectorCSInfo.  # noqa: E501


        :return: The getx_axis of this BTMateConnectorCSInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._getx_axis

    @getx_axis.setter
    def getx_axis(self, getx_axis):
        """Sets the getx_axis of this BTMateConnectorCSInfo.


        :param getx_axis: The getx_axis of this BTMateConnectorCSInfo.  # noqa: E501
        :type: list[float]
        """

        self._getx_axis = getx_axis

    @property
    def origin(self):
        """Gets the origin of this BTMateConnectorCSInfo.  # noqa: E501


        :return: The origin of this BTMateConnectorCSInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this BTMateConnectorCSInfo.


        :param origin: The origin of this BTMateConnectorCSInfo.  # noqa: E501
        :type: list[float]
        """

        self._origin = origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTMateConnectorCSInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTMateConnectorCSInfo):
            return True

        return self.to_dict() != other.to_dict()
