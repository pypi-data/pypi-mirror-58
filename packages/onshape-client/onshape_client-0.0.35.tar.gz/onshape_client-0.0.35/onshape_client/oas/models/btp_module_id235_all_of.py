# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTPModuleId235AllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'external_document_with_version_and_element_id': 'BTDocumentWithVersionAndElementId',
        'external_document_with_version': 'BTDocumentWithVersionId',
        'external_import': 'bool',
        'potentially_valid': 'bool',
        'version_and_microversion': 'str',
        'imported_document_id': 'str',
        'legacy': 'bool',
        'dbimport_string': 'str',
        'imported_element_id': 'str',
        'element_import': 'bool',
        'path_potentially_valid': 'bool',
        'version_potentially_valid': 'bool',
        'valid_legacy_version': 'bool',
        'path_version': 'str',
        'imported_version_id': 'str',
        'microversion': 'str',
        'space_before_path': 'BTPSpace10',
        'space_after_path': 'BTPSpace10',
        'space_before_version': 'BTPSpace10',
        'space_after_version': 'BTPSpace10',
        'version': 'BTPLiteralString259',
        'path': 'BTPLiteralString259',
        'bt_type': 'str'
    }

    attribute_map = {
        'external_document_with_version_and_element_id': 'externalDocumentWithVersionAndElementId',
        'external_document_with_version': 'externalDocumentWithVersion',
        'external_import': 'externalImport',
        'potentially_valid': 'potentiallyValid',
        'version_and_microversion': 'versionAndMicroversion',
        'imported_document_id': 'importedDocumentId',
        'legacy': 'legacy',
        'dbimport_string': 'dbimportString',
        'imported_element_id': 'importedElementId',
        'element_import': 'elementImport',
        'path_potentially_valid': 'pathPotentiallyValid',
        'version_potentially_valid': 'versionPotentiallyValid',
        'valid_legacy_version': 'validLegacyVersion',
        'path_version': 'pathVersion',
        'imported_version_id': 'importedVersionId',
        'microversion': 'microversion',
        'space_before_path': 'spaceBeforePath',
        'space_after_path': 'spaceAfterPath',
        'space_before_version': 'spaceBeforeVersion',
        'space_after_version': 'spaceAfterVersion',
        'version': 'version',
        'path': 'path',
        'bt_type': 'btType'
    }

    def __init__(self, external_document_with_version_and_element_id=None, external_document_with_version=None, external_import=None, potentially_valid=None, version_and_microversion=None, imported_document_id=None, legacy=None, dbimport_string=None, imported_element_id=None, element_import=None, path_potentially_valid=None, version_potentially_valid=None, valid_legacy_version=None, path_version=None, imported_version_id=None, microversion=None, space_before_path=None, space_after_path=None, space_before_version=None, space_after_version=None, version=None, path=None, bt_type=None, local_vars_configuration=None):  # noqa: E501
        """BTPModuleId235AllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._external_document_with_version_and_element_id = None
        self._external_document_with_version = None
        self._external_import = None
        self._potentially_valid = None
        self._version_and_microversion = None
        self._imported_document_id = None
        self._legacy = None
        self._dbimport_string = None
        self._imported_element_id = None
        self._element_import = None
        self._path_potentially_valid = None
        self._version_potentially_valid = None
        self._valid_legacy_version = None
        self._path_version = None
        self._imported_version_id = None
        self._microversion = None
        self._space_before_path = None
        self._space_after_path = None
        self._space_before_version = None
        self._space_after_version = None
        self._version = None
        self._path = None
        self._bt_type = None
        self.discriminator = None

        if external_document_with_version_and_element_id is not None:
            self.external_document_with_version_and_element_id = external_document_with_version_and_element_id
        if external_document_with_version is not None:
            self.external_document_with_version = external_document_with_version
        if external_import is not None:
            self.external_import = external_import
        if potentially_valid is not None:
            self.potentially_valid = potentially_valid
        if version_and_microversion is not None:
            self.version_and_microversion = version_and_microversion
        if imported_document_id is not None:
            self.imported_document_id = imported_document_id
        if legacy is not None:
            self.legacy = legacy
        if dbimport_string is not None:
            self.dbimport_string = dbimport_string
        if imported_element_id is not None:
            self.imported_element_id = imported_element_id
        if element_import is not None:
            self.element_import = element_import
        if path_potentially_valid is not None:
            self.path_potentially_valid = path_potentially_valid
        if version_potentially_valid is not None:
            self.version_potentially_valid = version_potentially_valid
        if valid_legacy_version is not None:
            self.valid_legacy_version = valid_legacy_version
        if path_version is not None:
            self.path_version = path_version
        if imported_version_id is not None:
            self.imported_version_id = imported_version_id
        if microversion is not None:
            self.microversion = microversion
        if space_before_path is not None:
            self.space_before_path = space_before_path
        if space_after_path is not None:
            self.space_after_path = space_after_path
        if space_before_version is not None:
            self.space_before_version = space_before_version
        if space_after_version is not None:
            self.space_after_version = space_after_version
        if version is not None:
            self.version = version
        if path is not None:
            self.path = path
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def external_document_with_version_and_element_id(self):
        """Gets the external_document_with_version_and_element_id of this BTPModuleId235AllOf.  # noqa: E501


        :return: The external_document_with_version_and_element_id of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTDocumentWithVersionAndElementId
        """
        return self._external_document_with_version_and_element_id

    @external_document_with_version_and_element_id.setter
    def external_document_with_version_and_element_id(self, external_document_with_version_and_element_id):
        """Sets the external_document_with_version_and_element_id of this BTPModuleId235AllOf.


        :param external_document_with_version_and_element_id: The external_document_with_version_and_element_id of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTDocumentWithVersionAndElementId
        """

        self._external_document_with_version_and_element_id = external_document_with_version_and_element_id

    @property
    def external_document_with_version(self):
        """Gets the external_document_with_version of this BTPModuleId235AllOf.  # noqa: E501


        :return: The external_document_with_version of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTDocumentWithVersionId
        """
        return self._external_document_with_version

    @external_document_with_version.setter
    def external_document_with_version(self, external_document_with_version):
        """Sets the external_document_with_version of this BTPModuleId235AllOf.


        :param external_document_with_version: The external_document_with_version of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTDocumentWithVersionId
        """

        self._external_document_with_version = external_document_with_version

    @property
    def external_import(self):
        """Gets the external_import of this BTPModuleId235AllOf.  # noqa: E501


        :return: The external_import of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: bool
        """
        return self._external_import

    @external_import.setter
    def external_import(self, external_import):
        """Sets the external_import of this BTPModuleId235AllOf.


        :param external_import: The external_import of this BTPModuleId235AllOf.  # noqa: E501
        :type: bool
        """

        self._external_import = external_import

    @property
    def potentially_valid(self):
        """Gets the potentially_valid of this BTPModuleId235AllOf.  # noqa: E501


        :return: The potentially_valid of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: bool
        """
        return self._potentially_valid

    @potentially_valid.setter
    def potentially_valid(self, potentially_valid):
        """Sets the potentially_valid of this BTPModuleId235AllOf.


        :param potentially_valid: The potentially_valid of this BTPModuleId235AllOf.  # noqa: E501
        :type: bool
        """

        self._potentially_valid = potentially_valid

    @property
    def version_and_microversion(self):
        """Gets the version_and_microversion of this BTPModuleId235AllOf.  # noqa: E501


        :return: The version_and_microversion of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._version_and_microversion

    @version_and_microversion.setter
    def version_and_microversion(self, version_and_microversion):
        """Sets the version_and_microversion of this BTPModuleId235AllOf.


        :param version_and_microversion: The version_and_microversion of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._version_and_microversion = version_and_microversion

    @property
    def imported_document_id(self):
        """Gets the imported_document_id of this BTPModuleId235AllOf.  # noqa: E501


        :return: The imported_document_id of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._imported_document_id

    @imported_document_id.setter
    def imported_document_id(self, imported_document_id):
        """Sets the imported_document_id of this BTPModuleId235AllOf.


        :param imported_document_id: The imported_document_id of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._imported_document_id = imported_document_id

    @property
    def legacy(self):
        """Gets the legacy of this BTPModuleId235AllOf.  # noqa: E501


        :return: The legacy of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: bool
        """
        return self._legacy

    @legacy.setter
    def legacy(self, legacy):
        """Sets the legacy of this BTPModuleId235AllOf.


        :param legacy: The legacy of this BTPModuleId235AllOf.  # noqa: E501
        :type: bool
        """

        self._legacy = legacy

    @property
    def dbimport_string(self):
        """Gets the dbimport_string of this BTPModuleId235AllOf.  # noqa: E501


        :return: The dbimport_string of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._dbimport_string

    @dbimport_string.setter
    def dbimport_string(self, dbimport_string):
        """Sets the dbimport_string of this BTPModuleId235AllOf.


        :param dbimport_string: The dbimport_string of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._dbimport_string = dbimport_string

    @property
    def imported_element_id(self):
        """Gets the imported_element_id of this BTPModuleId235AllOf.  # noqa: E501


        :return: The imported_element_id of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._imported_element_id

    @imported_element_id.setter
    def imported_element_id(self, imported_element_id):
        """Sets the imported_element_id of this BTPModuleId235AllOf.


        :param imported_element_id: The imported_element_id of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._imported_element_id = imported_element_id

    @property
    def element_import(self):
        """Gets the element_import of this BTPModuleId235AllOf.  # noqa: E501


        :return: The element_import of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: bool
        """
        return self._element_import

    @element_import.setter
    def element_import(self, element_import):
        """Sets the element_import of this BTPModuleId235AllOf.


        :param element_import: The element_import of this BTPModuleId235AllOf.  # noqa: E501
        :type: bool
        """

        self._element_import = element_import

    @property
    def path_potentially_valid(self):
        """Gets the path_potentially_valid of this BTPModuleId235AllOf.  # noqa: E501


        :return: The path_potentially_valid of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: bool
        """
        return self._path_potentially_valid

    @path_potentially_valid.setter
    def path_potentially_valid(self, path_potentially_valid):
        """Sets the path_potentially_valid of this BTPModuleId235AllOf.


        :param path_potentially_valid: The path_potentially_valid of this BTPModuleId235AllOf.  # noqa: E501
        :type: bool
        """

        self._path_potentially_valid = path_potentially_valid

    @property
    def version_potentially_valid(self):
        """Gets the version_potentially_valid of this BTPModuleId235AllOf.  # noqa: E501


        :return: The version_potentially_valid of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: bool
        """
        return self._version_potentially_valid

    @version_potentially_valid.setter
    def version_potentially_valid(self, version_potentially_valid):
        """Sets the version_potentially_valid of this BTPModuleId235AllOf.


        :param version_potentially_valid: The version_potentially_valid of this BTPModuleId235AllOf.  # noqa: E501
        :type: bool
        """

        self._version_potentially_valid = version_potentially_valid

    @property
    def valid_legacy_version(self):
        """Gets the valid_legacy_version of this BTPModuleId235AllOf.  # noqa: E501


        :return: The valid_legacy_version of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: bool
        """
        return self._valid_legacy_version

    @valid_legacy_version.setter
    def valid_legacy_version(self, valid_legacy_version):
        """Sets the valid_legacy_version of this BTPModuleId235AllOf.


        :param valid_legacy_version: The valid_legacy_version of this BTPModuleId235AllOf.  # noqa: E501
        :type: bool
        """

        self._valid_legacy_version = valid_legacy_version

    @property
    def path_version(self):
        """Gets the path_version of this BTPModuleId235AllOf.  # noqa: E501


        :return: The path_version of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._path_version

    @path_version.setter
    def path_version(self, path_version):
        """Sets the path_version of this BTPModuleId235AllOf.


        :param path_version: The path_version of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._path_version = path_version

    @property
    def imported_version_id(self):
        """Gets the imported_version_id of this BTPModuleId235AllOf.  # noqa: E501


        :return: The imported_version_id of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._imported_version_id

    @imported_version_id.setter
    def imported_version_id(self, imported_version_id):
        """Sets the imported_version_id of this BTPModuleId235AllOf.


        :param imported_version_id: The imported_version_id of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._imported_version_id = imported_version_id

    @property
    def microversion(self):
        """Gets the microversion of this BTPModuleId235AllOf.  # noqa: E501


        :return: The microversion of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._microversion

    @microversion.setter
    def microversion(self, microversion):
        """Sets the microversion of this BTPModuleId235AllOf.


        :param microversion: The microversion of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._microversion = microversion

    @property
    def space_before_path(self):
        """Gets the space_before_path of this BTPModuleId235AllOf.  # noqa: E501


        :return: The space_before_path of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_before_path

    @space_before_path.setter
    def space_before_path(self, space_before_path):
        """Sets the space_before_path of this BTPModuleId235AllOf.


        :param space_before_path: The space_before_path of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_before_path = space_before_path

    @property
    def space_after_path(self):
        """Gets the space_after_path of this BTPModuleId235AllOf.  # noqa: E501


        :return: The space_after_path of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_after_path

    @space_after_path.setter
    def space_after_path(self, space_after_path):
        """Sets the space_after_path of this BTPModuleId235AllOf.


        :param space_after_path: The space_after_path of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_after_path = space_after_path

    @property
    def space_before_version(self):
        """Gets the space_before_version of this BTPModuleId235AllOf.  # noqa: E501


        :return: The space_before_version of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_before_version

    @space_before_version.setter
    def space_before_version(self, space_before_version):
        """Sets the space_before_version of this BTPModuleId235AllOf.


        :param space_before_version: The space_before_version of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_before_version = space_before_version

    @property
    def space_after_version(self):
        """Gets the space_after_version of this BTPModuleId235AllOf.  # noqa: E501


        :return: The space_after_version of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_after_version

    @space_after_version.setter
    def space_after_version(self, space_after_version):
        """Sets the space_after_version of this BTPModuleId235AllOf.


        :param space_after_version: The space_after_version of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_after_version = space_after_version

    @property
    def version(self):
        """Gets the version of this BTPModuleId235AllOf.  # noqa: E501


        :return: The version of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTPLiteralString259
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BTPModuleId235AllOf.


        :param version: The version of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTPLiteralString259
        """

        self._version = version

    @property
    def path(self):
        """Gets the path of this BTPModuleId235AllOf.  # noqa: E501


        :return: The path of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: BTPLiteralString259
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BTPModuleId235AllOf.


        :param path: The path of this BTPModuleId235AllOf.  # noqa: E501
        :type: BTPLiteralString259
        """

        self._path = path

    @property
    def bt_type(self):
        """Gets the bt_type of this BTPModuleId235AllOf.  # noqa: E501


        :return: The bt_type of this BTPModuleId235AllOf.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTPModuleId235AllOf.


        :param bt_type: The bt_type of this BTPModuleId235AllOf.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTPModuleId235AllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTPModuleId235AllOf):
            return True

        return self.to_dict() != other.to_dict()
