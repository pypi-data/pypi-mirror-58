# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTExportModelParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configuration': 'str',
        'workspace_id': 'str',
        'element_id': 'str',
        'document_id': 'str',
        'microversion': 'str',
        'link_document_id': 'str',
        'document_version_id': 'str',
        'link_document_workspace_id': 'str',
        'sheet_metal_flat': 'bool',
        'include_bend_lines': 'bool',
        'include_sketches': 'bool',
        'flatten': 'bool',
        'splines_as_polylines': 'bool',
        'is_parting_out': 'bool',
        'include_bend_centerlines': 'bool',
        'batch_flat_patterns': 'bool',
        'store_in_document': 'bool',
        'from_user_id': 'str',
        'cloud_storage_account_id': 'str',
        'include_std': 'bool',
        'element_ids': 'str',
        'user_id': 'str',
        'part_query': 'str',
        'part_ids': 'str',
        'angle_tolerance': 'float',
        'chord_tolerance': 'float',
        'max_facet_width': 'float',
        'cloud_object_id': 'str',
        'email_link': 'bool',
        'password_required': 'bool',
        'email_subject': 'str',
        'email_message': 'str',
        'email_to': 'str',
        'send_copy_to_me': 'bool',
        'view': 'str',
        'scale': 'float',
        'units': 'str',
        'trigger_auto_download': 'bool',
        'valid_for_days': 'int',
        'feature_ids': 'str',
        'destination_name': 'str',
        'include_export_ids': 'bool',
        'min_facet_width': 'float',
        'resolution': 'str',
        'grouping': 'str',
        'zip_single_file_output': 'bool',
        'include_foreign_data': 'bool',
        'deep_search_for_foreign_data': 'bool',
        'include_release_management_data': 'bool',
        'include_custom_properties_data': 'bool',
        'include_custom_properties': 'bool',
        'include_items_data': 'bool',
        'include_linked_documents': 'bool',
        'extract_to_s3': 'bool',
        'version': 'str',
        'format': 'str',
        'password': 'str',
        'mode': 'str'
    }

    attribute_map = {
        'configuration': 'configuration',
        'workspace_id': 'workspaceId',
        'element_id': 'elementId',
        'document_id': 'documentId',
        'microversion': 'microversion',
        'link_document_id': 'linkDocumentId',
        'document_version_id': 'documentVersionId',
        'link_document_workspace_id': 'linkDocumentWorkspaceId',
        'sheet_metal_flat': 'sheetMetalFlat',
        'include_bend_lines': 'includeBendLines',
        'include_sketches': 'includeSketches',
        'flatten': 'flatten',
        'splines_as_polylines': 'splinesAsPolylines',
        'is_parting_out': 'isPartingOut',
        'include_bend_centerlines': 'includeBendCenterlines',
        'batch_flat_patterns': 'batchFlatPatterns',
        'store_in_document': 'storeInDocument',
        'from_user_id': 'fromUserId',
        'cloud_storage_account_id': 'cloudStorageAccountId',
        'include_std': 'includeStd',
        'element_ids': 'elementIds',
        'user_id': 'userId',
        'part_query': 'partQuery',
        'part_ids': 'partIds',
        'angle_tolerance': 'angleTolerance',
        'chord_tolerance': 'chordTolerance',
        'max_facet_width': 'maxFacetWidth',
        'cloud_object_id': 'cloudObjectId',
        'email_link': 'emailLink',
        'password_required': 'passwordRequired',
        'email_subject': 'emailSubject',
        'email_message': 'emailMessage',
        'email_to': 'emailTo',
        'send_copy_to_me': 'sendCopyToMe',
        'view': 'view',
        'scale': 'scale',
        'units': 'units',
        'trigger_auto_download': 'triggerAutoDownload',
        'valid_for_days': 'validForDays',
        'feature_ids': 'featureIds',
        'destination_name': 'destinationName',
        'include_export_ids': 'includeExportIds',
        'min_facet_width': 'minFacetWidth',
        'resolution': 'resolution',
        'grouping': 'grouping',
        'zip_single_file_output': 'zipSingleFileOutput',
        'include_foreign_data': 'includeForeignData',
        'deep_search_for_foreign_data': 'deepSearchForForeignData',
        'include_release_management_data': 'includeReleaseManagementData',
        'include_custom_properties_data': 'includeCustomPropertiesData',
        'include_custom_properties': 'includeCustomProperties',
        'include_items_data': 'includeItemsData',
        'include_linked_documents': 'includeLinkedDocuments',
        'extract_to_s3': 'extractToS3',
        'version': 'version',
        'format': 'format',
        'password': 'password',
        'mode': 'mode'
    }

    def __init__(self, configuration=None, workspace_id=None, element_id=None, document_id=None, microversion=None, link_document_id=None, document_version_id=None, link_document_workspace_id=None, sheet_metal_flat=None, include_bend_lines=None, include_sketches=None, flatten=None, splines_as_polylines=None, is_parting_out=None, include_bend_centerlines=None, batch_flat_patterns=None, store_in_document=None, from_user_id=None, cloud_storage_account_id=None, include_std=None, element_ids=None, user_id=None, part_query=None, part_ids=None, angle_tolerance=None, chord_tolerance=None, max_facet_width=None, cloud_object_id=None, email_link=None, password_required=None, email_subject=None, email_message=None, email_to=None, send_copy_to_me=None, view=None, scale=None, units=None, trigger_auto_download=None, valid_for_days=None, feature_ids=None, destination_name=None, include_export_ids=None, min_facet_width=None, resolution=None, grouping=None, zip_single_file_output=None, include_foreign_data=None, deep_search_for_foreign_data=None, include_release_management_data=None, include_custom_properties_data=None, include_custom_properties=None, include_items_data=None, include_linked_documents=None, extract_to_s3=None, version=None, format=None, password=None, mode=None, local_vars_configuration=None):  # noqa: E501
        """BTExportModelParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._configuration = None
        self._workspace_id = None
        self._element_id = None
        self._document_id = None
        self._microversion = None
        self._link_document_id = None
        self._document_version_id = None
        self._link_document_workspace_id = None
        self._sheet_metal_flat = None
        self._include_bend_lines = None
        self._include_sketches = None
        self._flatten = None
        self._splines_as_polylines = None
        self._is_parting_out = None
        self._include_bend_centerlines = None
        self._batch_flat_patterns = None
        self._store_in_document = None
        self._from_user_id = None
        self._cloud_storage_account_id = None
        self._include_std = None
        self._element_ids = None
        self._user_id = None
        self._part_query = None
        self._part_ids = None
        self._angle_tolerance = None
        self._chord_tolerance = None
        self._max_facet_width = None
        self._cloud_object_id = None
        self._email_link = None
        self._password_required = None
        self._email_subject = None
        self._email_message = None
        self._email_to = None
        self._send_copy_to_me = None
        self._view = None
        self._scale = None
        self._units = None
        self._trigger_auto_download = None
        self._valid_for_days = None
        self._feature_ids = None
        self._destination_name = None
        self._include_export_ids = None
        self._min_facet_width = None
        self._resolution = None
        self._grouping = None
        self._zip_single_file_output = None
        self._include_foreign_data = None
        self._deep_search_for_foreign_data = None
        self._include_release_management_data = None
        self._include_custom_properties_data = None
        self._include_custom_properties = None
        self._include_items_data = None
        self._include_linked_documents = None
        self._extract_to_s3 = None
        self._version = None
        self._format = None
        self._password = None
        self._mode = None
        self.discriminator = None

        if configuration is not None:
            self.configuration = configuration
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if element_id is not None:
            self.element_id = element_id
        if document_id is not None:
            self.document_id = document_id
        if microversion is not None:
            self.microversion = microversion
        if link_document_id is not None:
            self.link_document_id = link_document_id
        if document_version_id is not None:
            self.document_version_id = document_version_id
        if link_document_workspace_id is not None:
            self.link_document_workspace_id = link_document_workspace_id
        if sheet_metal_flat is not None:
            self.sheet_metal_flat = sheet_metal_flat
        if include_bend_lines is not None:
            self.include_bend_lines = include_bend_lines
        if include_sketches is not None:
            self.include_sketches = include_sketches
        if flatten is not None:
            self.flatten = flatten
        if splines_as_polylines is not None:
            self.splines_as_polylines = splines_as_polylines
        if is_parting_out is not None:
            self.is_parting_out = is_parting_out
        if include_bend_centerlines is not None:
            self.include_bend_centerlines = include_bend_centerlines
        if batch_flat_patterns is not None:
            self.batch_flat_patterns = batch_flat_patterns
        if store_in_document is not None:
            self.store_in_document = store_in_document
        if from_user_id is not None:
            self.from_user_id = from_user_id
        if cloud_storage_account_id is not None:
            self.cloud_storage_account_id = cloud_storage_account_id
        if include_std is not None:
            self.include_std = include_std
        if element_ids is not None:
            self.element_ids = element_ids
        if user_id is not None:
            self.user_id = user_id
        if part_query is not None:
            self.part_query = part_query
        if part_ids is not None:
            self.part_ids = part_ids
        if angle_tolerance is not None:
            self.angle_tolerance = angle_tolerance
        if chord_tolerance is not None:
            self.chord_tolerance = chord_tolerance
        if max_facet_width is not None:
            self.max_facet_width = max_facet_width
        if cloud_object_id is not None:
            self.cloud_object_id = cloud_object_id
        if email_link is not None:
            self.email_link = email_link
        if password_required is not None:
            self.password_required = password_required
        if email_subject is not None:
            self.email_subject = email_subject
        if email_message is not None:
            self.email_message = email_message
        if email_to is not None:
            self.email_to = email_to
        if send_copy_to_me is not None:
            self.send_copy_to_me = send_copy_to_me
        if view is not None:
            self.view = view
        if scale is not None:
            self.scale = scale
        if units is not None:
            self.units = units
        if trigger_auto_download is not None:
            self.trigger_auto_download = trigger_auto_download
        if valid_for_days is not None:
            self.valid_for_days = valid_for_days
        if feature_ids is not None:
            self.feature_ids = feature_ids
        if destination_name is not None:
            self.destination_name = destination_name
        if include_export_ids is not None:
            self.include_export_ids = include_export_ids
        if min_facet_width is not None:
            self.min_facet_width = min_facet_width
        if resolution is not None:
            self.resolution = resolution
        if grouping is not None:
            self.grouping = grouping
        if zip_single_file_output is not None:
            self.zip_single_file_output = zip_single_file_output
        if include_foreign_data is not None:
            self.include_foreign_data = include_foreign_data
        if deep_search_for_foreign_data is not None:
            self.deep_search_for_foreign_data = deep_search_for_foreign_data
        if include_release_management_data is not None:
            self.include_release_management_data = include_release_management_data
        if include_custom_properties_data is not None:
            self.include_custom_properties_data = include_custom_properties_data
        if include_custom_properties is not None:
            self.include_custom_properties = include_custom_properties
        if include_items_data is not None:
            self.include_items_data = include_items_data
        if include_linked_documents is not None:
            self.include_linked_documents = include_linked_documents
        if extract_to_s3 is not None:
            self.extract_to_s3 = extract_to_s3
        if version is not None:
            self.version = version
        if format is not None:
            self.format = format
        if password is not None:
            self.password = password
        if mode is not None:
            self.mode = mode

    @property
    def configuration(self):
        """Gets the configuration of this BTExportModelParams.  # noqa: E501


        :return: The configuration of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this BTExportModelParams.


        :param configuration: The configuration of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def workspace_id(self):
        """Gets the workspace_id of this BTExportModelParams.  # noqa: E501


        :return: The workspace_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this BTExportModelParams.


        :param workspace_id: The workspace_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def element_id(self):
        """Gets the element_id of this BTExportModelParams.  # noqa: E501


        :return: The element_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this BTExportModelParams.


        :param element_id: The element_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def document_id(self):
        """Gets the document_id of this BTExportModelParams.  # noqa: E501


        :return: The document_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this BTExportModelParams.


        :param document_id: The document_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def microversion(self):
        """Gets the microversion of this BTExportModelParams.  # noqa: E501


        :return: The microversion of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._microversion

    @microversion.setter
    def microversion(self, microversion):
        """Sets the microversion of this BTExportModelParams.


        :param microversion: The microversion of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._microversion = microversion

    @property
    def link_document_id(self):
        """Gets the link_document_id of this BTExportModelParams.  # noqa: E501


        :return: The link_document_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._link_document_id

    @link_document_id.setter
    def link_document_id(self, link_document_id):
        """Sets the link_document_id of this BTExportModelParams.


        :param link_document_id: The link_document_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._link_document_id = link_document_id

    @property
    def document_version_id(self):
        """Gets the document_version_id of this BTExportModelParams.  # noqa: E501


        :return: The document_version_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._document_version_id

    @document_version_id.setter
    def document_version_id(self, document_version_id):
        """Sets the document_version_id of this BTExportModelParams.


        :param document_version_id: The document_version_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._document_version_id = document_version_id

    @property
    def link_document_workspace_id(self):
        """Gets the link_document_workspace_id of this BTExportModelParams.  # noqa: E501


        :return: The link_document_workspace_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._link_document_workspace_id

    @link_document_workspace_id.setter
    def link_document_workspace_id(self, link_document_workspace_id):
        """Sets the link_document_workspace_id of this BTExportModelParams.


        :param link_document_workspace_id: The link_document_workspace_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._link_document_workspace_id = link_document_workspace_id

    @property
    def sheet_metal_flat(self):
        """Gets the sheet_metal_flat of this BTExportModelParams.  # noqa: E501


        :return: The sheet_metal_flat of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._sheet_metal_flat

    @sheet_metal_flat.setter
    def sheet_metal_flat(self, sheet_metal_flat):
        """Sets the sheet_metal_flat of this BTExportModelParams.


        :param sheet_metal_flat: The sheet_metal_flat of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._sheet_metal_flat = sheet_metal_flat

    @property
    def include_bend_lines(self):
        """Gets the include_bend_lines of this BTExportModelParams.  # noqa: E501


        :return: The include_bend_lines of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_bend_lines

    @include_bend_lines.setter
    def include_bend_lines(self, include_bend_lines):
        """Sets the include_bend_lines of this BTExportModelParams.


        :param include_bend_lines: The include_bend_lines of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_bend_lines = include_bend_lines

    @property
    def include_sketches(self):
        """Gets the include_sketches of this BTExportModelParams.  # noqa: E501


        :return: The include_sketches of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_sketches

    @include_sketches.setter
    def include_sketches(self, include_sketches):
        """Sets the include_sketches of this BTExportModelParams.


        :param include_sketches: The include_sketches of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_sketches = include_sketches

    @property
    def flatten(self):
        """Gets the flatten of this BTExportModelParams.  # noqa: E501


        :return: The flatten of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._flatten

    @flatten.setter
    def flatten(self, flatten):
        """Sets the flatten of this BTExportModelParams.


        :param flatten: The flatten of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._flatten = flatten

    @property
    def splines_as_polylines(self):
        """Gets the splines_as_polylines of this BTExportModelParams.  # noqa: E501


        :return: The splines_as_polylines of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._splines_as_polylines

    @splines_as_polylines.setter
    def splines_as_polylines(self, splines_as_polylines):
        """Sets the splines_as_polylines of this BTExportModelParams.


        :param splines_as_polylines: The splines_as_polylines of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._splines_as_polylines = splines_as_polylines

    @property
    def is_parting_out(self):
        """Gets the is_parting_out of this BTExportModelParams.  # noqa: E501


        :return: The is_parting_out of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_parting_out

    @is_parting_out.setter
    def is_parting_out(self, is_parting_out):
        """Sets the is_parting_out of this BTExportModelParams.


        :param is_parting_out: The is_parting_out of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._is_parting_out = is_parting_out

    @property
    def include_bend_centerlines(self):
        """Gets the include_bend_centerlines of this BTExportModelParams.  # noqa: E501


        :return: The include_bend_centerlines of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_bend_centerlines

    @include_bend_centerlines.setter
    def include_bend_centerlines(self, include_bend_centerlines):
        """Sets the include_bend_centerlines of this BTExportModelParams.


        :param include_bend_centerlines: The include_bend_centerlines of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_bend_centerlines = include_bend_centerlines

    @property
    def batch_flat_patterns(self):
        """Gets the batch_flat_patterns of this BTExportModelParams.  # noqa: E501


        :return: The batch_flat_patterns of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._batch_flat_patterns

    @batch_flat_patterns.setter
    def batch_flat_patterns(self, batch_flat_patterns):
        """Sets the batch_flat_patterns of this BTExportModelParams.


        :param batch_flat_patterns: The batch_flat_patterns of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._batch_flat_patterns = batch_flat_patterns

    @property
    def store_in_document(self):
        """Gets the store_in_document of this BTExportModelParams.  # noqa: E501


        :return: The store_in_document of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._store_in_document

    @store_in_document.setter
    def store_in_document(self, store_in_document):
        """Sets the store_in_document of this BTExportModelParams.


        :param store_in_document: The store_in_document of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._store_in_document = store_in_document

    @property
    def from_user_id(self):
        """Gets the from_user_id of this BTExportModelParams.  # noqa: E501


        :return: The from_user_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._from_user_id

    @from_user_id.setter
    def from_user_id(self, from_user_id):
        """Sets the from_user_id of this BTExportModelParams.


        :param from_user_id: The from_user_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._from_user_id = from_user_id

    @property
    def cloud_storage_account_id(self):
        """Gets the cloud_storage_account_id of this BTExportModelParams.  # noqa: E501


        :return: The cloud_storage_account_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_account_id

    @cloud_storage_account_id.setter
    def cloud_storage_account_id(self, cloud_storage_account_id):
        """Sets the cloud_storage_account_id of this BTExportModelParams.


        :param cloud_storage_account_id: The cloud_storage_account_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._cloud_storage_account_id = cloud_storage_account_id

    @property
    def include_std(self):
        """Gets the include_std of this BTExportModelParams.  # noqa: E501


        :return: The include_std of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_std

    @include_std.setter
    def include_std(self, include_std):
        """Sets the include_std of this BTExportModelParams.


        :param include_std: The include_std of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_std = include_std

    @property
    def element_ids(self):
        """Gets the element_ids of this BTExportModelParams.  # noqa: E501


        :return: The element_ids of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._element_ids

    @element_ids.setter
    def element_ids(self, element_ids):
        """Sets the element_ids of this BTExportModelParams.


        :param element_ids: The element_ids of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._element_ids = element_ids

    @property
    def user_id(self):
        """Gets the user_id of this BTExportModelParams.  # noqa: E501


        :return: The user_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BTExportModelParams.


        :param user_id: The user_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def part_query(self):
        """Gets the part_query of this BTExportModelParams.  # noqa: E501


        :return: The part_query of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._part_query

    @part_query.setter
    def part_query(self, part_query):
        """Sets the part_query of this BTExportModelParams.


        :param part_query: The part_query of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._part_query = part_query

    @property
    def part_ids(self):
        """Gets the part_ids of this BTExportModelParams.  # noqa: E501


        :return: The part_ids of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._part_ids

    @part_ids.setter
    def part_ids(self, part_ids):
        """Sets the part_ids of this BTExportModelParams.


        :param part_ids: The part_ids of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._part_ids = part_ids

    @property
    def angle_tolerance(self):
        """Gets the angle_tolerance of this BTExportModelParams.  # noqa: E501


        :return: The angle_tolerance of this BTExportModelParams.  # noqa: E501
        :rtype: float
        """
        return self._angle_tolerance

    @angle_tolerance.setter
    def angle_tolerance(self, angle_tolerance):
        """Sets the angle_tolerance of this BTExportModelParams.


        :param angle_tolerance: The angle_tolerance of this BTExportModelParams.  # noqa: E501
        :type: float
        """

        self._angle_tolerance = angle_tolerance

    @property
    def chord_tolerance(self):
        """Gets the chord_tolerance of this BTExportModelParams.  # noqa: E501


        :return: The chord_tolerance of this BTExportModelParams.  # noqa: E501
        :rtype: float
        """
        return self._chord_tolerance

    @chord_tolerance.setter
    def chord_tolerance(self, chord_tolerance):
        """Sets the chord_tolerance of this BTExportModelParams.


        :param chord_tolerance: The chord_tolerance of this BTExportModelParams.  # noqa: E501
        :type: float
        """

        self._chord_tolerance = chord_tolerance

    @property
    def max_facet_width(self):
        """Gets the max_facet_width of this BTExportModelParams.  # noqa: E501


        :return: The max_facet_width of this BTExportModelParams.  # noqa: E501
        :rtype: float
        """
        return self._max_facet_width

    @max_facet_width.setter
    def max_facet_width(self, max_facet_width):
        """Sets the max_facet_width of this BTExportModelParams.


        :param max_facet_width: The max_facet_width of this BTExportModelParams.  # noqa: E501
        :type: float
        """

        self._max_facet_width = max_facet_width

    @property
    def cloud_object_id(self):
        """Gets the cloud_object_id of this BTExportModelParams.  # noqa: E501


        :return: The cloud_object_id of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._cloud_object_id

    @cloud_object_id.setter
    def cloud_object_id(self, cloud_object_id):
        """Sets the cloud_object_id of this BTExportModelParams.


        :param cloud_object_id: The cloud_object_id of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._cloud_object_id = cloud_object_id

    @property
    def email_link(self):
        """Gets the email_link of this BTExportModelParams.  # noqa: E501


        :return: The email_link of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._email_link

    @email_link.setter
    def email_link(self, email_link):
        """Sets the email_link of this BTExportModelParams.


        :param email_link: The email_link of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._email_link = email_link

    @property
    def password_required(self):
        """Gets the password_required of this BTExportModelParams.  # noqa: E501


        :return: The password_required of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._password_required

    @password_required.setter
    def password_required(self, password_required):
        """Sets the password_required of this BTExportModelParams.


        :param password_required: The password_required of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._password_required = password_required

    @property
    def email_subject(self):
        """Gets the email_subject of this BTExportModelParams.  # noqa: E501


        :return: The email_subject of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this BTExportModelParams.


        :param email_subject: The email_subject of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._email_subject = email_subject

    @property
    def email_message(self):
        """Gets the email_message of this BTExportModelParams.  # noqa: E501


        :return: The email_message of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._email_message

    @email_message.setter
    def email_message(self, email_message):
        """Sets the email_message of this BTExportModelParams.


        :param email_message: The email_message of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._email_message = email_message

    @property
    def email_to(self):
        """Gets the email_to of this BTExportModelParams.  # noqa: E501


        :return: The email_to of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._email_to

    @email_to.setter
    def email_to(self, email_to):
        """Sets the email_to of this BTExportModelParams.


        :param email_to: The email_to of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._email_to = email_to

    @property
    def send_copy_to_me(self):
        """Gets the send_copy_to_me of this BTExportModelParams.  # noqa: E501


        :return: The send_copy_to_me of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._send_copy_to_me

    @send_copy_to_me.setter
    def send_copy_to_me(self, send_copy_to_me):
        """Sets the send_copy_to_me of this BTExportModelParams.


        :param send_copy_to_me: The send_copy_to_me of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._send_copy_to_me = send_copy_to_me

    @property
    def view(self):
        """Gets the view of this BTExportModelParams.  # noqa: E501


        :return: The view of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this BTExportModelParams.


        :param view: The view of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def scale(self):
        """Gets the scale of this BTExportModelParams.  # noqa: E501


        :return: The scale of this BTExportModelParams.  # noqa: E501
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this BTExportModelParams.


        :param scale: The scale of this BTExportModelParams.  # noqa: E501
        :type: float
        """

        self._scale = scale

    @property
    def units(self):
        """Gets the units of this BTExportModelParams.  # noqa: E501


        :return: The units of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this BTExportModelParams.


        :param units: The units of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def trigger_auto_download(self):
        """Gets the trigger_auto_download of this BTExportModelParams.  # noqa: E501


        :return: The trigger_auto_download of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_auto_download

    @trigger_auto_download.setter
    def trigger_auto_download(self, trigger_auto_download):
        """Sets the trigger_auto_download of this BTExportModelParams.


        :param trigger_auto_download: The trigger_auto_download of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._trigger_auto_download = trigger_auto_download

    @property
    def valid_for_days(self):
        """Gets the valid_for_days of this BTExportModelParams.  # noqa: E501


        :return: The valid_for_days of this BTExportModelParams.  # noqa: E501
        :rtype: int
        """
        return self._valid_for_days

    @valid_for_days.setter
    def valid_for_days(self, valid_for_days):
        """Sets the valid_for_days of this BTExportModelParams.


        :param valid_for_days: The valid_for_days of this BTExportModelParams.  # noqa: E501
        :type: int
        """

        self._valid_for_days = valid_for_days

    @property
    def feature_ids(self):
        """Gets the feature_ids of this BTExportModelParams.  # noqa: E501


        :return: The feature_ids of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._feature_ids

    @feature_ids.setter
    def feature_ids(self, feature_ids):
        """Sets the feature_ids of this BTExportModelParams.


        :param feature_ids: The feature_ids of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._feature_ids = feature_ids

    @property
    def destination_name(self):
        """Gets the destination_name of this BTExportModelParams.  # noqa: E501


        :return: The destination_name of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this BTExportModelParams.


        :param destination_name: The destination_name of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def include_export_ids(self):
        """Gets the include_export_ids of this BTExportModelParams.  # noqa: E501


        :return: The include_export_ids of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_export_ids

    @include_export_ids.setter
    def include_export_ids(self, include_export_ids):
        """Sets the include_export_ids of this BTExportModelParams.


        :param include_export_ids: The include_export_ids of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_export_ids = include_export_ids

    @property
    def min_facet_width(self):
        """Gets the min_facet_width of this BTExportModelParams.  # noqa: E501


        :return: The min_facet_width of this BTExportModelParams.  # noqa: E501
        :rtype: float
        """
        return self._min_facet_width

    @min_facet_width.setter
    def min_facet_width(self, min_facet_width):
        """Sets the min_facet_width of this BTExportModelParams.


        :param min_facet_width: The min_facet_width of this BTExportModelParams.  # noqa: E501
        :type: float
        """

        self._min_facet_width = min_facet_width

    @property
    def resolution(self):
        """Gets the resolution of this BTExportModelParams.  # noqa: E501


        :return: The resolution of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this BTExportModelParams.


        :param resolution: The resolution of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def grouping(self):
        """Gets the grouping of this BTExportModelParams.  # noqa: E501


        :return: The grouping of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this BTExportModelParams.


        :param grouping: The grouping of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._grouping = grouping

    @property
    def zip_single_file_output(self):
        """Gets the zip_single_file_output of this BTExportModelParams.  # noqa: E501


        :return: The zip_single_file_output of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._zip_single_file_output

    @zip_single_file_output.setter
    def zip_single_file_output(self, zip_single_file_output):
        """Sets the zip_single_file_output of this BTExportModelParams.


        :param zip_single_file_output: The zip_single_file_output of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._zip_single_file_output = zip_single_file_output

    @property
    def include_foreign_data(self):
        """Gets the include_foreign_data of this BTExportModelParams.  # noqa: E501


        :return: The include_foreign_data of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_foreign_data

    @include_foreign_data.setter
    def include_foreign_data(self, include_foreign_data):
        """Sets the include_foreign_data of this BTExportModelParams.


        :param include_foreign_data: The include_foreign_data of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_foreign_data = include_foreign_data

    @property
    def deep_search_for_foreign_data(self):
        """Gets the deep_search_for_foreign_data of this BTExportModelParams.  # noqa: E501


        :return: The deep_search_for_foreign_data of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._deep_search_for_foreign_data

    @deep_search_for_foreign_data.setter
    def deep_search_for_foreign_data(self, deep_search_for_foreign_data):
        """Sets the deep_search_for_foreign_data of this BTExportModelParams.


        :param deep_search_for_foreign_data: The deep_search_for_foreign_data of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._deep_search_for_foreign_data = deep_search_for_foreign_data

    @property
    def include_release_management_data(self):
        """Gets the include_release_management_data of this BTExportModelParams.  # noqa: E501


        :return: The include_release_management_data of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_release_management_data

    @include_release_management_data.setter
    def include_release_management_data(self, include_release_management_data):
        """Sets the include_release_management_data of this BTExportModelParams.


        :param include_release_management_data: The include_release_management_data of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_release_management_data = include_release_management_data

    @property
    def include_custom_properties_data(self):
        """Gets the include_custom_properties_data of this BTExportModelParams.  # noqa: E501


        :return: The include_custom_properties_data of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_custom_properties_data

    @include_custom_properties_data.setter
    def include_custom_properties_data(self, include_custom_properties_data):
        """Sets the include_custom_properties_data of this BTExportModelParams.


        :param include_custom_properties_data: The include_custom_properties_data of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_custom_properties_data = include_custom_properties_data

    @property
    def include_custom_properties(self):
        """Gets the include_custom_properties of this BTExportModelParams.  # noqa: E501


        :return: The include_custom_properties of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_custom_properties

    @include_custom_properties.setter
    def include_custom_properties(self, include_custom_properties):
        """Sets the include_custom_properties of this BTExportModelParams.


        :param include_custom_properties: The include_custom_properties of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_custom_properties = include_custom_properties

    @property
    def include_items_data(self):
        """Gets the include_items_data of this BTExportModelParams.  # noqa: E501


        :return: The include_items_data of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_items_data

    @include_items_data.setter
    def include_items_data(self, include_items_data):
        """Sets the include_items_data of this BTExportModelParams.


        :param include_items_data: The include_items_data of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_items_data = include_items_data

    @property
    def include_linked_documents(self):
        """Gets the include_linked_documents of this BTExportModelParams.  # noqa: E501


        :return: The include_linked_documents of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._include_linked_documents

    @include_linked_documents.setter
    def include_linked_documents(self, include_linked_documents):
        """Sets the include_linked_documents of this BTExportModelParams.


        :param include_linked_documents: The include_linked_documents of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._include_linked_documents = include_linked_documents

    @property
    def extract_to_s3(self):
        """Gets the extract_to_s3 of this BTExportModelParams.  # noqa: E501


        :return: The extract_to_s3 of this BTExportModelParams.  # noqa: E501
        :rtype: bool
        """
        return self._extract_to_s3

    @extract_to_s3.setter
    def extract_to_s3(self, extract_to_s3):
        """Sets the extract_to_s3 of this BTExportModelParams.


        :param extract_to_s3: The extract_to_s3 of this BTExportModelParams.  # noqa: E501
        :type: bool
        """

        self._extract_to_s3 = extract_to_s3

    @property
    def version(self):
        """Gets the version of this BTExportModelParams.  # noqa: E501


        :return: The version of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BTExportModelParams.


        :param version: The version of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def format(self):
        """Gets the format of this BTExportModelParams.  # noqa: E501


        :return: The format of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this BTExportModelParams.


        :param format: The format of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def password(self):
        """Gets the password of this BTExportModelParams.  # noqa: E501


        :return: The password of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BTExportModelParams.


        :param password: The password of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def mode(self):
        """Gets the mode of this BTExportModelParams.  # noqa: E501


        :return: The mode of this BTExportModelParams.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this BTExportModelParams.


        :param mode: The mode of this BTExportModelParams.  # noqa: E501
        :type: str
        """

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTExportModelParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTExportModelParams):
            return True

        return self.to_dict() != other.to_dict()
