# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTMSketchGeomEntity5(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'control_box_ids': 'list[str]',
        'is_construction': 'bool',
        'parameters': 'list[BTMParameter1]',
        'entity_id_and_replace_in_dependent_fields': 'str',
        'node_id': 'str',
        'namespace': 'str',
        'import_microversion': 'str',
        'entity_id': 'str',
        'bt_type': 'str'
    }

    attribute_map = {
        'control_box_ids': 'controlBoxIds',
        'is_construction': 'isConstruction',
        'parameters': 'parameters',
        'entity_id_and_replace_in_dependent_fields': 'entityIdAndReplaceInDependentFields',
        'node_id': 'nodeId',
        'namespace': 'namespace',
        'import_microversion': 'importMicroversion',
        'entity_id': 'entityId',
        'bt_type': 'btType'
    }

    discriminator_value_class_map = {
        'BTMSketchCurve-4': 'BTMSketchCurve4',
        'BTMSketchTextEntity-1761': 'BTMSketchTextEntity1761',
        'BTMSketchImageEntity-763': 'BTMSketchImageEntity763',
        'BTMSketchPoint-158': 'BTMSketchPoint158'
    }

    def __init__(self, control_box_ids=None, is_construction=None, parameters=None, entity_id_and_replace_in_dependent_fields=None, node_id=None, namespace=None, import_microversion=None, entity_id=None, bt_type=None, local_vars_configuration=None):  # noqa: E501
        """BTMSketchGeomEntity5 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._control_box_ids = None
        self._is_construction = None
        self._parameters = None
        self._entity_id_and_replace_in_dependent_fields = None
        self._node_id = None
        self._namespace = None
        self._import_microversion = None
        self._entity_id = None
        self._bt_type = None
        self.discriminator = 'bt_type'

        if control_box_ids is not None:
            self.control_box_ids = control_box_ids
        if is_construction is not None:
            self.is_construction = is_construction
        if parameters is not None:
            self.parameters = parameters
        if entity_id_and_replace_in_dependent_fields is not None:
            self.entity_id_and_replace_in_dependent_fields = entity_id_and_replace_in_dependent_fields
        if node_id is not None:
            self.node_id = node_id
        if namespace is not None:
            self.namespace = namespace
        if import_microversion is not None:
            self.import_microversion = import_microversion
        if entity_id is not None:
            self.entity_id = entity_id
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def control_box_ids(self):
        """Gets the control_box_ids of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The control_box_ids of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: list[str]
        """
        return self._control_box_ids

    @control_box_ids.setter
    def control_box_ids(self, control_box_ids):
        """Sets the control_box_ids of this BTMSketchGeomEntity5.


        :param control_box_ids: The control_box_ids of this BTMSketchGeomEntity5.  # noqa: E501
        :type: list[str]
        """

        self._control_box_ids = control_box_ids

    @property
    def is_construction(self):
        """Gets the is_construction of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The is_construction of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: bool
        """
        return self._is_construction

    @is_construction.setter
    def is_construction(self, is_construction):
        """Sets the is_construction of this BTMSketchGeomEntity5.


        :param is_construction: The is_construction of this BTMSketchGeomEntity5.  # noqa: E501
        :type: bool
        """

        self._is_construction = is_construction

    @property
    def parameters(self):
        """Gets the parameters of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The parameters of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: list[BTMParameter1]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this BTMSketchGeomEntity5.


        :param parameters: The parameters of this BTMSketchGeomEntity5.  # noqa: E501
        :type: list[BTMParameter1]
        """

        self._parameters = parameters

    @property
    def entity_id_and_replace_in_dependent_fields(self):
        """Gets the entity_id_and_replace_in_dependent_fields of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The entity_id_and_replace_in_dependent_fields of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: str
        """
        return self._entity_id_and_replace_in_dependent_fields

    @entity_id_and_replace_in_dependent_fields.setter
    def entity_id_and_replace_in_dependent_fields(self, entity_id_and_replace_in_dependent_fields):
        """Sets the entity_id_and_replace_in_dependent_fields of this BTMSketchGeomEntity5.


        :param entity_id_and_replace_in_dependent_fields: The entity_id_and_replace_in_dependent_fields of this BTMSketchGeomEntity5.  # noqa: E501
        :type: str
        """

        self._entity_id_and_replace_in_dependent_fields = entity_id_and_replace_in_dependent_fields

    @property
    def node_id(self):
        """Gets the node_id of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The node_id of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this BTMSketchGeomEntity5.


        :param node_id: The node_id of this BTMSketchGeomEntity5.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def namespace(self):
        """Gets the namespace of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The namespace of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BTMSketchGeomEntity5.


        :param namespace: The namespace of this BTMSketchGeomEntity5.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def import_microversion(self):
        """Gets the import_microversion of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The import_microversion of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: str
        """
        return self._import_microversion

    @import_microversion.setter
    def import_microversion(self, import_microversion):
        """Sets the import_microversion of this BTMSketchGeomEntity5.


        :param import_microversion: The import_microversion of this BTMSketchGeomEntity5.  # noqa: E501
        :type: str
        """

        self._import_microversion = import_microversion

    @property
    def entity_id(self):
        """Gets the entity_id of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The entity_id of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this BTMSketchGeomEntity5.


        :param entity_id: The entity_id of this BTMSketchGeomEntity5.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def bt_type(self):
        """Gets the bt_type of this BTMSketchGeomEntity5.  # noqa: E501


        :return: The bt_type of this BTMSketchGeomEntity5.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTMSketchGeomEntity5.


        :param bt_type: The bt_type of this BTMSketchGeomEntity5.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTMSketchGeomEntity5):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTMSketchGeomEntity5):
            return True

        return self.to_dict() != other.to_dict()
