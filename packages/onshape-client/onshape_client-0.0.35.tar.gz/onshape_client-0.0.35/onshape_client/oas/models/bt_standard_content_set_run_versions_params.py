# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTStandardContentSetRunVersionsParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'component_document_id': 'str',
        'production_version_id': 'str',
        'test_version_id': 'str'
    }

    attribute_map = {
        'component_document_id': 'componentDocumentId',
        'production_version_id': 'productionVersionId',
        'test_version_id': 'testVersionId'
    }

    def __init__(self, component_document_id=None, production_version_id=None, test_version_id=None):  # noqa: E501
        """BTStandardContentSetRunVersionsParams - a model defined in OpenAPI"""  # noqa: E501

        self._component_document_id = None
        self._production_version_id = None
        self._test_version_id = None
        self.discriminator = None

        if component_document_id is not None:
            self.component_document_id = component_document_id
        if production_version_id is not None:
            self.production_version_id = production_version_id
        if test_version_id is not None:
            self.test_version_id = test_version_id

    @property
    def component_document_id(self):
        """Gets the component_document_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501


        :return: The component_document_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501
        :rtype: str
        """
        return self._component_document_id

    @component_document_id.setter
    def component_document_id(self, component_document_id):
        """Sets the component_document_id of this BTStandardContentSetRunVersionsParams.


        :param component_document_id: The component_document_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501
        :type: str
        """

        self._component_document_id = component_document_id

    @property
    def production_version_id(self):
        """Gets the production_version_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501


        :return: The production_version_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501
        :rtype: str
        """
        return self._production_version_id

    @production_version_id.setter
    def production_version_id(self, production_version_id):
        """Sets the production_version_id of this BTStandardContentSetRunVersionsParams.


        :param production_version_id: The production_version_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501
        :type: str
        """

        self._production_version_id = production_version_id

    @property
    def test_version_id(self):
        """Gets the test_version_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501


        :return: The test_version_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501
        :rtype: str
        """
        return self._test_version_id

    @test_version_id.setter
    def test_version_id(self, test_version_id):
        """Sets the test_version_id of this BTStandardContentSetRunVersionsParams.


        :param test_version_id: The test_version_id of this BTStandardContentSetRunVersionsParams.  # noqa: E501
        :type: str
        """

        self._test_version_id = test_version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTStandardContentSetRunVersionsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
