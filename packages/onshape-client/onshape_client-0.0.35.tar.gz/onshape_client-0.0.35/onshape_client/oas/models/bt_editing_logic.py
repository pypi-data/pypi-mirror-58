# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTEditingLogic(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'function_name': 'str',
        'wants_is_creating': 'bool',
        'wants_specified_parameters': 'bool',
        'wants_hidden_bodies': 'bool',
        'bt_type': 'str'
    }

    attribute_map = {
        'function_name': 'functionName',
        'wants_is_creating': 'wantsIsCreating',
        'wants_specified_parameters': 'wantsSpecifiedParameters',
        'wants_hidden_bodies': 'wantsHiddenBodies',
        'bt_type': 'btType'
    }

    def __init__(self, function_name=None, wants_is_creating=None, wants_specified_parameters=None, wants_hidden_bodies=None, bt_type=None):  # noqa: E501
        """BTEditingLogic - a model defined in OpenAPI"""  # noqa: E501

        self._function_name = None
        self._wants_is_creating = None
        self._wants_specified_parameters = None
        self._wants_hidden_bodies = None
        self._bt_type = None
        self.discriminator = None

        if function_name is not None:
            self.function_name = function_name
        if wants_is_creating is not None:
            self.wants_is_creating = wants_is_creating
        if wants_specified_parameters is not None:
            self.wants_specified_parameters = wants_specified_parameters
        if wants_hidden_bodies is not None:
            self.wants_hidden_bodies = wants_hidden_bodies
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def function_name(self):
        """Gets the function_name of this BTEditingLogic.  # noqa: E501


        :return: The function_name of this BTEditingLogic.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this BTEditingLogic.


        :param function_name: The function_name of this BTEditingLogic.  # noqa: E501
        :type: str
        """

        self._function_name = function_name

    @property
    def wants_is_creating(self):
        """Gets the wants_is_creating of this BTEditingLogic.  # noqa: E501


        :return: The wants_is_creating of this BTEditingLogic.  # noqa: E501
        :rtype: bool
        """
        return self._wants_is_creating

    @wants_is_creating.setter
    def wants_is_creating(self, wants_is_creating):
        """Sets the wants_is_creating of this BTEditingLogic.


        :param wants_is_creating: The wants_is_creating of this BTEditingLogic.  # noqa: E501
        :type: bool
        """

        self._wants_is_creating = wants_is_creating

    @property
    def wants_specified_parameters(self):
        """Gets the wants_specified_parameters of this BTEditingLogic.  # noqa: E501


        :return: The wants_specified_parameters of this BTEditingLogic.  # noqa: E501
        :rtype: bool
        """
        return self._wants_specified_parameters

    @wants_specified_parameters.setter
    def wants_specified_parameters(self, wants_specified_parameters):
        """Sets the wants_specified_parameters of this BTEditingLogic.


        :param wants_specified_parameters: The wants_specified_parameters of this BTEditingLogic.  # noqa: E501
        :type: bool
        """

        self._wants_specified_parameters = wants_specified_parameters

    @property
    def wants_hidden_bodies(self):
        """Gets the wants_hidden_bodies of this BTEditingLogic.  # noqa: E501


        :return: The wants_hidden_bodies of this BTEditingLogic.  # noqa: E501
        :rtype: bool
        """
        return self._wants_hidden_bodies

    @wants_hidden_bodies.setter
    def wants_hidden_bodies(self, wants_hidden_bodies):
        """Sets the wants_hidden_bodies of this BTEditingLogic.


        :param wants_hidden_bodies: The wants_hidden_bodies of this BTEditingLogic.  # noqa: E501
        :type: bool
        """

        self._wants_hidden_bodies = wants_hidden_bodies

    @property
    def bt_type(self):
        """Gets the bt_type of this BTEditingLogic.  # noqa: E501


        :return: The bt_type of this BTEditingLogic.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTEditingLogic.


        :param bt_type: The bt_type of this BTEditingLogic.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTEditingLogic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
