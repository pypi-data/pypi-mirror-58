# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTMAssemblyFeature887(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_list_field_index': 'int',
        'auxiliary_assembly_feature': 'bool',
        'occurrence_queries_from_all_configurations': 'list[BTMIndividualQueryWithOccurrenceBase904]',
        'version': 'int',
        'bt_type': 'str'
    }

    attribute_map = {
        'feature_list_field_index': 'featureListFieldIndex',
        'auxiliary_assembly_feature': 'auxiliaryAssemblyFeature',
        'occurrence_queries_from_all_configurations': 'occurrenceQueriesFromAllConfigurations',
        'version': 'version',
        'bt_type': 'btType'
    }

    discriminator_value_class_map = {
        'BTMGeometryMate-1260': 'BTMGeometryMate1260',
        'BTMNonGeometricItem-1864': 'BTMNonGeometricItem1864',
        'BTExplosionStepFeature-3008': 'BTExplosionStepFeature3008',
        'BTMMateRelation-1412': 'BTMMateRelation1412',
        'BTExplosion-2754': 'BTExplosion2754',
        'BTMAssemblyFeature1-2218': 'BTMAssemblyFeature12218',
        'BTMAssemblyFeature2-1022': 'BTMAssemblyFeature21022',
        'BTMMateConnector-66': 'BTMMateConnector66',
        'BTMMate-64': 'BTMMate64',
        'BTMAssemblyPatternFeature-2241': 'BTMAssemblyPatternFeature2241',
        'BTMMateGroup-65': 'BTMMateGroup65'
    }

    def __init__(self, feature_list_field_index=None, auxiliary_assembly_feature=None, occurrence_queries_from_all_configurations=None, version=None, bt_type=None, local_vars_configuration=None):  # noqa: E501
        """BTMAssemblyFeature887 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feature_list_field_index = None
        self._auxiliary_assembly_feature = None
        self._occurrence_queries_from_all_configurations = None
        self._version = None
        self._bt_type = None
        self.discriminator = 'bt_type'

        if feature_list_field_index is not None:
            self.feature_list_field_index = feature_list_field_index
        if auxiliary_assembly_feature is not None:
            self.auxiliary_assembly_feature = auxiliary_assembly_feature
        if occurrence_queries_from_all_configurations is not None:
            self.occurrence_queries_from_all_configurations = occurrence_queries_from_all_configurations
        if version is not None:
            self.version = version
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def feature_list_field_index(self):
        """Gets the feature_list_field_index of this BTMAssemblyFeature887.  # noqa: E501


        :return: The feature_list_field_index of this BTMAssemblyFeature887.  # noqa: E501
        :rtype: int
        """
        return self._feature_list_field_index

    @feature_list_field_index.setter
    def feature_list_field_index(self, feature_list_field_index):
        """Sets the feature_list_field_index of this BTMAssemblyFeature887.


        :param feature_list_field_index: The feature_list_field_index of this BTMAssemblyFeature887.  # noqa: E501
        :type: int
        """

        self._feature_list_field_index = feature_list_field_index

    @property
    def auxiliary_assembly_feature(self):
        """Gets the auxiliary_assembly_feature of this BTMAssemblyFeature887.  # noqa: E501


        :return: The auxiliary_assembly_feature of this BTMAssemblyFeature887.  # noqa: E501
        :rtype: bool
        """
        return self._auxiliary_assembly_feature

    @auxiliary_assembly_feature.setter
    def auxiliary_assembly_feature(self, auxiliary_assembly_feature):
        """Sets the auxiliary_assembly_feature of this BTMAssemblyFeature887.


        :param auxiliary_assembly_feature: The auxiliary_assembly_feature of this BTMAssemblyFeature887.  # noqa: E501
        :type: bool
        """

        self._auxiliary_assembly_feature = auxiliary_assembly_feature

    @property
    def occurrence_queries_from_all_configurations(self):
        """Gets the occurrence_queries_from_all_configurations of this BTMAssemblyFeature887.  # noqa: E501


        :return: The occurrence_queries_from_all_configurations of this BTMAssemblyFeature887.  # noqa: E501
        :rtype: list[BTMIndividualQueryWithOccurrenceBase904]
        """
        return self._occurrence_queries_from_all_configurations

    @occurrence_queries_from_all_configurations.setter
    def occurrence_queries_from_all_configurations(self, occurrence_queries_from_all_configurations):
        """Sets the occurrence_queries_from_all_configurations of this BTMAssemblyFeature887.


        :param occurrence_queries_from_all_configurations: The occurrence_queries_from_all_configurations of this BTMAssemblyFeature887.  # noqa: E501
        :type: list[BTMIndividualQueryWithOccurrenceBase904]
        """

        self._occurrence_queries_from_all_configurations = occurrence_queries_from_all_configurations

    @property
    def version(self):
        """Gets the version of this BTMAssemblyFeature887.  # noqa: E501


        :return: The version of this BTMAssemblyFeature887.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BTMAssemblyFeature887.


        :param version: The version of this BTMAssemblyFeature887.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def bt_type(self):
        """Gets the bt_type of this BTMAssemblyFeature887.  # noqa: E501


        :return: The bt_type of this BTMAssemblyFeature887.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTMAssemblyFeature887.


        :param bt_type: The bt_type of this BTMAssemblyFeature887.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTMAssemblyFeature887):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTMAssemblyFeature887):
            return True

        return self.to_dict() != other.to_dict()
