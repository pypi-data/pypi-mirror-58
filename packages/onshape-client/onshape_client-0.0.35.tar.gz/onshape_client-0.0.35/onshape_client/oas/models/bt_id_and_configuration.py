# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.103
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTIdAndConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configuration': 'dict(str, BTFSValue)',
        'configuration_is_null': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'configuration': 'configuration',
        'configuration_is_null': 'configurationIsNull',
        'id': 'id'
    }

    def __init__(self, configuration=None, configuration_is_null=None, id=None):  # noqa: E501
        """BTIdAndConfiguration - a model defined in OpenAPI"""  # noqa: E501

        self._configuration = None
        self._configuration_is_null = None
        self._id = None
        self.discriminator = None

        if configuration is not None:
            self.configuration = configuration
        if configuration_is_null is not None:
            self.configuration_is_null = configuration_is_null
        if id is not None:
            self.id = id

    @property
    def configuration(self):
        """Gets the configuration of this BTIdAndConfiguration.  # noqa: E501


        :return: The configuration of this BTIdAndConfiguration.  # noqa: E501
        :rtype: dict(str, BTFSValue)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this BTIdAndConfiguration.


        :param configuration: The configuration of this BTIdAndConfiguration.  # noqa: E501
        :type: dict(str, BTFSValue)
        """

        self._configuration = configuration

    @property
    def configuration_is_null(self):
        """Gets the configuration_is_null of this BTIdAndConfiguration.  # noqa: E501


        :return: The configuration_is_null of this BTIdAndConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._configuration_is_null

    @configuration_is_null.setter
    def configuration_is_null(self, configuration_is_null):
        """Sets the configuration_is_null of this BTIdAndConfiguration.


        :param configuration_is_null: The configuration_is_null of this BTIdAndConfiguration.  # noqa: E501
        :type: bool
        """

        self._configuration_is_null = configuration_is_null

    @property
    def id(self):
        """Gets the id of this BTIdAndConfiguration.  # noqa: E501


        :return: The id of this BTIdAndConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BTIdAndConfiguration.


        :param id: The id of this BTIdAndConfiguration.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTIdAndConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
