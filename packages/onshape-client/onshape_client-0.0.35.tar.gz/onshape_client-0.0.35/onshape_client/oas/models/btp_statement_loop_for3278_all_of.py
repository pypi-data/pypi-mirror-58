# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTPStatementLoopFor3278AllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'condition': 'BTPExpression9',
        'initialization': 'BTPStatement269',
        'space_before_condition': 'BTPSpace10',
        'space_before_increment': 'BTPSpace10',
        'space_after_initialization': 'BTPSpace10',
        'increment': 'BTPStatement269',
        'bt_type': 'str'
    }

    attribute_map = {
        'condition': 'condition',
        'initialization': 'initialization',
        'space_before_condition': 'spaceBeforeCondition',
        'space_before_increment': 'spaceBeforeIncrement',
        'space_after_initialization': 'spaceAfterInitialization',
        'increment': 'increment',
        'bt_type': 'btType'
    }

    def __init__(self, condition=None, initialization=None, space_before_condition=None, space_before_increment=None, space_after_initialization=None, increment=None, bt_type=None, local_vars_configuration=None):  # noqa: E501
        """BTPStatementLoopFor3278AllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._condition = None
        self._initialization = None
        self._space_before_condition = None
        self._space_before_increment = None
        self._space_after_initialization = None
        self._increment = None
        self._bt_type = None
        self.discriminator = None

        if condition is not None:
            self.condition = condition
        if initialization is not None:
            self.initialization = initialization
        if space_before_condition is not None:
            self.space_before_condition = space_before_condition
        if space_before_increment is not None:
            self.space_before_increment = space_before_increment
        if space_after_initialization is not None:
            self.space_after_initialization = space_after_initialization
        if increment is not None:
            self.increment = increment
        if bt_type is not None:
            self.bt_type = bt_type

    @property
    def condition(self):
        """Gets the condition of this BTPStatementLoopFor3278AllOf.  # noqa: E501


        :return: The condition of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :rtype: BTPExpression9
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this BTPStatementLoopFor3278AllOf.


        :param condition: The condition of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :type: BTPExpression9
        """

        self._condition = condition

    @property
    def initialization(self):
        """Gets the initialization of this BTPStatementLoopFor3278AllOf.  # noqa: E501


        :return: The initialization of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :rtype: BTPStatement269
        """
        return self._initialization

    @initialization.setter
    def initialization(self, initialization):
        """Sets the initialization of this BTPStatementLoopFor3278AllOf.


        :param initialization: The initialization of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :type: BTPStatement269
        """

        self._initialization = initialization

    @property
    def space_before_condition(self):
        """Gets the space_before_condition of this BTPStatementLoopFor3278AllOf.  # noqa: E501


        :return: The space_before_condition of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_before_condition

    @space_before_condition.setter
    def space_before_condition(self, space_before_condition):
        """Sets the space_before_condition of this BTPStatementLoopFor3278AllOf.


        :param space_before_condition: The space_before_condition of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_before_condition = space_before_condition

    @property
    def space_before_increment(self):
        """Gets the space_before_increment of this BTPStatementLoopFor3278AllOf.  # noqa: E501


        :return: The space_before_increment of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_before_increment

    @space_before_increment.setter
    def space_before_increment(self, space_before_increment):
        """Sets the space_before_increment of this BTPStatementLoopFor3278AllOf.


        :param space_before_increment: The space_before_increment of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_before_increment = space_before_increment

    @property
    def space_after_initialization(self):
        """Gets the space_after_initialization of this BTPStatementLoopFor3278AllOf.  # noqa: E501


        :return: The space_after_initialization of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_after_initialization

    @space_after_initialization.setter
    def space_after_initialization(self, space_after_initialization):
        """Sets the space_after_initialization of this BTPStatementLoopFor3278AllOf.


        :param space_after_initialization: The space_after_initialization of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_after_initialization = space_after_initialization

    @property
    def increment(self):
        """Gets the increment of this BTPStatementLoopFor3278AllOf.  # noqa: E501


        :return: The increment of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :rtype: BTPStatement269
        """
        return self._increment

    @increment.setter
    def increment(self, increment):
        """Sets the increment of this BTPStatementLoopFor3278AllOf.


        :param increment: The increment of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :type: BTPStatement269
        """

        self._increment = increment

    @property
    def bt_type(self):
        """Gets the bt_type of this BTPStatementLoopFor3278AllOf.  # noqa: E501


        :return: The bt_type of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :rtype: str
        """
        return self._bt_type

    @bt_type.setter
    def bt_type(self, bt_type):
        """Sets the bt_type of this BTPStatementLoopFor3278AllOf.


        :param bt_type: The bt_type of this BTPStatementLoopFor3278AllOf.  # noqa: E501
        :type: str
        """

        self._bt_type = bt_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTPStatementLoopFor3278AllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTPStatementLoopFor3278AllOf):
            return True

        return self.to_dict() != other.to_dict()
