# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class RequestOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key': 'str',
        'stripe_version': 'str',
        'idempotency_key': 'str',
        'stripe_account': 'str',
        'connect_timeout': 'int',
        'read_timeout': 'int'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'stripe_version': 'stripeVersion',
        'idempotency_key': 'idempotencyKey',
        'stripe_account': 'stripeAccount',
        'connect_timeout': 'connectTimeout',
        'read_timeout': 'readTimeout'
    }

    def __init__(self, api_key=None, stripe_version=None, idempotency_key=None, stripe_account=None, connect_timeout=None, read_timeout=None, local_vars_configuration=None):  # noqa: E501
        """RequestOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._stripe_version = None
        self._idempotency_key = None
        self._stripe_account = None
        self._connect_timeout = None
        self._read_timeout = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if stripe_version is not None:
            self.stripe_version = stripe_version
        if idempotency_key is not None:
            self.idempotency_key = idempotency_key
        if stripe_account is not None:
            self.stripe_account = stripe_account
        if connect_timeout is not None:
            self.connect_timeout = connect_timeout
        if read_timeout is not None:
            self.read_timeout = read_timeout

    @property
    def api_key(self):
        """Gets the api_key of this RequestOptions.  # noqa: E501


        :return: The api_key of this RequestOptions.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this RequestOptions.


        :param api_key: The api_key of this RequestOptions.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def stripe_version(self):
        """Gets the stripe_version of this RequestOptions.  # noqa: E501


        :return: The stripe_version of this RequestOptions.  # noqa: E501
        :rtype: str
        """
        return self._stripe_version

    @stripe_version.setter
    def stripe_version(self, stripe_version):
        """Sets the stripe_version of this RequestOptions.


        :param stripe_version: The stripe_version of this RequestOptions.  # noqa: E501
        :type: str
        """

        self._stripe_version = stripe_version

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this RequestOptions.  # noqa: E501


        :return: The idempotency_key of this RequestOptions.  # noqa: E501
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this RequestOptions.


        :param idempotency_key: The idempotency_key of this RequestOptions.  # noqa: E501
        :type: str
        """

        self._idempotency_key = idempotency_key

    @property
    def stripe_account(self):
        """Gets the stripe_account of this RequestOptions.  # noqa: E501


        :return: The stripe_account of this RequestOptions.  # noqa: E501
        :rtype: str
        """
        return self._stripe_account

    @stripe_account.setter
    def stripe_account(self, stripe_account):
        """Sets the stripe_account of this RequestOptions.


        :param stripe_account: The stripe_account of this RequestOptions.  # noqa: E501
        :type: str
        """

        self._stripe_account = stripe_account

    @property
    def connect_timeout(self):
        """Gets the connect_timeout of this RequestOptions.  # noqa: E501


        :return: The connect_timeout of this RequestOptions.  # noqa: E501
        :rtype: int
        """
        return self._connect_timeout

    @connect_timeout.setter
    def connect_timeout(self, connect_timeout):
        """Sets the connect_timeout of this RequestOptions.


        :param connect_timeout: The connect_timeout of this RequestOptions.  # noqa: E501
        :type: int
        """

        self._connect_timeout = connect_timeout

    @property
    def read_timeout(self):
        """Gets the read_timeout of this RequestOptions.  # noqa: E501


        :return: The read_timeout of this RequestOptions.  # noqa: E501
        :rtype: int
        """
        return self._read_timeout

    @read_timeout.setter
    def read_timeout(self, read_timeout):
        """Sets the read_timeout of this RequestOptions.


        :param read_timeout: The read_timeout of this RequestOptions.  # noqa: E501
        :type: int
        """

        self._read_timeout = read_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestOptions):
            return True

        return self.to_dict() != other.to_dict()
