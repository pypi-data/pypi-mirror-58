# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTAPIApplicationExtensionParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_url': 'str',
        'action_type': 'int',
        'extension_type': 'int',
        'shows_response': 'bool',
        'description': 'str',
        'client_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'action_url': 'actionUrl',
        'action_type': 'actionType',
        'extension_type': 'extensionType',
        'shows_response': 'showsResponse',
        'description': 'description',
        'client_id': 'clientId',
        'name': 'name'
    }

    def __init__(self, action_url=None, action_type=None, extension_type=None, shows_response=None, description=None, client_id=None, name=None):  # noqa: E501
        """BTAPIApplicationExtensionParams - a model defined in OpenAPI"""  # noqa: E501

        self._action_url = None
        self._action_type = None
        self._extension_type = None
        self._shows_response = None
        self._description = None
        self._client_id = None
        self._name = None
        self.discriminator = None

        if action_url is not None:
            self.action_url = action_url
        if action_type is not None:
            self.action_type = action_type
        if extension_type is not None:
            self.extension_type = extension_type
        if shows_response is not None:
            self.shows_response = shows_response
        if description is not None:
            self.description = description
        if client_id is not None:
            self.client_id = client_id
        if name is not None:
            self.name = name

    @property
    def action_url(self):
        """Gets the action_url of this BTAPIApplicationExtensionParams.  # noqa: E501


        :return: The action_url of this BTAPIApplicationExtensionParams.  # noqa: E501
        :rtype: str
        """
        return self._action_url

    @action_url.setter
    def action_url(self, action_url):
        """Sets the action_url of this BTAPIApplicationExtensionParams.


        :param action_url: The action_url of this BTAPIApplicationExtensionParams.  # noqa: E501
        :type: str
        """

        self._action_url = action_url

    @property
    def action_type(self):
        """Gets the action_type of this BTAPIApplicationExtensionParams.  # noqa: E501


        :return: The action_type of this BTAPIApplicationExtensionParams.  # noqa: E501
        :rtype: int
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this BTAPIApplicationExtensionParams.


        :param action_type: The action_type of this BTAPIApplicationExtensionParams.  # noqa: E501
        :type: int
        """

        self._action_type = action_type

    @property
    def extension_type(self):
        """Gets the extension_type of this BTAPIApplicationExtensionParams.  # noqa: E501


        :return: The extension_type of this BTAPIApplicationExtensionParams.  # noqa: E501
        :rtype: int
        """
        return self._extension_type

    @extension_type.setter
    def extension_type(self, extension_type):
        """Sets the extension_type of this BTAPIApplicationExtensionParams.


        :param extension_type: The extension_type of this BTAPIApplicationExtensionParams.  # noqa: E501
        :type: int
        """

        self._extension_type = extension_type

    @property
    def shows_response(self):
        """Gets the shows_response of this BTAPIApplicationExtensionParams.  # noqa: E501


        :return: The shows_response of this BTAPIApplicationExtensionParams.  # noqa: E501
        :rtype: bool
        """
        return self._shows_response

    @shows_response.setter
    def shows_response(self, shows_response):
        """Sets the shows_response of this BTAPIApplicationExtensionParams.


        :param shows_response: The shows_response of this BTAPIApplicationExtensionParams.  # noqa: E501
        :type: bool
        """

        self._shows_response = shows_response

    @property
    def description(self):
        """Gets the description of this BTAPIApplicationExtensionParams.  # noqa: E501


        :return: The description of this BTAPIApplicationExtensionParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BTAPIApplicationExtensionParams.


        :param description: The description of this BTAPIApplicationExtensionParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def client_id(self):
        """Gets the client_id of this BTAPIApplicationExtensionParams.  # noqa: E501


        :return: The client_id of this BTAPIApplicationExtensionParams.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this BTAPIApplicationExtensionParams.


        :param client_id: The client_id of this BTAPIApplicationExtensionParams.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def name(self):
        """Gets the name of this BTAPIApplicationExtensionParams.  # noqa: E501


        :return: The name of this BTAPIApplicationExtensionParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BTAPIApplicationExtensionParams.


        :param name: The name of this BTAPIApplicationExtensionParams.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTAPIApplicationExtensionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
