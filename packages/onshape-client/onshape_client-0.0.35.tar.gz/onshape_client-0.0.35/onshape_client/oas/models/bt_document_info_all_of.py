# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.107
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.oas.configuration import Configuration


class BTDocumentInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document_thumbnail_element_id': 'str',
        'beta_capability_ids': 'list[str]',
        'duplicate_name_violation_error': 'str',
        'is_upgraded_to_latest_version': 'bool'
    }

    attribute_map = {
        'document_thumbnail_element_id': 'documentThumbnailElementId',
        'beta_capability_ids': 'betaCapabilityIds',
        'duplicate_name_violation_error': 'duplicateNameViolationError',
        'is_upgraded_to_latest_version': 'isUpgradedToLatestVersion'
    }

    def __init__(self, document_thumbnail_element_id=None, beta_capability_ids=None, duplicate_name_violation_error=None, is_upgraded_to_latest_version=None, local_vars_configuration=None):  # noqa: E501
        """BTDocumentInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document_thumbnail_element_id = None
        self._beta_capability_ids = None
        self._duplicate_name_violation_error = None
        self._is_upgraded_to_latest_version = None
        self.discriminator = None

        if document_thumbnail_element_id is not None:
            self.document_thumbnail_element_id = document_thumbnail_element_id
        if beta_capability_ids is not None:
            self.beta_capability_ids = beta_capability_ids
        if duplicate_name_violation_error is not None:
            self.duplicate_name_violation_error = duplicate_name_violation_error
        if is_upgraded_to_latest_version is not None:
            self.is_upgraded_to_latest_version = is_upgraded_to_latest_version

    @property
    def document_thumbnail_element_id(self):
        """Gets the document_thumbnail_element_id of this BTDocumentInfoAllOf.  # noqa: E501


        :return: The document_thumbnail_element_id of this BTDocumentInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._document_thumbnail_element_id

    @document_thumbnail_element_id.setter
    def document_thumbnail_element_id(self, document_thumbnail_element_id):
        """Sets the document_thumbnail_element_id of this BTDocumentInfoAllOf.


        :param document_thumbnail_element_id: The document_thumbnail_element_id of this BTDocumentInfoAllOf.  # noqa: E501
        :type: str
        """

        self._document_thumbnail_element_id = document_thumbnail_element_id

    @property
    def beta_capability_ids(self):
        """Gets the beta_capability_ids of this BTDocumentInfoAllOf.  # noqa: E501


        :return: The beta_capability_ids of this BTDocumentInfoAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._beta_capability_ids

    @beta_capability_ids.setter
    def beta_capability_ids(self, beta_capability_ids):
        """Sets the beta_capability_ids of this BTDocumentInfoAllOf.


        :param beta_capability_ids: The beta_capability_ids of this BTDocumentInfoAllOf.  # noqa: E501
        :type: list[str]
        """

        self._beta_capability_ids = beta_capability_ids

    @property
    def duplicate_name_violation_error(self):
        """Gets the duplicate_name_violation_error of this BTDocumentInfoAllOf.  # noqa: E501


        :return: The duplicate_name_violation_error of this BTDocumentInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._duplicate_name_violation_error

    @duplicate_name_violation_error.setter
    def duplicate_name_violation_error(self, duplicate_name_violation_error):
        """Sets the duplicate_name_violation_error of this BTDocumentInfoAllOf.


        :param duplicate_name_violation_error: The duplicate_name_violation_error of this BTDocumentInfoAllOf.  # noqa: E501
        :type: str
        """

        self._duplicate_name_violation_error = duplicate_name_violation_error

    @property
    def is_upgraded_to_latest_version(self):
        """Gets the is_upgraded_to_latest_version of this BTDocumentInfoAllOf.  # noqa: E501


        :return: The is_upgraded_to_latest_version of this BTDocumentInfoAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_upgraded_to_latest_version

    @is_upgraded_to_latest_version.setter
    def is_upgraded_to_latest_version(self, is_upgraded_to_latest_version):
        """Sets the is_upgraded_to_latest_version of this BTDocumentInfoAllOf.


        :param is_upgraded_to_latest_version: The is_upgraded_to_latest_version of this BTDocumentInfoAllOf.  # noqa: E501
        :type: bool
        """

        self._is_upgraded_to_latest_version = is_upgraded_to_latest_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTDocumentInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BTDocumentInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
