# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTBetaCapabilityParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'capability': 'str',
        'eula': 'str',
        'approvals_per_hour': 'float',
        'auto_approve': 'bool',
        'auto_approve_paid': 'bool',
        'auto_approve_onshape': 'bool',
        'upgradable': 'bool',
        'user_based': 'bool',
        'self_service_disabled': 'bool',
        'user_limit': 'int',
        'welcome_html': 'str',
        'name': 'str',
        'id': 'str',
        'description': 'str'
    }

    attribute_map = {
        'capability': 'capability',
        'eula': 'eula',
        'approvals_per_hour': 'approvalsPerHour',
        'auto_approve': 'autoApprove',
        'auto_approve_paid': 'autoApprovePaid',
        'auto_approve_onshape': 'autoApproveOnshape',
        'upgradable': 'upgradable',
        'user_based': 'userBased',
        'self_service_disabled': 'selfServiceDisabled',
        'user_limit': 'userLimit',
        'welcome_html': 'welcomeHTML',
        'name': 'name',
        'id': 'id',
        'description': 'description'
    }

    def __init__(self, capability=None, eula=None, approvals_per_hour=None, auto_approve=None, auto_approve_paid=None, auto_approve_onshape=None, upgradable=None, user_based=None, self_service_disabled=None, user_limit=None, welcome_html=None, name=None, id=None, description=None):  # noqa: E501
        """BTBetaCapabilityParams - a model defined in OpenAPI"""  # noqa: E501

        self._capability = None
        self._eula = None
        self._approvals_per_hour = None
        self._auto_approve = None
        self._auto_approve_paid = None
        self._auto_approve_onshape = None
        self._upgradable = None
        self._user_based = None
        self._self_service_disabled = None
        self._user_limit = None
        self._welcome_html = None
        self._name = None
        self._id = None
        self._description = None
        self.discriminator = None

        if capability is not None:
            self.capability = capability
        if eula is not None:
            self.eula = eula
        if approvals_per_hour is not None:
            self.approvals_per_hour = approvals_per_hour
        if auto_approve is not None:
            self.auto_approve = auto_approve
        if auto_approve_paid is not None:
            self.auto_approve_paid = auto_approve_paid
        if auto_approve_onshape is not None:
            self.auto_approve_onshape = auto_approve_onshape
        if upgradable is not None:
            self.upgradable = upgradable
        if user_based is not None:
            self.user_based = user_based
        if self_service_disabled is not None:
            self.self_service_disabled = self_service_disabled
        if user_limit is not None:
            self.user_limit = user_limit
        if welcome_html is not None:
            self.welcome_html = welcome_html
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description

    @property
    def capability(self):
        """Gets the capability of this BTBetaCapabilityParams.  # noqa: E501


        :return: The capability of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: str
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this BTBetaCapabilityParams.


        :param capability: The capability of this BTBetaCapabilityParams.  # noqa: E501
        :type: str
        """

        self._capability = capability

    @property
    def eula(self):
        """Gets the eula of this BTBetaCapabilityParams.  # noqa: E501


        :return: The eula of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: str
        """
        return self._eula

    @eula.setter
    def eula(self, eula):
        """Sets the eula of this BTBetaCapabilityParams.


        :param eula: The eula of this BTBetaCapabilityParams.  # noqa: E501
        :type: str
        """

        self._eula = eula

    @property
    def approvals_per_hour(self):
        """Gets the approvals_per_hour of this BTBetaCapabilityParams.  # noqa: E501


        :return: The approvals_per_hour of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: float
        """
        return self._approvals_per_hour

    @approvals_per_hour.setter
    def approvals_per_hour(self, approvals_per_hour):
        """Sets the approvals_per_hour of this BTBetaCapabilityParams.


        :param approvals_per_hour: The approvals_per_hour of this BTBetaCapabilityParams.  # noqa: E501
        :type: float
        """

        self._approvals_per_hour = approvals_per_hour

    @property
    def auto_approve(self):
        """Gets the auto_approve of this BTBetaCapabilityParams.  # noqa: E501


        :return: The auto_approve of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve

    @auto_approve.setter
    def auto_approve(self, auto_approve):
        """Sets the auto_approve of this BTBetaCapabilityParams.


        :param auto_approve: The auto_approve of this BTBetaCapabilityParams.  # noqa: E501
        :type: bool
        """

        self._auto_approve = auto_approve

    @property
    def auto_approve_paid(self):
        """Gets the auto_approve_paid of this BTBetaCapabilityParams.  # noqa: E501


        :return: The auto_approve_paid of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_paid

    @auto_approve_paid.setter
    def auto_approve_paid(self, auto_approve_paid):
        """Sets the auto_approve_paid of this BTBetaCapabilityParams.


        :param auto_approve_paid: The auto_approve_paid of this BTBetaCapabilityParams.  # noqa: E501
        :type: bool
        """

        self._auto_approve_paid = auto_approve_paid

    @property
    def auto_approve_onshape(self):
        """Gets the auto_approve_onshape of this BTBetaCapabilityParams.  # noqa: E501


        :return: The auto_approve_onshape of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_onshape

    @auto_approve_onshape.setter
    def auto_approve_onshape(self, auto_approve_onshape):
        """Sets the auto_approve_onshape of this BTBetaCapabilityParams.


        :param auto_approve_onshape: The auto_approve_onshape of this BTBetaCapabilityParams.  # noqa: E501
        :type: bool
        """

        self._auto_approve_onshape = auto_approve_onshape

    @property
    def upgradable(self):
        """Gets the upgradable of this BTBetaCapabilityParams.  # noqa: E501


        :return: The upgradable of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: bool
        """
        return self._upgradable

    @upgradable.setter
    def upgradable(self, upgradable):
        """Sets the upgradable of this BTBetaCapabilityParams.


        :param upgradable: The upgradable of this BTBetaCapabilityParams.  # noqa: E501
        :type: bool
        """

        self._upgradable = upgradable

    @property
    def user_based(self):
        """Gets the user_based of this BTBetaCapabilityParams.  # noqa: E501


        :return: The user_based of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: bool
        """
        return self._user_based

    @user_based.setter
    def user_based(self, user_based):
        """Sets the user_based of this BTBetaCapabilityParams.


        :param user_based: The user_based of this BTBetaCapabilityParams.  # noqa: E501
        :type: bool
        """

        self._user_based = user_based

    @property
    def self_service_disabled(self):
        """Gets the self_service_disabled of this BTBetaCapabilityParams.  # noqa: E501


        :return: The self_service_disabled of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: bool
        """
        return self._self_service_disabled

    @self_service_disabled.setter
    def self_service_disabled(self, self_service_disabled):
        """Sets the self_service_disabled of this BTBetaCapabilityParams.


        :param self_service_disabled: The self_service_disabled of this BTBetaCapabilityParams.  # noqa: E501
        :type: bool
        """

        self._self_service_disabled = self_service_disabled

    @property
    def user_limit(self):
        """Gets the user_limit of this BTBetaCapabilityParams.  # noqa: E501


        :return: The user_limit of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: int
        """
        return self._user_limit

    @user_limit.setter
    def user_limit(self, user_limit):
        """Sets the user_limit of this BTBetaCapabilityParams.


        :param user_limit: The user_limit of this BTBetaCapabilityParams.  # noqa: E501
        :type: int
        """

        self._user_limit = user_limit

    @property
    def welcome_html(self):
        """Gets the welcome_html of this BTBetaCapabilityParams.  # noqa: E501


        :return: The welcome_html of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: str
        """
        return self._welcome_html

    @welcome_html.setter
    def welcome_html(self, welcome_html):
        """Sets the welcome_html of this BTBetaCapabilityParams.


        :param welcome_html: The welcome_html of this BTBetaCapabilityParams.  # noqa: E501
        :type: str
        """

        self._welcome_html = welcome_html

    @property
    def name(self):
        """Gets the name of this BTBetaCapabilityParams.  # noqa: E501


        :return: The name of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BTBetaCapabilityParams.


        :param name: The name of this BTBetaCapabilityParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this BTBetaCapabilityParams.  # noqa: E501


        :return: The id of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BTBetaCapabilityParams.


        :param id: The id of this BTBetaCapabilityParams.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this BTBetaCapabilityParams.  # noqa: E501


        :return: The description of this BTBetaCapabilityParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BTBetaCapabilityParams.


        :param description: The description of this BTBetaCapabilityParams.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTBetaCapabilityParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
