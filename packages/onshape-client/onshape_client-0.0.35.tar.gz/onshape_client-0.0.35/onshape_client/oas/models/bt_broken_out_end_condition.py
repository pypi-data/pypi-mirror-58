# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTBrokenOutEndCondition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'upto_point3d': 'BTVector3d',
        'upto_point': 'list[float]',
        'has_upto_point': 'bool',
        'has_offset': 'bool',
        'offset_distance': 'float',
        'offset_opposite_direction': 'bool'
    }

    attribute_map = {
        'upto_point3d': 'uptoPoint3d',
        'upto_point': 'uptoPoint',
        'has_upto_point': 'hasUptoPoint',
        'has_offset': 'hasOffset',
        'offset_distance': 'offsetDistance',
        'offset_opposite_direction': 'offsetOppositeDirection'
    }

    def __init__(self, upto_point3d=None, upto_point=None, has_upto_point=None, has_offset=None, offset_distance=None, offset_opposite_direction=None):  # noqa: E501
        """BTBrokenOutEndCondition - a model defined in OpenAPI"""  # noqa: E501

        self._upto_point3d = None
        self._upto_point = None
        self._has_upto_point = None
        self._has_offset = None
        self._offset_distance = None
        self._offset_opposite_direction = None
        self.discriminator = None

        if upto_point3d is not None:
            self.upto_point3d = upto_point3d
        if upto_point is not None:
            self.upto_point = upto_point
        if has_upto_point is not None:
            self.has_upto_point = has_upto_point
        if has_offset is not None:
            self.has_offset = has_offset
        if offset_distance is not None:
            self.offset_distance = offset_distance
        if offset_opposite_direction is not None:
            self.offset_opposite_direction = offset_opposite_direction

    @property
    def upto_point3d(self):
        """Gets the upto_point3d of this BTBrokenOutEndCondition.  # noqa: E501


        :return: The upto_point3d of this BTBrokenOutEndCondition.  # noqa: E501
        :rtype: BTVector3d
        """
        return self._upto_point3d

    @upto_point3d.setter
    def upto_point3d(self, upto_point3d):
        """Sets the upto_point3d of this BTBrokenOutEndCondition.


        :param upto_point3d: The upto_point3d of this BTBrokenOutEndCondition.  # noqa: E501
        :type: BTVector3d
        """

        self._upto_point3d = upto_point3d

    @property
    def upto_point(self):
        """Gets the upto_point of this BTBrokenOutEndCondition.  # noqa: E501


        :return: The upto_point of this BTBrokenOutEndCondition.  # noqa: E501
        :rtype: list[float]
        """
        return self._upto_point

    @upto_point.setter
    def upto_point(self, upto_point):
        """Sets the upto_point of this BTBrokenOutEndCondition.


        :param upto_point: The upto_point of this BTBrokenOutEndCondition.  # noqa: E501
        :type: list[float]
        """

        self._upto_point = upto_point

    @property
    def has_upto_point(self):
        """Gets the has_upto_point of this BTBrokenOutEndCondition.  # noqa: E501


        :return: The has_upto_point of this BTBrokenOutEndCondition.  # noqa: E501
        :rtype: bool
        """
        return self._has_upto_point

    @has_upto_point.setter
    def has_upto_point(self, has_upto_point):
        """Sets the has_upto_point of this BTBrokenOutEndCondition.


        :param has_upto_point: The has_upto_point of this BTBrokenOutEndCondition.  # noqa: E501
        :type: bool
        """

        self._has_upto_point = has_upto_point

    @property
    def has_offset(self):
        """Gets the has_offset of this BTBrokenOutEndCondition.  # noqa: E501


        :return: The has_offset of this BTBrokenOutEndCondition.  # noqa: E501
        :rtype: bool
        """
        return self._has_offset

    @has_offset.setter
    def has_offset(self, has_offset):
        """Sets the has_offset of this BTBrokenOutEndCondition.


        :param has_offset: The has_offset of this BTBrokenOutEndCondition.  # noqa: E501
        :type: bool
        """

        self._has_offset = has_offset

    @property
    def offset_distance(self):
        """Gets the offset_distance of this BTBrokenOutEndCondition.  # noqa: E501


        :return: The offset_distance of this BTBrokenOutEndCondition.  # noqa: E501
        :rtype: float
        """
        return self._offset_distance

    @offset_distance.setter
    def offset_distance(self, offset_distance):
        """Sets the offset_distance of this BTBrokenOutEndCondition.


        :param offset_distance: The offset_distance of this BTBrokenOutEndCondition.  # noqa: E501
        :type: float
        """

        self._offset_distance = offset_distance

    @property
    def offset_opposite_direction(self):
        """Gets the offset_opposite_direction of this BTBrokenOutEndCondition.  # noqa: E501


        :return: The offset_opposite_direction of this BTBrokenOutEndCondition.  # noqa: E501
        :rtype: bool
        """
        return self._offset_opposite_direction

    @offset_opposite_direction.setter
    def offset_opposite_direction(self, offset_opposite_direction):
        """Sets the offset_opposite_direction of this BTBrokenOutEndCondition.


        :param offset_opposite_direction: The offset_opposite_direction of this BTBrokenOutEndCondition.  # noqa: E501
        :type: bool
        """

        self._offset_opposite_direction = offset_opposite_direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTBrokenOutEndCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
