# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IntegrationsParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'team_ids': 'list[str]',
        'providers_type': 'int',
        'access_level': 'int',
        'provider_ids': 'list[str]',
        'user_ids': 'list[str]'
    }

    attribute_map = {
        'team_ids': 'teamIds',
        'providers_type': 'providersType',
        'access_level': 'accessLevel',
        'provider_ids': 'providerIds',
        'user_ids': 'userIds'
    }

    def __init__(self, team_ids=None, providers_type=None, access_level=None, provider_ids=None, user_ids=None):  # noqa: E501
        """IntegrationsParams - a model defined in OpenAPI"""  # noqa: E501

        self._team_ids = None
        self._providers_type = None
        self._access_level = None
        self._provider_ids = None
        self._user_ids = None
        self.discriminator = None

        if team_ids is not None:
            self.team_ids = team_ids
        if providers_type is not None:
            self.providers_type = providers_type
        if access_level is not None:
            self.access_level = access_level
        if provider_ids is not None:
            self.provider_ids = provider_ids
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def team_ids(self):
        """Gets the team_ids of this IntegrationsParams.  # noqa: E501


        :return: The team_ids of this IntegrationsParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._team_ids

    @team_ids.setter
    def team_ids(self, team_ids):
        """Sets the team_ids of this IntegrationsParams.


        :param team_ids: The team_ids of this IntegrationsParams.  # noqa: E501
        :type: list[str]
        """

        self._team_ids = team_ids

    @property
    def providers_type(self):
        """Gets the providers_type of this IntegrationsParams.  # noqa: E501


        :return: The providers_type of this IntegrationsParams.  # noqa: E501
        :rtype: int
        """
        return self._providers_type

    @providers_type.setter
    def providers_type(self, providers_type):
        """Sets the providers_type of this IntegrationsParams.


        :param providers_type: The providers_type of this IntegrationsParams.  # noqa: E501
        :type: int
        """

        self._providers_type = providers_type

    @property
    def access_level(self):
        """Gets the access_level of this IntegrationsParams.  # noqa: E501


        :return: The access_level of this IntegrationsParams.  # noqa: E501
        :rtype: int
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this IntegrationsParams.


        :param access_level: The access_level of this IntegrationsParams.  # noqa: E501
        :type: int
        """

        self._access_level = access_level

    @property
    def provider_ids(self):
        """Gets the provider_ids of this IntegrationsParams.  # noqa: E501


        :return: The provider_ids of this IntegrationsParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._provider_ids

    @provider_ids.setter
    def provider_ids(self, provider_ids):
        """Sets the provider_ids of this IntegrationsParams.


        :param provider_ids: The provider_ids of this IntegrationsParams.  # noqa: E501
        :type: list[str]
        """

        self._provider_ids = provider_ids

    @property
    def user_ids(self):
        """Gets the user_ids of this IntegrationsParams.  # noqa: E501


        :return: The user_ids of this IntegrationsParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this IntegrationsParams.


        :param user_ids: The user_ids of this IntegrationsParams.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
