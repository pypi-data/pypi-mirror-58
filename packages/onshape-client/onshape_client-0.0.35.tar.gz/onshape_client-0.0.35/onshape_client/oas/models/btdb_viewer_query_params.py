# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTDBViewerQueryParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection': 'str',
        'db': 'str',
        'field_values': 'dict(str, str)',
        'from_date': 'datetime',
        'to_date': 'datetime'
    }

    attribute_map = {
        'collection': 'collection',
        'db': 'db',
        'field_values': 'fieldValues',
        'from_date': 'fromDate',
        'to_date': 'toDate'
    }

    def __init__(self, collection=None, db=None, field_values=None, from_date=None, to_date=None):  # noqa: E501
        """BTDBViewerQueryParams - a model defined in OpenAPI"""  # noqa: E501

        self._collection = None
        self._db = None
        self._field_values = None
        self._from_date = None
        self._to_date = None
        self.discriminator = None

        if collection is not None:
            self.collection = collection
        if db is not None:
            self.db = db
        if field_values is not None:
            self.field_values = field_values
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date

    @property
    def collection(self):
        """Gets the collection of this BTDBViewerQueryParams.  # noqa: E501


        :return: The collection of this BTDBViewerQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this BTDBViewerQueryParams.


        :param collection: The collection of this BTDBViewerQueryParams.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def db(self):
        """Gets the db of this BTDBViewerQueryParams.  # noqa: E501


        :return: The db of this BTDBViewerQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this BTDBViewerQueryParams.


        :param db: The db of this BTDBViewerQueryParams.  # noqa: E501
        :type: str
        """

        self._db = db

    @property
    def field_values(self):
        """Gets the field_values of this BTDBViewerQueryParams.  # noqa: E501


        :return: The field_values of this BTDBViewerQueryParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this BTDBViewerQueryParams.


        :param field_values: The field_values of this BTDBViewerQueryParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._field_values = field_values

    @property
    def from_date(self):
        """Gets the from_date of this BTDBViewerQueryParams.  # noqa: E501


        :return: The from_date of this BTDBViewerQueryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this BTDBViewerQueryParams.


        :param from_date: The from_date of this BTDBViewerQueryParams.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this BTDBViewerQueryParams.  # noqa: E501


        :return: The to_date of this BTDBViewerQueryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this BTDBViewerQueryParams.


        :param to_date: The to_date of this BTDBViewerQueryParams.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTDBViewerQueryParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
