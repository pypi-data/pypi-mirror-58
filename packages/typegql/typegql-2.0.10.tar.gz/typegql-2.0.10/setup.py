# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['typegql', 'typegql.client', 'typegql.core']

package_data = \
{'': ['*']}

install_requires = \
['graphql-core>=3']

extras_require = \
{'client': ['aiohttp>=3.4,<4.0']}

setup_kwargs = {
    'name': 'typegql',
    'version': '2.0.10',
    'description': 'A Python GraphQL library that makes use of type hinting and concurrency support with the new async/await syntax.',
    'long_description': '.. role:: python(code)\n    :language: python\n\nTypeGQL\n========\n\nA Python `GraphQL <https://graphql.org>`_ library that makes use of type hinting and concurrency support with the new async/await syntax.\n\n\nDISCLAIMER\n==========\n\nThis library is still in it\'s infancy, so **use with caution** and feel free to contribute.\n\n\nInstallation\n============\n\n.. code-block:: python\n\n    pip install typegql\n\n\nUsage\n=====\n\nThe following demonstrates how to use **typegql** for implementing a *GraphQL API* for a library of books.\nThe example can be found in *typegql/core/examples* and you can run it with Sanic by executing ``python <path_to_example>/server.py``\n\nDefine your query\n-----------------\n\n.. code-block:: python\n\n    from typing import List\n    from typegql.core.graph import Graph, Connection\n    from typegql.examples.library.types import Author, Category\n    from typegql.examples.library.types import Book\n    from typegql.examples.library import db\n\n    class Query(Graph):\n        books: List[Book] = Field()\n        authors: List[Author] = Field()\n        categories: List[Category] = Field()\n\n        books_connection: Connection[Book] = Field(description=\'Relay connection\')\n\n        async def resolve_authors(self, info, **kwargs):\n            return db.get(\'authors\')\n\n        async def resolve_books(self, info, **kwargs):\n            return db.get(\'books\')\n\n        async def resolve_categories(self, info, **kwargs):\n            return db.get(\'categories\')\n\n       async def resolve_books_connection(self, info, **kwargs):\n            data = db.get(\'books\')\n            return {\n                \'edges\': [{\n                    \'node\': node\n                } for node in data]}\n\n\nDefine your types\n-----------------\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from datetime import datetime\n    from decimal import Decimal\n    from enum import Enum\n    from typing import List\n\n    from typegql import Field, ID, OptionalField, ReadonlyField\n    from typegql.core.graph import Graph\n    from examples.library import db\n\n\n    class Gender(Enum):\n        MALE = \'male\'\n        FEMALE = \'female\'\n\n\n    class GeoLocation(Graph):\n    latitude: Decimal = Field()\n    longitude: Decimal = Field()\n\n    def __init__(self, latitude, longitude):\n        self.latitude = latitude\n        self.longitude = longitude\n\n\n    @dataclass\n    class Author(Graph):\n        """Person that is usually a writer"""\n\n        id: ID = ReadonlyField()\n        name: str = Field()\n        gender: Gender = OptionalField()\n        geo: GeoLocation = OptionalField()\n\n\n    @dataclass\n    class Category(Graph):\n        id: ID = ReadonlyField()\n        name: str = Field()\n\n\n    @dataclass\n    class Book(Graph):\n        """A book... for reading :|"""\n\n        id: ID = ReadonlyField()\n        author_id: ID = Field()\n        title: str = OptionalField()\n        author: Author = ReadonlyField(description=\'The author of this book\')\n        categories: List[Category] = OptionalField()\n        published: datetime = OptionalField()\n        tags: List[str] = OptionalField()\n\n        def __post_init__(self):\n            self.published = datetime.strptime(self.published, \'%Y-%m-%d %H:%M:%S\')\n\n        async def resolve_author(self, info):\n            data = filter(lambda x: x[\'id\'] == self.author_id, db.get(\'authors\'))\n            data = next(data)\n            author = Author(**data)\n            author.gender = Gender[author.gender.upper()].value\n            if \'geo\' in data:\n                author.geo = GeoLocation(**data.get(\'geo\'))\n            return author\n\n        async def resolve_categories(self, selections, name=None):\n            data = filter(lambda x: x[\'id\'] in self.categories, db.get(\'categories\'))\n            for d in data:  # showcasing async generator\n                yield Category(**d)\n\n        def resolve_tags(self, selections):\n            return [\'testing\', \'purpose\']\n\n\nUsing Fields instead\n--------------------\n\nYou can use the following fields to define your GraphQL schema:\n\n.. code-block:: python\n\n    Field, InputField, RequiredField, OptionalField\n\nFor example:\n\n.. code-block:: python\n\n    from typegql import Field, Connection, OptionalField\n\n\n    class Query(Graph):\n        authors: Author = Field()\n        categories: Category = Field(description="what\'s this?")\n        books_connection: Connection[Book] = OptionalField()\n\nRun your query\n--------------\n\n.. code-block:: python\n\n    from typegql.core.schema import Schema\n    from examples.library.query import Query\n\n\n    schema = Schema(Query)\n    query = \'\'\'\n    query BooksConnection {\n      books_connection {\n        edges {\n          node {\n            id\n            title\n            published\n            author {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    \'\'\'\n\n    async def run():\n        result = await schema.run(query)\n\nClient\n======\n\nTypeGQL supports DSL client for working with a GraphQL API.\nThe client automatically converts snake to camelcase. set `camelcase=False` if this is not desired\n\n.. code-block:: python\n\n    pip install typegql[client]\n\nFor example:\n\n\n.. code-block:: python\n\n    from typegql.client import Client\n\n    async with Client(url, camelcase=True) as client:\n        await client.introspection()\n        dsl = client.dsl\n        query = dsl.Query.books_connection.select(dsl.BooksConnection.total_count)\n        doc = dsl.query(query)\n\n        status, result = await client.execute(doc)\n\nChange Log\n==========\n2.0.9 [2019-10-29]\n------------------\n- changed the name of an input object from ObjectMuation to ObjectInput\n\n2.0.8 [2019-10-15]\n------------------\n- allows forward reference between graph types (ie: `Book` has an `author` and an `Author` has `books`).\n    this only works with python 3.7(using `from __future__ import annotations`, or python 3.8\n\n2.0.6 [2019-06-24]\n------------------\n- updates uvloop dependency\n\n2.0.5 [2019-04-24]\n------------------\n- fixed a bug when sending `introspection schema`\n\n2.0.4 [2019-04-24]\n------------------\n- updates assert for introspection add message with status and result\n- adds support for enum objects in `resolve_field_velue_or_error`\n\n2.0.3 [2019-02-08]\n------------------\n- changes `Connection`, `Edge`, `Node` and `PageInfo` to interfaces `IConnection`, `IEdge`, etc.\n- implements default `Connection` and `PageInfo` objects\n- removes `has_next`, `has_previous` from `PageInfo`\n\n2.0.1 [2019-01-19]\n------------------\n- all properties that don\'t have a `Field` instance assigned to them will be ignored by the `Schema`\n- updates docs & example to reflect 2.0 changes\n- fixed a bug when using a `List` argument in mutations\n\n1.0.7 [2018-12-09]\n------------------\n- bug fixing\n- adds support for camelcase in Client\n\n1.0.1 [2018-11-19]\n------------------\n- adds support for client DSL\n\nInitial\n-------\n- added `graphql-core-next <https://github.com/graphql-python/graphql-core-next>`_ as a baseline for all GraphQL operations\n\n\nTODO\n====\n- testing\n- travis\n- more testing\n- please help with testing :|\n',
    'author': 'Ciprian Tarta',
    'author_email': 'ciprian@cipriantarta.ro',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/cipriantarta/typegql',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
